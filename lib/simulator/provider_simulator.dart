import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:jinbeanpod_83904710/features/provider/plugins/order_manage/order_manage_controller.dart';
import 'package:jinbeanpod_83904710/features/provider/clients/presentation/client_controller.dart';
import 'package:jinbeanpod_83904710/features/provider/plugins/service_manage/service_manage_controller.dart';
import 'package:jinbeanpod_83904710/features/provider/income/income_controller.dart';
import 'package:jinbeanpod_83904710/features/provider/notifications/notification_controller.dart';

class ProviderSimulator extends StatefulWidget {
  const ProviderSimulator({Key? key}) : super(key: key);

  @override
  State<ProviderSimulator> createState() => _ProviderSimulatorState();
}

class _ProviderSimulatorState extends State<ProviderSimulator> {
  int _currentIndex = 0;
  late PageController _pageController;

  @override
  void initState() {
    super.initState();
    _pageController = PageController();
    _initializeControllers();
  }

  void _initializeControllers() {
    // ÂàùÂßãÂåñÊâÄÊúâÊéßÂà∂Âô®
    Get.put(OrderManageController());
    Get.put(ClientController());
    Get.put(ServiceManageController());
    Get.put(IncomeController());
    Get.put(NotificationController());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('ProviderÁ´ØÊ®°ÊãüÂô®'),
        backgroundColor: Colors.blue[600],
        foregroundColor: Colors.white,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () => _showSimulatorSettings(),
          ),
        ],
      ),
      body: Column(
        children: [
          // Ê®°ÊãüÂô®Áä∂ÊÄÅÊ†è
          _buildStatusBar(),
          
          // ‰∏ªÂÜÖÂÆπÂå∫Âüü
          Expanded(
            child: PageView(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _currentIndex = index;
                });
              },
              children: [
                _buildOrderSimulator(),
                _buildClientSimulator(),
                _buildServiceSimulator(),
                _buildIncomeSimulator(),
                _buildNotificationSimulator(),
              ],
            ),
          ),
        ],
      ),
      bottomNavigationBar: _buildBottomNavigationBar(),
    );
  }

  Widget _buildStatusBar() {
    return Container(
      padding: const EdgeInsets.all(16),
      color: Colors.grey[100],
      child: Row(
        children: [
          Icon(Icons.sim_card, color: Colors.green[600]),
          const SizedBox(width: 8),
          const Text(
            'Ê®°ÊãüÂô®ËøêË°å‰∏≠',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          const Spacer(),
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
            decoration: BoxDecoration(
              color: Colors.green[100],
              borderRadius: BorderRadius.circular(12),
            ),
            child: Text(
              'Âú®Á∫ø',
              style: TextStyle(color: Colors.green[700], fontSize: 12),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOrderSimulator() {
    final orderController = Get.find<OrderManageController>();
    
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üì¶ ËÆ¢ÂçïÁÆ°ÁêÜÊ®°ÊãüÂô®',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.blue[700],
            ),
          ),
          const SizedBox(height: 16),
          
          // Ê®°ÊãüÊï∞ÊçÆÁîüÊàê
          _buildSimulatorCard(
            title: 'ÁîüÊàêÊ®°ÊãüËÆ¢Âçï',
            content: Column(
              children: [
                _buildSimulatorButton(
                  'ÁîüÊàêÂæÖÂ§ÑÁêÜËÆ¢Âçï',
                  () => _generateMockOrders(orderController, 'pending'),
                  Colors.orange,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêËøõË°å‰∏≠ËÆ¢Âçï',
                  () => _generateMockOrders(orderController, 'in_progress'),
                  Colors.blue,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÂ∑≤ÂÆåÊàêËÆ¢Âçï',
                  () => _generateMockOrders(orderController, 'completed'),
                  Colors.green,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // ËÆ¢ÂçïÁªüËÆ°
          _buildSimulatorCard(
            title: 'ËÆ¢ÂçïÁªüËÆ°',
            content: Obx(() => Column(
              children: [
                _buildStatRow('ÊÄªËÆ¢ÂçïÊï∞', '${orderController.orders.length}'),
                _buildStatRow('ÂæÖÂ§ÑÁêÜ', '${orderController.orders.where((o) => o['status'] == 'pending').length}'),
                _buildStatRow('ËøõË°å‰∏≠', '${orderController.orders.where((o) => o['status'] == 'in_progress').length}'),
                _buildStatRow('Â∑≤ÂÆåÊàê', '${orderController.orders.where((o) => o['status'] == 'completed').length}'),
              ],
            )),
          ),
        ],
      ),
    );
  }

  Widget _buildClientSimulator() {
    final clientController = Get.find<ClientController>();
    
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üë• ÂÆ¢Êà∑ÁÆ°ÁêÜÊ®°ÊãüÂô®',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.green[700],
            ),
          ),
          const SizedBox(height: 16),
          
          // Ê®°ÊãüÂÆ¢Êà∑ÁîüÊàê
          _buildSimulatorCard(
            title: 'ÁîüÊàêÊ®°ÊãüÂÆ¢Êà∑',
            content: Column(
              children: [
                _buildSimulatorButton(
                  'ÁîüÊàêÂ∑≤ÊúçÂä°ÂÆ¢Êà∑',
                  () => _generateMockClients(clientController, 'served'),
                  Colors.green,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊ¥ΩË∞à‰∏≠ÂÆ¢Êà∑',
                  () => _generateMockClients(clientController, 'negotiating'),
                  Colors.blue,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊΩúÂú®ÂÆ¢Êà∑',
                  () => _generateMockClients(clientController, 'potential'),
                  Colors.orange,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // ÂÆ¢Êà∑ÁªüËÆ°
          _buildSimulatorCard(
            title: 'ÂÆ¢Êà∑ÁªüËÆ°',
            content: Obx(() => Column(
              children: [
                _buildStatRow('ÊÄªÂÆ¢Êà∑Êï∞', '${clientController.clients.length}'),
                _buildStatRow('Â∑≤ÊúçÂä°', '${clientController.clients.where((c) => c['category'] == 'served').length}'),
                _buildStatRow('Ê¥ΩË∞à‰∏≠', '${clientController.clients.where((c) => c['category'] == 'negotiating').length}'),
                _buildStatRow('ÊΩúÂú®', '${clientController.clients.where((c) => c['category'] == 'potential').length}'),
              ],
            )),
          ),
        ],
      ),
    );
  }

  Widget _buildServiceSimulator() {
    final serviceController = Get.find<ServiceManageController>();
    
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üõ†Ô∏è ÊúçÂä°ÁÆ°ÁêÜÊ®°ÊãüÂô®',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.purple[700],
            ),
          ),
          const SizedBox(height: 16),
          
          // Ê®°ÊãüÊúçÂä°ÁîüÊàê
          _buildSimulatorCard(
            title: 'ÁîüÊàêÊ®°ÊãüÊúçÂä°',
            content: Column(
              children: [
                _buildSimulatorButton(
                  'ÁîüÊàêÊ¥ªË∑ÉÊúçÂä°',
                  () => _generateMockServices(serviceController, 'active'),
                  Colors.green,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊöÇÂÅúÊúçÂä°',
                  () => _generateMockServices(serviceController, 'paused'),
                  Colors.orange,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàê‰∏ãÊû∂ÊúçÂä°',
                  () => _generateMockServices(serviceController, 'inactive'),
                  Colors.red,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // ÊúçÂä°ÁªüËÆ°
          _buildSimulatorCard(
            title: 'ÊúçÂä°ÁªüËÆ°',
            content: Obx(() => Column(
              children: [
                _buildStatRow('ÊÄªÊúçÂä°Êï∞', '${serviceController.services.length}'),
                _buildStatRow('Ê¥ªË∑É', '${serviceController.services.where((s) => s['status'] == 'active').length}'),
                _buildStatRow('ÊöÇÂÅú', '${serviceController.services.where((s) => s['status'] == 'paused').length}'),
                _buildStatRow('‰∏ãÊû∂', '${serviceController.services.where((s) => s['status'] == 'inactive').length}'),
              ],
            )),
          ),
        ],
      ),
    );
  }

  Widget _buildIncomeSimulator() {
    final incomeController = Get.find<IncomeController>();
    
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üí∞ Êî∂ÂÖ•ÁÆ°ÁêÜÊ®°ÊãüÂô®',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.amber[700],
            ),
          ),
          const SizedBox(height: 16),
          
          // Ê®°ÊãüÊî∂ÂÖ•ÁîüÊàê
          _buildSimulatorCard(
            title: 'ÁîüÊàêÊ®°ÊãüÊî∂ÂÖ•',
            content: Column(
              children: [
                _buildSimulatorButton(
                  'ÁîüÊàê‰ªäÊó•Êî∂ÂÖ•',
                  () => _generateMockIncome(incomeController, 'today'),
                  Colors.green,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊú¨Âë®Êî∂ÂÖ•',
                  () => _generateMockIncome(incomeController, 'week'),
                  Colors.blue,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊú¨ÊúàÊî∂ÂÖ•',
                  () => _generateMockIncome(incomeController, 'month'),
                  Colors.purple,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // Êî∂ÂÖ•ÁªüËÆ°
          _buildSimulatorCard(
            title: 'Êî∂ÂÖ•ÁªüËÆ°',
            content: Obx(() => Column(
              children: [
                _buildStatRow('ÊÄªÊî∂ÂÖ•', '\$${_calculateTotalIncome(incomeController)}'),
                _buildStatRow('‰ªäÊó•Êî∂ÂÖ•', '\$${_calculateTodayIncome(incomeController)}'),
                _buildStatRow('Êú¨Âë®Êî∂ÂÖ•', '\$${_calculateWeekIncome(incomeController)}'),
                _buildStatRow('Êú¨ÊúàÊî∂ÂÖ•', '\$${_calculateMonthIncome(incomeController)}'),
              ],
            )),
          ),
        ],
      ),
    );
  }

  Widget _buildNotificationSimulator() {
    final notificationController = Get.find<NotificationController>();
    
    return Padding(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üîî ÈÄöÁü•Á≥ªÁªüÊ®°ÊãüÂô®',
            style: Theme.of(context).textTheme.headlineSmall?.copyWith(
              fontWeight: FontWeight.bold,
              color: Colors.red[700],
            ),
          ),
          const SizedBox(height: 16),
          
          // Ê®°ÊãüÈÄöÁü•ÁîüÊàê
          _buildSimulatorCard(
            title: 'ÁîüÊàêÊ®°ÊãüÈÄöÁü•',
            content: Column(
              children: [
                _buildSimulatorButton(
                  'ÁîüÊàêËÆ¢ÂçïÈÄöÁü•',
                  () => _generateMockNotifications(notificationController, 'order'),
                  Colors.blue,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÊîØ‰ªòÈÄöÁü•',
                  () => _generateMockNotifications(notificationController, 'payment'),
                  Colors.green,
                ),
                const SizedBox(height: 8),
                _buildSimulatorButton(
                  'ÁîüÊàêÁ≥ªÁªüÈÄöÁü•',
                  () => _generateMockNotifications(notificationController, 'system'),
                  Colors.orange,
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 16),
          
          // ÈÄöÁü•ÁªüËÆ°
          _buildSimulatorCard(
            title: 'ÈÄöÁü•ÁªüËÆ°',
            content: Obx(() => Column(
              children: [
                _buildStatRow('ÊÄªÈÄöÁü•Êï∞', '${notificationController.notifications.length}'),
                _buildStatRow('Êú™ËØªÈÄöÁü•', '${notificationController.notifications.where((n) => n['is_read'] == false).length}'),
                _buildStatRow('Â∑≤ËØªÈÄöÁü•', '${notificationController.notifications.where((n) => n['is_read'] == true).length}'),
                _buildStatRow('Ê∂àÊÅØÊï∞', '${notificationController.messages.length}'),
              ],
            )),
          ),
        ],
      ),
    );
  }

  Widget _buildSimulatorCard({required String title, required Widget content}) {
    return Card(
      elevation: 2,
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              title,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 12),
            content,
          ],
        ),
      ),
    );
  }

  Widget _buildSimulatorButton(String text, VoidCallback onPressed, Color color) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: color,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 12),
        ),
        child: Text(text),
      ),
    );
  }

  Widget _buildStatRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label),
          Text(
            value,
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomNavigationBar() {
    return BottomNavigationBar(
      currentIndex: _currentIndex,
      onTap: (index) {
        setState(() {
          _currentIndex = index;
        });
        _pageController.animateToPage(
          index,
          duration: const Duration(milliseconds: 300),
          curve: Curves.easeInOut,
        );
      },
      type: BottomNavigationBarType.fixed,
      selectedItemColor: Colors.blue[600],
      unselectedItemColor: Colors.grey[600],
      items: const [
        BottomNavigationBarItem(
          icon: Icon(Icons.shopping_cart),
          label: 'ËÆ¢Âçï',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.people),
          label: 'ÂÆ¢Êà∑',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.build),
          label: 'ÊúçÂä°',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.attach_money),
          label: 'Êî∂ÂÖ•',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.notifications),
          label: 'ÈÄöÁü•',
        ),
      ],
    );
  }

  void _showSimulatorSettings() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Ê®°ÊãüÂô®ËÆæÁΩÆ'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.refresh),
              title: const Text('ÈáçÁΩÆÊâÄÊúâÊï∞ÊçÆ'),
              onTap: () {
                _resetAllData();
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.download),
              title: const Text('ÂØºÂá∫Ê®°ÊãüÊï∞ÊçÆ'),
              onTap: () {
                _exportSimulatorData();
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: const Icon(Icons.info),
              title: const Text('ÂÖ≥‰∫éÊ®°ÊãüÂô®'),
              onTap: () {
                _showAboutDialog();
                Navigator.pop(context);
              },
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÂÖ≥Èó≠'),
          ),
        ],
      ),
    );
  }

  // Ê®°ÊãüÊï∞ÊçÆÁîüÊàêÊñπÊ≥ï
  void _generateMockOrders(OrderManageController controller, String status) {
    final mockOrders = [
      {
        'id': 'ORD${DateTime.now().millisecondsSinceEpoch}',
        'customer_name': 'Âº†‰∏â',
        'service_name': 'Ê∏ÖÊ¥ÅÊúçÂä°',
        'status': status,
        'amount': 150.0,
        'created_at': DateTime.now().toString(),
        'scheduled_time': DateTime.now().add(const Duration(hours: 2)).toString(),
      },
      {
        'id': 'ORD${DateTime.now().millisecondsSinceEpoch + 1}',
        'customer_name': 'ÊùéÂõõ',
        'service_name': 'Áª¥‰øÆÊúçÂä°',
        'status': status,
        'amount': 200.0,
        'created_at': DateTime.now().toString(),
        'scheduled_time': DateTime.now().add(const Duration(hours: 3)).toString(),
      },
    ];

    controller.orders.addAll(mockOrders);
    Get.snackbar(
      'ÊàêÂäü',
      'ÁîüÊàê‰∫Ü${mockOrders.length}‰∏™${_getStatusText(status)}ËÆ¢Âçï',
      backgroundColor: Colors.green[100],
      colorText: Colors.green[800],
    );
  }

  void _generateMockClients(ClientController controller, String category) {
    final mockClients = [
      {
        'id': 'CLI${DateTime.now().millisecondsSinceEpoch}',
        'name': 'Áéã‰∫î',
        'email': 'wangwu@example.com',
        'phone': '13800138000',
        'category': category,
        'last_contact': DateTime.now().toString(),
        'total_orders': 5,
      },
      {
        'id': 'CLI${DateTime.now().millisecondsSinceEpoch + 1}',
        'name': 'ËµµÂÖ≠',
        'email': 'zhaoliu@example.com',
        'phone': '13800138001',
        'category': category,
        'last_contact': DateTime.now().toString(),
        'total_orders': 3,
      },
    ];

    controller.clients.addAll(mockClients);
    Get.snackbar(
      'ÊàêÂäü',
      'ÁîüÊàê‰∫Ü${mockClients.length}‰∏™${_getCategoryText(category)}ÂÆ¢Êà∑',
      backgroundColor: Colors.green[100],
      colorText: Colors.green[800],
    );
  }

  void _generateMockServices(ServiceManageController controller, String status) {
    final mockServices = [
      {
        'id': 'SRV${DateTime.now().millisecondsSinceEpoch}',
        'name': '‰∏ì‰∏öÊ∏ÖÊ¥ÅÊúçÂä°',
        'description': 'Êèê‰æõÈ´òË¥®ÈáèÁöÑÂÆ∂Â∫≠Ê∏ÖÊ¥ÅÊúçÂä°',
        'base_price': 100.0,
        'status': status,
        'category': 'cleaning',
        'duration_minutes': 120,
      },
      {
        'id': 'SRV${DateTime.now().millisecondsSinceEpoch + 1}',
        'name': 'ËÆæÂ§áÁª¥‰øÆÊúçÂä°',
        'description': '‰∏ì‰∏öÁª¥‰øÆÂêÑÁßçÂÆ∂Áî®ËÆæÂ§á',
        'base_price': 150.0,
        'status': status,
        'category': 'repair',
        'duration_minutes': 180,
      },
    ];

    controller.services.addAll(mockServices);
    Get.snackbar(
      'ÊàêÂäü',
      'ÁîüÊàê‰∫Ü${mockServices.length}‰∏™${_getStatusText(status)}ÊúçÂä°',
      backgroundColor: Colors.green[100],
      colorText: Colors.green[800],
    );
  }

  void _generateMockIncome(IncomeController controller, String period) {
    final mockIncome = [
      {
        'id': 'INC${DateTime.now().millisecondsSinceEpoch}',
        'amount': 150.0,
        'order_id': 'ORD123',
        'payment_method': 'online',
        'status': 'completed',
        'created_at': DateTime.now().toString(),
      },
      {
        'id': 'INC${DateTime.now().millisecondsSinceEpoch + 1}',
        'amount': 200.0,
        'order_id': 'ORD124',
        'payment_method': 'cash',
        'status': 'completed',
        'created_at': DateTime.now().toString(),
      },
    ];

    controller.incomeRecords.addAll(mockIncome);
    Get.snackbar(
      'ÊàêÂäü',
      'ÁîüÊàê‰∫Ü${mockIncome.length}Êù°${_getPeriodText(period)}Êî∂ÂÖ•ËÆ∞ÂΩï',
      backgroundColor: Colors.green[100],
      colorText: Colors.green[800],
    );
  }

  void _generateMockNotifications(NotificationController controller, String type) {
    final mockNotifications = [
      {
        'id': 'NOT${DateTime.now().millisecondsSinceEpoch}',
        'title': _getNotificationTitle(type),
        'message': _getNotificationMessage(type),
        'type': type,
        'is_read': false,
        'created_at': DateTime.now().toString(),
      },
      {
        'id': 'NOT${DateTime.now().millisecondsSinceEpoch + 1}',
        'title': _getNotificationTitle(type),
        'message': _getNotificationMessage(type),
        'type': type,
        'is_read': false,
        'created_at': DateTime.now().toString(),
      },
    ];

    controller.notifications.addAll(mockNotifications);
    Get.snackbar(
      'ÊàêÂäü',
      'ÁîüÊàê‰∫Ü${mockNotifications.length}Êù°${_getTypeText(type)}ÈÄöÁü•',
      backgroundColor: Colors.green[100],
      colorText: Colors.green[800],
    );
  }

  // ËæÖÂä©ÊñπÊ≥ï
  String _getStatusText(String status) {
    switch (status) {
      case 'pending': return 'ÂæÖÂ§ÑÁêÜ';
      case 'in_progress': return 'ËøõË°å‰∏≠';
      case 'completed': return 'Â∑≤ÂÆåÊàê';
      case 'active': return 'Ê¥ªË∑É';
      case 'paused': return 'ÊöÇÂÅú';
      case 'inactive': return '‰∏ãÊû∂';
      default: return status;
    }
  }

  String _getCategoryText(String category) {
    switch (category) {
      case 'served': return 'Â∑≤ÊúçÂä°';
      case 'negotiating': return 'Ê¥ΩË∞à‰∏≠';
      case 'potential': return 'ÊΩúÂú®';
      default: return category;
    }
  }

  String _getPeriodText(String period) {
    switch (period) {
      case 'today': return '‰ªäÊó•';
      case 'week': return 'Êú¨Âë®';
      case 'month': return 'Êú¨Êúà';
      default: return period;
    }
  }

  String _getTypeText(String type) {
    switch (type) {
      case 'order': return 'ËÆ¢Âçï';
      case 'payment': return 'ÊîØ‰ªò';
      case 'system': return 'Á≥ªÁªü';
      default: return type;
    }
  }

  String _getNotificationTitle(String type) {
    switch (type) {
      case 'order': return 'Êñ∞ËÆ¢ÂçïÈÄöÁü•';
      case 'payment': return 'ÊîØ‰ªòÊàêÂäüÈÄöÁü•';
      case 'system': return 'Á≥ªÁªüÁª¥Êä§ÈÄöÁü•';
      default: return 'ÈÄöÁü•';
    }
  }

  String _getNotificationMessage(String type) {
    switch (type) {
      case 'order': return 'ÊÇ®Êúâ‰∏Ä‰∏™Êñ∞ÁöÑËÆ¢ÂçïÔºåËØ∑ÂèäÊó∂Â§ÑÁêÜ„ÄÇ';
      case 'payment': return 'ÊÇ®ÁöÑÊî∂ÂÖ•Â∑≤Âà∞Ë¥¶ÔºåËØ∑Êü•Êî∂„ÄÇ';
      case 'system': return 'Á≥ªÁªüÂ∞ÜÂú®‰ªäÊôöËøõË°åÁª¥Êä§ÔºåËØ∑ÊèêÂâçÂÅöÂ•ΩÂáÜÂ§á„ÄÇ';
      default: return 'ÊÇ®Êúâ‰∏ÄÊù°Êñ∞Ê∂àÊÅØ„ÄÇ';
    }
  }

  // ÁªüËÆ°ËÆ°ÁÆóÊñπÊ≥ï
  String _calculateTotalIncome(IncomeController controller) {
    double total = 0;
    for (var record in controller.incomeRecords) {
      total += record['amount'] ?? 0;
    }
    return total.toStringAsFixed(2);
  }

  String _calculateTodayIncome(IncomeController controller) {
    double total = 0;
    final today = DateTime.now();
    for (var record in controller.incomeRecords) {
      final recordDate = DateTime.parse(record['created_at']);
      if (recordDate.day == today.day && 
          recordDate.month == today.month && 
          recordDate.year == today.year) {
        total += record['amount'] ?? 0;
      }
    }
    return total.toStringAsFixed(2);
  }

  String _calculateWeekIncome(IncomeController controller) {
    double total = 0;
    final now = DateTime.now();
    final weekStart = now.subtract(Duration(days: now.weekday - 1));
    for (var record in controller.incomeRecords) {
      final recordDate = DateTime.parse(record['created_at']);
      if (recordDate.isAfter(weekStart)) {
        total += record['amount'] ?? 0;
      }
    }
    return total.toStringAsFixed(2);
  }

  String _calculateMonthIncome(IncomeController controller) {
    double total = 0;
    final now = DateTime.now();
    for (var record in controller.incomeRecords) {
      final recordDate = DateTime.parse(record['created_at']);
      if (recordDate.month == now.month && recordDate.year == now.year) {
        total += record['amount'] ?? 0;
      }
    }
    return total.toStringAsFixed(2);
  }

  // ËÆæÁΩÆÊñπÊ≥ï
  void _resetAllData() {
    final orderController = Get.find<OrderManageController>();
    final clientController = Get.find<ClientController>();
    final serviceController = Get.find<ServiceManageController>();
    final incomeController = Get.find<IncomeController>();
    final notificationController = Get.find<NotificationController>();

    orderController.orders.clear();
    clientController.clients.clear();
    serviceController.services.clear();
    incomeController.incomeRecords.clear();
    notificationController.notifications.clear();
    notificationController.messages.clear();

    Get.snackbar(
      'ÈáçÁΩÆÂÆåÊàê',
      'ÊâÄÊúâÊ®°ÊãüÊï∞ÊçÆÂ∑≤Ê∏ÖÁ©∫',
      backgroundColor: Colors.orange[100],
      colorText: Colors.orange[800],
    );
  }

  void _exportSimulatorData() {
    // ËøôÈáåÂèØ‰ª•ÂÆûÁé∞Êï∞ÊçÆÂØºÂá∫ÂäüËÉΩ
    Get.snackbar(
      'ÂØºÂá∫ÂäüËÉΩ',
      'Êï∞ÊçÆÂØºÂá∫ÂäüËÉΩÂºÄÂèë‰∏≠...',
      backgroundColor: Colors.blue[100],
      colorText: Colors.blue[800],
    );
  }

  void _showAboutDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('ÂÖ≥‰∫éProviderÁ´ØÊ®°ÊãüÂô®'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('ÁâàÊú¨: 1.0.0'),
            SizedBox(height: 8),
            Text('ÂäüËÉΩ: Ê®°ÊãüProviderÁ´ØÊâÄÊúâÊ†∏ÂøÉÂäüËÉΩ'),
            SizedBox(height: 8),
            Text('Áî®ÈÄî: ÊµãËØïÂíåÊºîÁ§∫ProviderÁ´ØÂäüËÉΩ'),
            SizedBox(height: 8),
            Text('ÂºÄÂèëËÄÖ: ProviderÁ´ØÂºÄÂèëÂõ¢Èòü'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ÂÖ≥Èó≠'),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
} 