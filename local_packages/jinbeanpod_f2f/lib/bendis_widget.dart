import 'dart:async';
import 'base_painter.dart';
import 'base_state.dart';
import 'package:google_fonts/google_fonts.dart';
import 'figma_to_flutter.dart' as globals;
import 'package:transparent_pointer/transparent_pointer.dart';
import 'package:path_drawing/path_drawing.dart';
import 'package:flutter/material.dart';
import 'dart:io';
class ComponentDescendantNotification extends Notification {
                    final String name;
                    final String id;
                    final dynamic widget;
                    const ComponentDescendantNotification({this.name="", this.id="", this.widget});
                }

        class Node_8_3 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_3({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_3 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_4 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_4({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_4 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_5 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_5({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_5 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_6 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_6({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_6 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_7 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_7({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_7 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_8 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_8({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_8 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_9 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_9({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_9 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_11 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_11({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_11 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_13 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_13({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_13 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_14 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_14({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_14 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_15 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_15({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(245, 199, 84, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_15 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_16 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_16({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_16 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_18 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_18({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_18 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_19 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_19({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_19 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_21 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_21({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_21 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_22 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_22({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_22 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_24 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_24({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_24 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_25 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_25({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_25 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_26 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_26({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_26 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_27 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_27({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_27 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_28 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_28({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_28 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_29 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_29({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_29 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_31 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_31({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_31 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_32 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_32({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_32 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_33 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_33({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_33 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_34 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_34({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_34 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_35 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_35({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M20.7938 16.4944C20.2734 15.5981 19.5 13.0622 19.5 9.75C19.5 5.60786 16.1421 2.25 12 2.25C7.85786 2.25 4.5 5.60786 4.5 9.75C4.5 13.0631 3.72563 15.5981 3.20531 16.4944C2.93487 16.9581 2.9329 17.5311 3.20016 17.9967C3.46741 18.4623 3.96313 18.7496 4.5 18.75L8.32594 18.75C8.68267 20.4956 10.2184 21.7492 12 21.7492C13.7816 21.7492 15.3173 20.4956 15.6741 18.75L19.5 18.75C20.0367 18.7493 20.5321 18.4619 20.7991 17.9963C21.0662 17.5308 21.0641 16.958 20.7938 16.4944L20.7938 16.4944ZM12 20.25C11.0467 20.2497 10.1971 19.6487 9.87938 18.75L14.1206 18.75C13.8029 19.6487 12.9533 20.2497 12 20.25L12 20.25ZM4.5 17.25C5.22188 16.0088 6 13.1325 6 9.75C6 6.43629 8.68629 3.75 12 3.75C15.3137 3.75 18 6.43629 18 9.75C18 13.1297 18.7763 16.0059 19.5 17.25L4.5 17.25Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_35 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_36 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_36({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_36 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_37 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_37({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_37 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_38 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_38({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_38 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_39 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_39({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_39 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_40 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_40({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_40 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_41 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_41({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_41 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_42 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_42({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_42 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_44 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_44({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_44 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_46 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_46({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_46 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_47 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_47({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_47 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_48 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_48({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_48 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_49 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_49({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_49 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_51 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_51({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_51 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_53 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_53({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_53 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_54 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_54({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_54 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_55 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_55({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_55 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_56 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_56({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_56 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_58 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_58({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_58 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_60 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_60({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_60 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_62 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_62({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_62 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_63 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_63({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_63 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_64 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_64({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(232, 224, 207, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_64 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_65 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_65({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_65 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_66 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_66({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_66 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_67 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_67({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M22.5 10.5L21.4875 10.5L18.8831 4.64062C18.6423 4.09903 18.1052 3.75001 17.5125 3.75L6.4875 3.75C5.89479 3.75001 5.35766 4.09903 5.11688 4.64062L2.5125 10.5L1.5 10.5C1.08579 10.5 0.75 10.8358 0.75 11.25C0.75 11.6642 1.08579 12 1.5 12L2.25 12L2.25 19.5C2.25 20.3284 2.92157 21 3.75 21L6 21C6.82843 21 7.5 20.3284 7.5 19.5L7.5 18L16.5 18L16.5 19.5C16.5 20.3284 17.1716 21 18 21L20.25 21C21.0784 21 21.75 20.3284 21.75 19.5L21.75 12L22.5 12C22.9142 12 23.25 11.6642 23.25 11.25C23.25 10.8358 22.9142 10.5 22.5 10.5L22.5 10.5ZM6.4875 5.25L17.5125 5.25L19.8459 10.5L4.15406 10.5L6.4875 5.25ZM6 19.5L3.75 19.5L3.75 18L6 18L6 19.5ZM18 19.5L18 18L20.25 18L20.25 19.5L18 19.5ZM20.25 16.5L3.75 16.5L3.75 12L20.25 12L20.25 16.5ZM5.25 14.25C5.25 13.8358 5.58579 13.5 6 13.5L7.5 13.5C7.91421 13.5 8.25 13.8358 8.25 14.25C8.25 14.6642 7.91421 15 7.5 15L6 15C5.58579 15 5.25 14.6642 5.25 14.25L5.25 14.25ZM15.75 14.25C15.75 13.8358 16.0858 13.5 16.5 13.5L18 13.5C18.4142 13.5 18.75 13.8358 18.75 14.25C18.75 14.6642 18.4142 15 18 15L16.5 15C16.0858 15 15.75 14.6642 15.75 14.25L15.75 14.25Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_67 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_68 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_68({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_68 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_69 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_69({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_69 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_71 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_71({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(232, 224, 207, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_71 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_72 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_72({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_72 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_73 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_73({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_73 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_74 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_74({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M20.5153 9.72844L13.0153 2.65219C13.0116 2.64899 13.0082 2.64554 13.005 2.64188C12.4328 2.1215 11.5588 2.1215 10.9866 2.64188L10.9762 2.65219L3.48469 9.72844C3.17573 10.0125 2.99994 10.4131 3 10.8328L3 19.5C3 20.3284 3.67157 21 4.5 21L9 21C9.82843 21 10.5 20.3284 10.5 19.5L10.5 15L13.5 15L13.5 19.5C13.5 20.3284 14.1716 21 15 21L19.5 21C20.3284 21 21 20.3284 21 19.5L21 10.8328C21.0001 10.4131 20.8243 10.0125 20.5153 9.72844L20.5153 9.72844ZM19.5 19.5L15 19.5L15 15C15 14.1716 14.3284 13.5 13.5 13.5L10.5 13.5C9.67157 13.5 9 14.1716 9 15L9 19.5L4.5 19.5L4.5 10.8328L4.51031 10.8234L12 3.75L19.4906 10.8216L19.5009 10.8309L19.5 19.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_74 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_75 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_75({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_75 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_76 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_76({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_76 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_78 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_78({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_78 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_79 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_79({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(232, 224, 207, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_79 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_80 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_80({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_80 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_81 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_81({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_81 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_82 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_82({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21 6L16.5 6L16.5 5.25C16.5 4.00736 15.4926 3 14.25 3L9.75 3C8.50736 3 7.5 4.00736 7.5 5.25L7.5 6L3 6C2.17157 6 1.5 6.67157 1.5 7.5L1.5 18C1.5 18.8284 2.17157 19.5 3 19.5L21 19.5C21.8284 19.5 22.5 18.8284 22.5 18L22.5 7.5C22.5 6.67157 21.8284 6 21 6L21 6ZM9 5.25C9 4.83579 9.33579 4.5 9.75 4.5L14.25 4.5C14.6642 4.5 15 4.83579 15 5.25L15 6L9 6L9 5.25ZM21 7.5L21 10.5L18 10.5L18 9.75C18 9.33579 17.6642 9 17.25 9C16.8358 9 16.5 9.33579 16.5 9.75L16.5 10.5L7.5 10.5L7.5 9.75C7.5 9.33579 7.16421 9 6.75 9C6.33579 9 6 9.33579 6 9.75L6 10.5L3 10.5L3 7.5L21 7.5ZM21 18L3 18L3 12L6 12L6 12.75C6 13.1642 6.33579 13.5 6.75 13.5C7.16421 13.5 7.5 13.1642 7.5 12.75L7.5 12L16.5 12L16.5 12.75C16.5 13.1642 16.8358 13.5 17.25 13.5C17.6642 13.5 18 13.1642 18 12.75L18 12L21 12L21 18L21 18Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_82 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_83 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_83({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_83 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_84 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_84({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_84 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_86 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_86({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(232, 224, 207, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_86 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_87 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_87({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_87 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_88 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_88({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_88 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_89 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_89({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M6.75 5.625C6.75 6.24632 6.24632 6.75 5.625 6.75C5.00368 6.75 4.5 6.24632 4.5 5.625C4.5 5.00368 5.00368 4.5 5.625 4.5C6.24632 4.5 6.75 5.00368 6.75 5.625L6.75 5.625ZM12 4.5C11.3787 4.5 10.875 5.00368 10.875 5.625C10.875 6.24632 11.3787 6.75 12 6.75C12.6213 6.75 13.125 6.24632 13.125 5.625C13.125 5.00368 12.6213 4.5 12 4.5L12 4.5ZM18.375 6.75C18.9963 6.75 19.5 6.24632 19.5 5.625C19.5 5.00368 18.9963 4.5 18.375 4.5C17.7537 4.5 17.25 5.00368 17.25 5.625C17.25 6.24632 17.7537 6.75 18.375 6.75L18.375 6.75ZM5.625 10.875C5.00368 10.875 4.5 11.3787 4.5 12C4.5 12.6213 5.00368 13.125 5.625 13.125C6.24632 13.125 6.75 12.6213 6.75 12C6.75 11.3787 6.24632 10.875 5.625 10.875L5.625 10.875ZM12 10.875C11.3787 10.875 10.875 11.3787 10.875 12C10.875 12.6213 11.3787 13.125 12 13.125C12.6213 13.125 13.125 12.6213 13.125 12C13.125 11.3787 12.6213 10.875 12 10.875L12 10.875ZM18.375 10.875C17.7537 10.875 17.25 11.3787 17.25 12C17.25 12.6213 17.7537 13.125 18.375 13.125C18.9963 13.125 19.5 12.6213 19.5 12C19.5 11.3787 18.9963 10.875 18.375 10.875L18.375 10.875ZM5.625 17.25C5.00368 17.25 4.5 17.7537 4.5 18.375C4.5 18.9963 5.00368 19.5 5.625 19.5C6.24632 19.5 6.75 18.9963 6.75 18.375C6.75 17.7537 6.24632 17.25 5.625 17.25L5.625 17.25ZM12 17.25C11.3787 17.25 10.875 17.7537 10.875 18.375C10.875 18.9963 11.3787 19.5 12 19.5C12.6213 19.5 13.125 18.9963 13.125 18.375C13.125 17.7537 12.6213 17.25 12 17.25L12 17.25ZM18.375 17.25C17.7537 17.25 17.25 17.7537 17.25 18.375C17.25 18.9963 17.7537 19.5 18.375 19.5C18.9963 19.5 19.5 18.9963 19.5 18.375C19.5 17.7537 18.9963 17.25 18.375 17.25L18.375 17.25Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_89 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_90 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_90({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_90 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_91 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_91({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_91 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_93 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_93({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_93 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_95 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_95({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_95 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_96 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_96({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_96 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_97 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_97({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_97 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_98 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_98({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_98 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_100 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_100({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_100 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_102 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_102({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_102 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_104 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_104({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_104 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_105 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_105({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_105 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_107 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_107({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_107 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_108 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_108({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_108 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_109 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_109({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_109 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_110 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_110({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_110 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_112 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_112({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_112 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_114 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_114({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_114 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_116 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_116({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_116 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_117 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_117({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_117 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_118 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_118({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_118 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_119 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_119({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_119 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_120 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_120({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_120 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_122 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_122({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_122 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_124 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_124({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_124 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_126 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_126({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_126 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_127 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_127({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_127 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_128 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_128({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_128 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_129 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_129({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_129 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_130 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_130({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_130 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_131 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_131({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_131 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_132 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_132({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21 10.8328L21 19.5C21 20.3284 20.3284 21 19.5 21L15.75 21C14.9216 21 14.25 20.3284 14.25 19.5L14.25 15.75C14.25 15.3358 13.9142 15 13.5 15L10.5 15C10.0858 15 9.75 15.3358 9.75 15.75L9.75 19.5C9.75 20.3284 9.07843 21 8.25 21L4.5 21C3.67157 21 3 20.3284 3 19.5L3 10.8328C2.99994 10.4131 3.17573 10.0125 3.48469 9.72844L10.9847 2.65219L10.995 2.64188C11.5672 2.1215 12.4412 2.1215 13.0134 2.64188C13.0166 2.64554 13.0201 2.64899 13.0238 2.65219L20.5238 9.72844C20.8296 10.014 21.0022 10.4144 21 10.8328L21 10.8328Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_132 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_133 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_133({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_133 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_134 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_134({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_134 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_136 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_136({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_136 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_137 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_137({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_137 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_138 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_138({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_138 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_139 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_139({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M19.5 3L4.5 3C3.67157 3 3 3.67157 3 4.5L3 19.5C3 20.3284 3.67157 21 4.5 21L19.5 21C20.3284 21 21 20.3284 21 19.5L21 4.5C21 3.67157 20.3284 3 19.5 3L19.5 3ZM19.5 19.5L4.5 19.5L4.5 4.5L19.5 4.5L19.5 19.5L19.5 19.5ZM16.5 12C16.5 12.4142 16.1642 12.75 15.75 12.75L12.75 12.75L12.75 15.75C12.75 16.1642 12.4142 16.5 12 16.5C11.5858 16.5 11.25 16.1642 11.25 15.75L11.25 12.75L8.25 12.75C7.83579 12.75 7.5 12.4142 7.5 12C7.5 11.5858 7.83579 11.25 8.25 11.25L11.25 11.25L11.25 8.25C11.25 7.83579 11.5858 7.5 12 7.5C12.4142 7.5 12.75 7.83579 12.75 8.25L12.75 11.25L15.75 11.25C16.1642 11.25 16.5 11.5858 16.5 12L16.5 12Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_139 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_140 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_140({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_140 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_141 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_141({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_141 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_143 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_143({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_143 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_144 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_144({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_144 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_145 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_145({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_145 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_146 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_146({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M10.9922 14.805C13.0561 13.431 13.9769 10.8677 13.2592 8.49441C12.5414 6.12114 10.3544 4.49772 7.875 4.49772C5.39558 4.49772 3.20857 6.12114 2.49084 8.49441C1.7731 10.8677 2.69393 13.431 4.75781 14.805C2.93952 15.4752 1.38666 16.7153 0.330938 18.3403C0.179932 18.5647 0.161484 18.8531 0.28266 19.095C0.403836 19.3368 0.645857 19.4947 0.916031 19.5081C1.18621 19.5215 1.44266 19.3884 1.58719 19.1597C2.97076 17.0317 5.33677 15.7479 7.875 15.7479C10.4132 15.7479 12.7792 17.0317 14.1628 19.1597C14.3917 19.4999 14.8514 19.5932 15.1948 19.3692C15.5382 19.1452 15.6381 18.6869 15.4191 18.3403C14.3633 16.7153 12.8105 15.4752 10.9922 14.805L10.9922 14.805ZM3.75 10.125C3.75 7.84683 5.59683 6 7.875 6C10.1532 6 12 7.84683 12 10.125C12 12.4032 10.1532 14.25 7.875 14.25C5.5979 14.2474 3.75258 12.4021 3.75 10.125L3.75 10.125ZM23.4506 19.3781C23.1037 19.6043 22.6391 19.5066 22.4128 19.1597C21.0308 17.0303 18.6636 15.7466 16.125 15.75C15.7108 15.75 15.375 15.4142 15.375 15C15.375 14.5858 15.7108 14.25 16.125 14.25C17.7863 14.2484 19.2846 13.2504 19.9261 11.718C20.5677 10.1855 20.2273 8.4178 19.0626 7.23312C17.898 6.04844 16.1363 5.67805 14.5931 6.29344C14.3427 6.40171 14.0531 6.36541 13.8372 6.19864C13.6212 6.03188 13.5128 5.76096 13.5542 5.49125C13.5956 5.22154 13.7802 4.99558 14.0363 4.90125C16.7109 3.83457 19.7592 4.96001 21.099 7.50883C22.4388 10.0576 21.6374 13.2067 19.2422 14.805C21.0605 15.4752 22.6133 16.7153 23.6691 18.3403C23.8953 18.6872 23.7975 19.1518 23.4506 19.3781L23.4506 19.3781Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_146 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_147 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_147({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_147 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_148 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_148({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_148 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_150 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_150({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_150 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_151 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_151({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_151 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_152 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_152({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_152 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_153 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_153({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.6488 19.875C20.2209 17.4066 18.0206 15.6366 15.4528 14.7975C18.0635 13.2433 19.3141 10.1364 18.5082 7.2069C17.7022 4.27741 15.0383 2.24745 12 2.24745C8.96167 2.24745 6.29779 4.27741 5.49182 7.2069C4.68585 10.1364 5.93645 13.2433 8.54719 14.7975C5.97938 15.6356 3.77906 17.4056 2.35125 19.875C2.2087 20.1074 2.20353 20.3989 2.33773 20.6363C2.47194 20.8736 2.72438 21.0194 2.99702 21.0171C3.26967 21.0147 3.51958 20.8646 3.64969 20.625C5.41594 17.5725 8.53781 15.75 12 15.75C15.4622 15.75 18.5841 17.5725 20.3503 20.625C20.4804 20.8646 20.7303 21.0147 21.003 21.0171C21.2756 21.0194 21.5281 20.8736 21.6623 20.6363C21.7965 20.3989 21.7913 20.1074 21.6488 19.875L21.6488 19.875ZM6.75 9C6.75 6.1005 9.1005 3.75 12 3.75C14.8995 3.75 17.25 6.1005 17.25 9C17.25 11.8995 14.8995 14.25 12 14.25C9.10179 14.2469 6.7531 11.8982 6.75 9L6.75 9Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_153 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_154 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_154({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_154 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_155 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_155({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_155 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_157 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_157({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_157 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_158 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_158({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_158 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_159 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_159({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_159 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_160 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_160({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_160 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_161 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_161({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_161 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_162 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_162({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_162 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_164 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_164({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_164 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_165 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_165({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_165 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_166 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_166({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_166 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_167 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_167({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_167 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_168 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_168({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M3.75 8.25L6.84375 8.25C7.18363 9.57744 8.37974 10.5059 9.75 10.5059C11.1203 10.5059 12.3164 9.57744 12.6562 8.25L20.25 8.25C20.6642 8.25 21 7.91421 21 7.5C21 7.08579 20.6642 6.75 20.25 6.75L12.6562 6.75C12.3164 5.42256 11.1203 4.49412 9.75 4.49412C8.37974 4.49412 7.18363 5.42256 6.84375 6.75L3.75 6.75C3.33579 6.75 3 7.08579 3 7.5C3 7.91421 3.33579 8.25 3.75 8.25L3.75 8.25ZM9.75 6C10.5784 6 11.25 6.67157 11.25 7.5C11.25 8.32843 10.5784 9 9.75 9C8.92157 9 8.25 8.32843 8.25 7.5C8.25 6.67157 8.92157 6 9.75 6L9.75 6ZM20.25 15.75L18.6562 15.75C18.3164 14.4226 17.1203 13.4941 15.75 13.4941C14.3797 13.4941 13.1836 14.4226 12.8438 15.75L3.75 15.75C3.33579 15.75 3 16.0858 3 16.5C3 16.9142 3.33579 17.25 3.75 17.25L12.8438 17.25C13.1836 18.5774 14.3797 19.5059 15.75 19.5059C17.1203 19.5059 18.3164 18.5774 18.6562 17.25L20.25 17.25C20.6642 17.25 21 16.9142 21 16.5C21 16.0858 20.6642 15.75 20.25 15.75L20.25 15.75ZM15.75 18C14.9216 18 14.25 17.3284 14.25 16.5C14.25 15.6716 14.9216 15 15.75 15C16.5784 15 17.25 15.6716 17.25 16.5C17.25 17.3284 16.5784 18 15.75 18L15.75 18Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_168 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_169 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_169({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_169 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_170 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_170({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_170 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_171 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_171({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_171 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_172 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_172({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_172 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_173 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_173({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_173 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(8),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(8),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(8),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(8),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_174 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_174({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_174 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_175 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_175({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.5306 20.4694L16.8366 15.7762C19.6629 12.383 19.3204 7.36693 16.0591 4.38935C12.7978 1.41176 7.77134 1.526 4.64867 4.64867C1.526 7.77134 1.41176 12.7978 4.38935 16.0591C7.36693 19.3204 12.383 19.6629 15.7762 16.8366L20.4694 21.5306C20.7624 21.8237 21.2376 21.8237 21.5306 21.5306C21.8237 21.2376 21.8237 20.7624 21.5306 20.4694L21.5306 20.4694ZM3.75 10.5C3.75 6.77208 6.77208 3.75 10.5 3.75C14.2279 3.75 17.25 6.77208 17.25 10.5C17.25 14.2279 14.2279 17.25 10.5 17.25C6.77379 17.2459 3.75413 14.2262 3.75 10.5L3.75 10.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_175 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_176 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_176({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_176 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_177 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_177({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_177 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(8),
                                bottomLeft: Radius.circular(8),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(8),
                                bottomLeft: Radius.circular(8),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_179 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_179({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_179 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_181 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_181({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_181 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_182 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_182({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_182 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_183 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_183({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_183 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_184 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_184({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_184 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_185 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_185({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M17.5 10C17.5 10.3452 17.2202 10.625 16.875 10.625L3.125 10.625C2.77982 10.625 2.5 10.3452 2.5 10C2.5 9.65482 2.77982 9.375 3.125 9.375L16.875 9.375C17.2202 9.375 17.5 9.65482 17.5 10L17.5 10ZM3.125 5.625L16.875 5.625C17.2202 5.625 17.5 5.34518 17.5 5C17.5 4.65482 17.2202 4.375 16.875 4.375L3.125 4.375C2.77982 4.375 2.5 4.65482 2.5 5C2.5 5.34518 2.77982 5.625 3.125 5.625L3.125 5.625ZM16.875 14.375L3.125 14.375C2.77982 14.375 2.5 14.6548 2.5 15C2.5 15.3452 2.77982 15.625 3.125 15.625L16.875 15.625C17.2202 15.625 17.5 15.3452 17.5 15C17.5 14.6548 17.2202 14.375 16.875 14.375L16.875 14.375Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_185 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_186 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_186({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_186 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_187 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_187({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_187 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_189 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_189({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_189 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_190 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_190({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_190 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_191 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_191({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_191 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_192 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_192({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M17.0961 8.10703L10.8461 2.21016C10.843 2.20749 10.8402 2.20462 10.8375 2.20156C10.3607 1.76792 9.6323 1.76792 9.15547 2.20156L9.14688 2.21016L2.90391 8.10703C2.64644 8.34378 2.49995 8.67757 2.5 9.02734L2.5 16.25C2.5 16.9404 3.05964 17.5 3.75 17.5L7.5 17.5C8.19036 17.5 8.75 16.9404 8.75 16.25L8.75 12.5L11.25 12.5L11.25 16.25C11.25 16.9404 11.8096 17.5 12.5 17.5L16.25 17.5C16.9404 17.5 17.5 16.9404 17.5 16.25L17.5 9.02734C17.5001 8.67757 17.3536 8.34378 17.0961 8.10703L17.0961 8.10703ZM16.25 16.25L12.5 16.25L12.5 12.5C12.5 11.8096 11.9404 11.25 11.25 11.25L8.75 11.25C8.05964 11.25 7.5 11.8096 7.5 12.5L7.5 16.25L3.75 16.25L3.75 9.02734L3.75859 9.01953L10 3.125L16.2422 9.01797L16.2508 9.02578L16.25 16.25Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_192 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_193 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_193({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_193 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_194 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_194({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_194 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_196 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_196({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_196 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_197 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_197({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_197 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_198 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_198({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_198 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_199 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_199({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M18.0406 16.5625C16.8508 14.5055 15.0172 13.0305 12.8773 12.3313C15.053 11.0361 16.0951 8.44698 15.4235 6.00575C14.7518 3.56451 12.5319 1.87287 10 1.87287C7.46806 1.87287 5.24816 3.56451 4.57652 6.00575C3.90487 8.44698 4.94704 11.0361 7.12266 12.3313C4.98281 13.0297 3.14922 14.5047 1.95938 16.5625C1.84059 16.7562 1.83627 16.9991 1.94811 17.1969C2.05995 17.3947 2.27031 17.5162 2.49752 17.5142C2.72473 17.5123 2.93298 17.3872 3.04141 17.1875C4.51328 14.6438 7.11484 13.125 10 13.125C12.8852 13.125 15.4867 14.6438 16.9586 17.1875C17.067 17.3872 17.2753 17.5123 17.5025 17.5142C17.7297 17.5162 17.9401 17.3947 18.0519 17.1969C18.1637 16.9991 18.1594 16.7562 18.0406 16.5625L18.0406 16.5625ZM5.625 7.5C5.625 5.08375 7.58375 3.125 10 3.125C12.4162 3.125 14.375 5.08375 14.375 7.5C14.375 9.91625 12.4162 11.875 10 11.875C7.58483 11.8724 5.62758 9.91517 5.625 7.5L5.625 7.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_199 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_200 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_200({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_200 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_201 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_201({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_201 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_203 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_203({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_203 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_204 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_204({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_204 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_205 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_205({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_205 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_206 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_206({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M19.6688 6.94844L10.2937 1.94844C10.1101 1.85066 9.88988 1.85066 9.70625 1.94844L0.33125 6.94844C0.12749 7.05703 0.000195248 7.26911 0.000195248 7.5C0.000195248 7.73089 0.12749 7.94297 0.33125 8.05156L2.5 9.20859L2.5 12.9914C2.49935 13.2984 2.61234 13.5948 2.81719 13.8234C3.84063 14.9633 6.13359 16.875 10 16.875C11.282 16.8856 12.5544 16.6534 13.75 16.1906L13.75 18.75C13.75 19.0952 14.0298 19.375 14.375 19.375C14.7202 19.375 15 19.0952 15 18.75L15 15.5867C15.815 15.1162 16.5515 14.5213 17.1828 13.8234C17.3877 13.5948 17.5007 13.2984 17.5 12.9914L17.5 9.20859L19.6688 8.05156C19.8725 7.94297 19.9998 7.73089 19.9998 7.5C19.9998 7.26911 19.8725 7.05703 19.6688 6.94844L19.6688 6.94844ZM10 15.625C6.61953 15.625 4.63125 13.9734 3.75 12.9914L3.75 9.875L9.70625 13.0516C9.88988 13.1493 10.1101 13.1493 10.2937 13.0516L13.75 11.2086L13.75 14.8289C12.7656 15.2883 11.525 15.625 10 15.625L10 15.625ZM16.25 12.9883C15.8753 13.404 15.4562 13.7774 15 14.1016L15 10.5414L16.25 9.875L16.25 12.9883ZM14.6875 9.29219L14.6703 9.28203L10.2953 6.94844C9.99163 6.79333 9.61967 6.91026 9.45937 7.21124C9.29908 7.51222 9.40963 7.88613 9.70781 8.05156L13.3594 10L10 11.7914L1.95312 7.5L10 3.20859L18.0469 7.5L14.6875 9.29219Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_206 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_207 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_207({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_207 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_208 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_208({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_208 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_210 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_210({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_210 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_211 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_211({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_211 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_212 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_212({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_212 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_213 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_213({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M16.25 2.5L14.375 2.5L14.375 1.875C14.375 1.52982 14.0952 1.25 13.75 1.25C13.4048 1.25 13.125 1.52982 13.125 1.875L13.125 2.5L6.875 2.5L6.875 1.875C6.875 1.52982 6.59518 1.25 6.25 1.25C5.90482 1.25 5.625 1.52982 5.625 1.875L5.625 2.5L3.75 2.5C3.05964 2.5 2.5 3.05964 2.5 3.75L2.5 16.25C2.5 16.9404 3.05964 17.5 3.75 17.5L16.25 17.5C16.9404 17.5 17.5 16.9404 17.5 16.25L17.5 3.75C17.5 3.05964 16.9404 2.5 16.25 2.5L16.25 2.5ZM5.625 3.75L5.625 4.375C5.625 4.72018 5.90482 5 6.25 5C6.59518 5 6.875 4.72018 6.875 4.375L6.875 3.75L13.125 3.75L13.125 4.375C13.125 4.72018 13.4048 5 13.75 5C14.0952 5 14.375 4.72018 14.375 4.375L14.375 3.75L16.25 3.75L16.25 6.25L3.75 6.25L3.75 3.75L5.625 3.75ZM16.25 16.25L3.75 16.25L3.75 7.5L16.25 7.5L16.25 16.25L16.25 16.25ZM8.75 9.375L8.75 14.375C8.75 14.7202 8.47018 15 8.125 15C7.77982 15 7.5 14.7202 7.5 14.375L7.5 10.3859L7.15469 10.5594C6.84575 10.7138 6.47009 10.5886 6.31563 10.2797C6.16116 9.97075 6.28638 9.59509 6.59531 9.44063L7.84531 8.81563C8.03913 8.71864 8.26935 8.72898 8.45369 8.84296C8.63802 8.95694 8.75016 9.15827 8.75 9.375L8.75 9.375ZM13.3719 11.7539L11.875 13.75L13.125 13.75C13.4702 13.75 13.75 14.0298 13.75 14.375C13.75 14.7202 13.4702 15 13.125 15L10.625 15C10.3883 15 10.1719 14.8662 10.066 14.6545C9.96011 14.4428 9.98296 14.1894 10.125 14L12.3734 11.0023C12.5128 10.8168 12.5379 10.5694 12.4387 10.3597C12.3394 10.1499 12.1322 10.0124 11.9004 10.0025C11.6686 9.99265 11.4503 10.112 11.3336 10.3125C11.2252 10.5122 11.0169 10.6373 10.7897 10.6392C10.5625 10.6412 10.3521 10.5197 10.2403 10.3219C10.1285 10.1241 10.1328 9.88119 10.2516 9.6875C10.676 8.95294 11.5409 8.59492 12.3603 8.81452C13.1798 9.03412 13.7497 9.77661 13.75 10.625C13.7513 11.0326 13.6184 11.4293 13.3719 11.7539L13.3719 11.7539Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_213 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_214 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_214({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_214 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_215 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_215({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_215 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_217 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_217({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_217 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_219 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_219({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_219 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_220 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_220({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_220 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_221 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_221({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_221 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_222 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_222({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_222 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_223 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_223({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_223 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_225 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_225({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_225 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_227 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_227({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_227 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_229 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_229({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_229 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_230 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_230({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_230 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_232 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_232({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_232 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_233 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_233({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_233 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_234 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_234({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_234 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_235 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_235({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_235 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_236 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_236({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_236 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_237 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_237({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_237 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_239 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_239({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_239 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_241 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_241({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_241 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_243 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_243({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_243 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_244 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_244({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_244 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_246 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_246({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_246 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_247 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_247({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_247 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_248 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_248({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_248 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_249 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_249({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_249 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_250 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_250({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_250 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_251 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_251({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_251 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_253 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_253({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_253 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_255 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_255({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_255 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_257 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_257({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_257 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_258 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_258({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_258 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_260 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_260({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_260 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_261 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_261({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_261 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_262 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_262({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_262 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_263 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_263({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_263 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_264 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_264({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_264 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_265 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_265({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_265 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_266 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_266({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M20.5153 9.72844L13.0153 2.65219C13.0116 2.64899 13.0082 2.64554 13.005 2.64188C12.4328 2.1215 11.5588 2.1215 10.9866 2.64188L10.9762 2.65219L3.48469 9.72844C3.17573 10.0125 2.99994 10.4131 3 10.8328L3 19.5C3 20.3284 3.67157 21 4.5 21L9 21C9.82843 21 10.5 20.3284 10.5 19.5L10.5 15L13.5 15L13.5 19.5C13.5 20.3284 14.1716 21 15 21L19.5 21C20.3284 21 21 20.3284 21 19.5L21 10.8328C21.0001 10.4131 20.8243 10.0125 20.5153 9.72844L20.5153 9.72844ZM19.5 19.5L15 19.5L15 15C15 14.1716 14.3284 13.5 13.5 13.5L10.5 13.5C9.67157 13.5 9 14.1716 9 15L9 19.5L4.5 19.5L4.5 10.8328L4.51031 10.8234L12 3.75L19.4906 10.8216L19.5009 10.8309L19.5 19.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_266 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_267 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_267({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_267 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_268 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_268({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_268 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_270 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_270({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_270 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_271 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_271({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_271 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_272 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_272({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_272 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_273 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_273({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15.75 10.5C15.75 13.3995 13.3995 15.75 10.5 15.75C7.6005 15.75 5.25 13.3995 5.25 10.5C5.25 7.6005 7.6005 5.25 10.5 5.25C13.3995 5.25 15.75 7.6005 15.75 10.5L15.75 10.5ZM21.5306 21.5306C21.3899 21.6715 21.1991 21.7506 21 21.7506C20.8009 21.7506 20.6101 21.6715 20.4694 21.5306L15.7762 16.8366C12.3858 19.6572 7.37647 19.3124 4.40446 16.0538C1.43245 12.7952 1.54894 7.77538 4.66892 4.65816C7.7889 1.54094 12.8088 1.42888 16.0648 4.40377C19.3208 7.37866 19.6611 12.3883 16.8375 15.7762L21.5306 20.4694C21.6715 20.6101 21.7506 20.8009 21.7506 21C21.7506 21.1991 21.6715 21.3899 21.5306 21.5306L21.5306 21.5306ZM10.5 17.25C14.2279 17.25 17.25 14.2279 17.25 10.5C17.25 6.77208 14.2279 3.75 10.5 3.75C6.77208 3.75 3.75 6.77208 3.75 10.5C3.75413 14.2262 6.77379 17.2459 10.5 17.25L10.5 17.25Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_273 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_274 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_274({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_274 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_275 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_275({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_275 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_277 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_277({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_277 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_278 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_278({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_278 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_279 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_279({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_279 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_280 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_280({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M10.9922 14.805C13.0561 13.431 13.9769 10.8677 13.2592 8.49441C12.5414 6.12114 10.3544 4.49772 7.875 4.49772C5.39558 4.49772 3.20857 6.12114 2.49084 8.49441C1.7731 10.8677 2.69393 13.431 4.75781 14.805C2.93952 15.4752 1.38666 16.7153 0.330938 18.3403C0.179932 18.5647 0.161484 18.8531 0.28266 19.095C0.403836 19.3368 0.645857 19.4947 0.916031 19.5081C1.18621 19.5215 1.44266 19.3884 1.58719 19.1597C2.97076 17.0317 5.33677 15.7479 7.875 15.7479C10.4132 15.7479 12.7792 17.0317 14.1628 19.1597C14.3917 19.4999 14.8514 19.5932 15.1948 19.3692C15.5382 19.1452 15.6381 18.6869 15.4191 18.3403C14.3633 16.7153 12.8105 15.4752 10.9922 14.805L10.9922 14.805ZM3.75 10.125C3.75 7.84683 5.59683 6 7.875 6C10.1532 6 12 7.84683 12 10.125C12 12.4032 10.1532 14.25 7.875 14.25C5.5979 14.2474 3.75258 12.4021 3.75 10.125L3.75 10.125ZM23.4506 19.3781C23.1037 19.6043 22.6391 19.5066 22.4128 19.1597C21.0308 17.0303 18.6636 15.7466 16.125 15.75C15.7108 15.75 15.375 15.4142 15.375 15C15.375 14.5858 15.7108 14.25 16.125 14.25C17.7863 14.2484 19.2846 13.2504 19.9261 11.718C20.5677 10.1855 20.2273 8.4178 19.0626 7.23312C17.898 6.04844 16.1363 5.67805 14.5931 6.29344C14.3427 6.40171 14.0531 6.36541 13.8372 6.19864C13.6212 6.03188 13.5128 5.76096 13.5542 5.49125C13.5956 5.22154 13.7802 4.99558 14.0363 4.90125C16.7109 3.83457 19.7592 4.96001 21.099 7.50883C22.4388 10.0576 21.6374 13.2067 19.2422 14.805C21.0605 15.4752 22.6133 16.7153 23.6691 18.3403C23.8953 18.6872 23.7975 19.1518 23.4506 19.3781L23.4506 19.3781Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_280 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_281 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_281({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_281 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_282 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_282({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_282 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_284 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_284({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_284 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_285 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_285({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_285 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_286 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_286({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_286 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_287 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_287({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.6488 19.875C20.2209 17.4066 18.0206 15.6366 15.4528 14.7975C18.0635 13.2433 19.3141 10.1364 18.5082 7.2069C17.7022 4.27741 15.0383 2.24745 12 2.24745C8.96167 2.24745 6.29779 4.27741 5.49182 7.2069C4.68585 10.1364 5.93645 13.2433 8.54719 14.7975C5.97938 15.6356 3.77906 17.4056 2.35125 19.875C2.2087 20.1074 2.20353 20.3989 2.33773 20.6363C2.47194 20.8736 2.72438 21.0194 2.99702 21.0171C3.26967 21.0147 3.51958 20.8646 3.64969 20.625C5.41594 17.5725 8.53781 15.75 12 15.75C15.4622 15.75 18.5841 17.5725 20.3503 20.625C20.4804 20.8646 20.7303 21.0147 21.003 21.0171C21.2756 21.0194 21.5281 20.8736 21.6623 20.6363C21.7965 20.3989 21.7913 20.1074 21.6488 19.875L21.6488 19.875ZM6.75 9C6.75 6.1005 9.1005 3.75 12 3.75C14.8995 3.75 17.25 6.1005 17.25 9C17.25 11.8995 14.8995 14.25 12 14.25C9.10179 14.2469 6.7531 11.8982 6.75 9L6.75 9Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_287 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_288 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_288({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_288 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_289 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_289({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_289 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_291 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_291({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_291 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_292 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_292({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_292 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_293 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_293({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_293 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_294 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_294({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_294 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_295 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_295({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_295 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_296 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_296({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_296 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_297 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_297({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_297 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_298 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_298({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21 12C21 12.4142 20.6642 12.75 20.25 12.75L5.56031 12.75L11.0306 18.2194C11.3237 18.5124 11.3237 18.9876 11.0306 19.2806C10.7376 19.5737 10.2624 19.5737 9.96937 19.2806L3.21937 12.5306C3.07854 12.3899 2.99941 12.1991 2.99941 12C2.99941 11.8009 3.07854 11.6101 3.21937 11.4694L9.96937 4.71938C10.2624 4.42632 10.7376 4.42632 11.0306 4.71938C11.3237 5.01243 11.3237 5.48757 11.0306 5.78062L5.56031 11.25L20.25 11.25C20.6642 11.25 21 11.5858 21 12L21 12Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_298 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_299 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_299({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_299 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_300 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_300({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_300 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_302 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_302({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_302 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_303 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_303({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_303 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_304 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_304({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_304 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_306 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_306({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_306 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_307 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_307({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_307 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_309 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_309({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_309 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_310 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_310({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_310 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_312 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_312({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_312 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_313 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_313({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_313 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_314 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_314({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_314 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_315 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_315({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_315 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_316 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_316({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_316 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_318 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_318({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_318 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_319 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_319({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_319 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_321 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_321({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_321 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_322 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_322({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_322 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_323 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_323({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_323 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_324 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_324({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_324 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_325 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_325({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_325 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_327 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_327({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_327 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_328 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_328({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_328 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_330 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_330({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_330 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_331 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_331({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_331 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_332 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_332({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_332 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_333 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_333({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_333 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_334 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_334({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_334 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_336 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_336({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_336 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_337 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_337({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_337 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_339 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_339({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_339 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_340 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_340({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_340 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_341 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_341({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_341 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_342 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_342({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_342 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_343 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_343({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_343 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_344 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_344({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M20.5153 9.72844L13.0153 2.65219C13.0116 2.64899 13.0082 2.64554 13.005 2.64188C12.4328 2.1215 11.5588 2.1215 10.9866 2.64188L10.9762 2.65219L3.48469 9.72844C3.17573 10.0125 2.99994 10.4131 3 10.8328L3 19.5C3 20.3284 3.67157 21 4.5 21L9 21C9.82843 21 10.5 20.3284 10.5 19.5L10.5 15L13.5 15L13.5 19.5C13.5 20.3284 14.1716 21 15 21L19.5 21C20.3284 21 21 20.3284 21 19.5L21 10.8328C21.0001 10.4131 20.8243 10.0125 20.5153 9.72844L20.5153 9.72844ZM19.5 19.5L15 19.5L15 15C15 14.1716 14.3284 13.5 13.5 13.5L10.5 13.5C9.67157 13.5 9 14.1716 9 15L9 19.5L4.5 19.5L4.5 10.8328L4.51031 10.8234L12 3.75L19.4906 10.8216L19.5009 10.8309L19.5 19.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_344 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_345 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_345({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_345 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_346 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_346({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_346 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_348 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_348({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_348 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_349 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_349({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_349 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_350 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_350({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_350 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_351 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_351({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M18.75 3.75L5.25 3.75C4.42157 3.75 3.75 4.42157 3.75 5.25L3.75 18.75C3.75 19.5784 4.42157 20.25 5.25 20.25L18.75 20.25C19.5784 20.25 20.25 19.5784 20.25 18.75L20.25 5.25C20.25 4.42157 19.5784 3.75 18.75 3.75L18.75 3.75ZM18.75 11.25L12.75 11.25L12.75 5.25L18.75 5.25L18.75 11.25ZM11.25 5.25L11.25 11.25L5.25 11.25L5.25 5.25L11.25 5.25ZM5.25 12.75L11.25 12.75L11.25 18.75L5.25 18.75L5.25 12.75ZM18.75 18.75L12.75 18.75L12.75 12.75L18.75 12.75L18.75 18.75L18.75 18.75Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_351 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_352 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_352({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_352 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_353 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_353 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_355 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_355({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_355 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_356 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_356({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_356 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_357 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_357({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_357 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_358 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_358({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M10.9922 14.805C13.0561 13.431 13.9769 10.8677 13.2592 8.49441C12.5414 6.12114 10.3544 4.49772 7.875 4.49772C5.39558 4.49772 3.20857 6.12114 2.49084 8.49441C1.7731 10.8677 2.69393 13.431 4.75781 14.805C2.93952 15.4752 1.38666 16.7153 0.330938 18.3403C0.179932 18.5647 0.161484 18.8531 0.28266 19.095C0.403836 19.3368 0.645857 19.4947 0.916031 19.5081C1.18621 19.5215 1.44266 19.3884 1.58719 19.1597C2.97076 17.0317 5.33677 15.7479 7.875 15.7479C10.4132 15.7479 12.7792 17.0317 14.1628 19.1597C14.3917 19.4999 14.8514 19.5932 15.1948 19.3692C15.5382 19.1452 15.6381 18.6869 15.4191 18.3403C14.3633 16.7153 12.8105 15.4752 10.9922 14.805L10.9922 14.805ZM3.75 10.125C3.75 7.84683 5.59683 6 7.875 6C10.1532 6 12 7.84683 12 10.125C12 12.4032 10.1532 14.25 7.875 14.25C5.5979 14.2474 3.75258 12.4021 3.75 10.125L3.75 10.125ZM23.4506 19.3781C23.1037 19.6043 22.6391 19.5066 22.4128 19.1597C21.0308 17.0303 18.6636 15.7466 16.125 15.75C15.7108 15.75 15.375 15.4142 15.375 15C15.375 14.5858 15.7108 14.25 16.125 14.25C17.7863 14.2484 19.2846 13.2504 19.9261 11.718C20.5677 10.1855 20.2273 8.4178 19.0626 7.23312C17.898 6.04844 16.1363 5.67805 14.5931 6.29344C14.3427 6.40171 14.0531 6.36541 13.8372 6.19864C13.6212 6.03188 13.5128 5.76096 13.5542 5.49125C13.5956 5.22154 13.7802 4.99558 14.0363 4.90125C16.7109 3.83457 19.7592 4.96001 21.099 7.50883C22.4388 10.0576 21.6374 13.2067 19.2422 14.805C21.0605 15.4752 22.6133 16.7153 23.6691 18.3403C23.8953 18.6872 23.7975 19.1518 23.4506 19.3781L23.4506 19.3781Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_358 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_359 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_359({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_359 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_360 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_360({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_360 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_362 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_362({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_362 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_363 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_363({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_363 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_364 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_364({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_364 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_365 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_365({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.6488 19.875C20.2209 17.4066 18.0206 15.6366 15.4528 14.7975C18.0635 13.2433 19.3141 10.1364 18.5082 7.2069C17.7022 4.27741 15.0383 2.24745 12 2.24745C8.96167 2.24745 6.29779 4.27741 5.49182 7.2069C4.68585 10.1364 5.93645 13.2433 8.54719 14.7975C5.97938 15.6356 3.77906 17.4056 2.35125 19.875C2.2087 20.1074 2.20353 20.3989 2.33773 20.6363C2.47194 20.8736 2.72438 21.0194 2.99702 21.0171C3.26967 21.0147 3.51958 20.8646 3.64969 20.625C5.41594 17.5725 8.53781 15.75 12 15.75C15.4622 15.75 18.5841 17.5725 20.3503 20.625C20.4804 20.8646 20.7303 21.0147 21.003 21.0171C21.2756 21.0194 21.5281 20.8736 21.6623 20.6363C21.7965 20.3989 21.7913 20.1074 21.6488 19.875L21.6488 19.875ZM6.75 9C6.75 6.1005 9.1005 3.75 12 3.75C14.8995 3.75 17.25 6.1005 17.25 9C17.25 11.8995 14.8995 14.25 12 14.25C9.10179 14.2469 6.7531 11.8982 6.75 9L6.75 9Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_365 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_366 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_366({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_366 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_367 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_367({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_367 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_369 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_369({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_369 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_370 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_370({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_370 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_371 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_371({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_371 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_372 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_372({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_372 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_373 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_373({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_373 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_374 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_374({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_374 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_375 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_375({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_375 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_376 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_376({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21 12C21 12.4142 20.6642 12.75 20.25 12.75L5.56031 12.75L11.0306 18.2194C11.3237 18.5124 11.3237 18.9876 11.0306 19.2806C10.7376 19.5737 10.2624 19.5737 9.96937 19.2806L3.21937 12.5306C3.07854 12.3899 2.99941 12.1991 2.99941 12C2.99941 11.8009 3.07854 11.6101 3.21937 11.4694L9.96937 4.71938C10.2624 4.42632 10.7376 4.42632 11.0306 4.71938C11.3237 5.01243 11.3237 5.48757 11.0306 5.78062L5.56031 11.25L20.25 11.25C20.6642 11.25 21 11.5858 21 12L21 12Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_376 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_377 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_377({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_377 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_378 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_378({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_378 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_380 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_380({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_380 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_381 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_381({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_381 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_382 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_382({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_382 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_383 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_383({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_383 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(64),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(64),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_384 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_384({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_384 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_385 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_385({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_385 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_387 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_387({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_387 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_389 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_389({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_389 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_391 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_391({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_391 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_392 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_392({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_392 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_393 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_393({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_393 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_394 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_394({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.6488 19.875C20.2209 17.4066 18.0206 15.6366 15.4528 14.7975C18.0635 13.2433 19.3141 10.1364 18.5082 7.2069C17.7022 4.27741 15.0383 2.24745 12 2.24745C8.96167 2.24745 6.29779 4.27741 5.49182 7.2069C4.68585 10.1364 5.93645 13.2433 8.54719 14.7975C5.97938 15.6356 3.77906 17.4056 2.35125 19.875C2.2087 20.1074 2.20353 20.3989 2.33773 20.6363C2.47194 20.8736 2.72438 21.0194 2.99702 21.0171C3.26967 21.0147 3.51958 20.8646 3.64969 20.625C5.41594 17.5725 8.53781 15.75 12 15.75C15.4622 15.75 18.5841 17.5725 20.3503 20.625C20.4804 20.8646 20.7303 21.0147 21.003 21.0171C21.2756 21.0194 21.5281 20.8736 21.6623 20.6363C21.7965 20.3989 21.7913 20.1074 21.6488 19.875L21.6488 19.875ZM6.75 9C6.75 6.1005 9.1005 3.75 12 3.75C14.8995 3.75 17.25 6.1005 17.25 9C17.25 11.8995 14.8995 14.25 12 14.25C9.10179 14.2469 6.7531 11.8982 6.75 9L6.75 9Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_394 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_395 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_395({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_395 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_396 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_396({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_396 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_398 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_398({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_398 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_399 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_399({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_399 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_400 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_400({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_400 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_401 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_401({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M12.75 7.5L12.75 11.5753L16.1362 13.6069C16.4914 13.8202 16.6064 14.2811 16.3931 14.6362C16.1798 14.9914 15.7189 15.1064 15.3638 14.8931L11.6138 12.6431C11.388 12.5075 11.2499 12.2634 11.25 12L11.25 7.5C11.25 7.08579 11.5858 6.75 12 6.75C12.4142 6.75 12.75 7.08579 12.75 7.5L12.75 7.5ZM12 3C9.61024 2.99405 7.3174 3.94433 5.6325 5.63906C4.95094 6.32906 4.34531 6.99281 3.75 7.6875L3.75 6C3.75 5.58579 3.41421 5.25 3 5.25C2.58579 5.25 2.25 5.58579 2.25 6L2.25 9.75C2.25 10.1642 2.58579 10.5 3 10.5L6.75 10.5C7.16421 10.5 7.5 10.1642 7.5 9.75C7.5 9.33579 7.16421 9 6.75 9L4.59375 9C5.26406 8.21062 5.93156 7.46719 6.69281 6.69656C9.6018 3.78759 14.3111 3.76489 17.248 6.64568C20.1849 9.52648 20.253 14.2354 17.4007 17.1999C14.5484 20.1644 9.84035 20.278 6.84844 17.4544C6.6535 17.2702 6.3751 17.2039 6.1181 17.2806C5.8611 17.3574 5.66454 17.5653 5.60247 17.8263C5.54041 18.0872 5.62225 18.3614 5.81719 18.5456C8.75577 21.3187 13.1822 21.7935 16.6422 19.7069C20.1021 17.6202 21.7473 13.4835 20.6656 9.59055C19.5839 5.69759 16.0404 3.00263 12 3L12 3Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_401 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_402 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_402({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_402 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_403 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_403({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_403 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_405 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_405({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_405 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_406 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_406({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_406 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_407 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_407({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_407 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_408 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_408({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M17.25 3L6.75 3C5.92157 3 5.25 3.67157 5.25 4.5L5.25 21C5.25014 21.2726 5.39815 21.5236 5.63659 21.6557C5.87503 21.7878 6.16636 21.7801 6.3975 21.6356L12 18.1341L17.6034 21.6356C17.8345 21.7796 18.1255 21.787 18.3636 21.655C18.6018 21.523 18.7497 21.2723 18.75 21L18.75 4.5C18.75 3.67157 18.0784 3 17.25 3L17.25 3ZM17.25 4.5L17.25 15.1472L12.3966 12.1144C12.1534 11.9624 11.8448 11.9624 11.6016 12.1144L6.75 15.1462L6.75 4.5L17.25 4.5ZM12.3966 16.6144C12.1534 16.4624 11.8448 16.4624 11.6016 16.6144L6.75 19.6472L6.75 16.9153L12 13.6341L17.25 16.9153L17.25 19.6472L12.3966 16.6144Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_408 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_409 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_409({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_409 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_410 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_410({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_410 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_412 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_412({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_412 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_413 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_413({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_413 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_414 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_414({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_414 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_415 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_415({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M20.25 5.25L16.5 5.25L16.5 4.5C16.5 3.25736 15.4926 2.25 14.25 2.25L9.75 2.25C8.50736 2.25 7.5 3.25736 7.5 4.5L7.5 5.25L3.75 5.25C2.92157 5.25 2.25 5.92157 2.25 6.75L2.25 18.75C2.25 19.5784 2.92157 20.25 3.75 20.25L20.25 20.25C21.0784 20.25 21.75 19.5784 21.75 18.75L21.75 6.75C21.75 5.92157 21.0784 5.25 20.25 5.25L20.25 5.25ZM9 4.5C9 4.08579 9.33579 3.75 9.75 3.75L14.25 3.75C14.6642 3.75 15 4.08579 15 4.5L15 5.25L9 5.25L9 4.5ZM20.25 6.75L20.25 10.6509C17.7185 12.0289 14.8822 12.7505 12 12.75C9.11794 12.7505 6.28165 12.0292 3.75 10.6519L3.75 6.75L20.25 6.75ZM20.25 18.75L3.75 18.75L3.75 12.3413C6.31868 13.5977 9.1405 14.2506 12 14.25C14.8596 14.2501 17.6813 13.5969 20.25 12.3403L20.25 18.75L20.25 18.75ZM9.75 10.5C9.75 10.0858 10.0858 9.75 10.5 9.75L13.5 9.75C13.9142 9.75 14.25 10.0858 14.25 10.5C14.25 10.9142 13.9142 11.25 13.5 11.25L10.5 11.25C10.0858 11.25 9.75 10.9142 9.75 10.5L9.75 10.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_415 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_416 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_416({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_416 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_417 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_417({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_417 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_419 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_419({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_419 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_421 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_421({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_421 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_422 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_422({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_422 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_423 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_423({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_423 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_424 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_424({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 23, 13, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M12 2.25C6.61522 2.25 2.25 6.61522 2.25 12C2.25 17.3848 6.61522 21.75 12 21.75C17.3848 21.75 21.75 17.3848 21.75 12C21.7443 6.61758 17.3824 2.25568 12 2.25L12 2.25ZM9.52781 15.75L14.4722 15.75C13.9688 17.4694 13.125 19.0191 12 20.2397C10.875 19.0191 10.0312 17.4694 9.52781 15.75L9.52781 15.75ZM9.1875 14.25C8.93875 12.7603 8.93875 11.2397 9.1875 9.75L14.8125 9.75C15.0612 11.2397 15.0612 12.7603 14.8125 14.25L9.1875 14.25ZM3.75 12C3.74935 11.2392 3.85441 10.4819 4.06219 9.75L7.66781 9.75C7.44406 11.2417 7.44406 12.7583 7.66781 14.25L4.06219 14.25C3.85441 13.5181 3.74935 12.7608 3.75 12L3.75 12ZM14.4722 8.25L9.52781 8.25C10.0312 6.53062 10.875 4.98094 12 3.76031C13.125 4.98094 13.9688 6.53062 14.4722 8.25L14.4722 8.25ZM16.3322 9.75L19.9378 9.75C20.3541 11.2211 20.3541 12.7789 19.9378 14.25L16.3322 14.25C16.5559 12.7583 16.5559 11.2417 16.3322 9.75L16.3322 9.75ZM19.3472 8.25L16.0256 8.25C15.6429 6.74392 15.0001 5.31623 14.1263 4.03125C16.3838 4.63793 18.28 6.17014 19.3472 8.25L19.3472 8.25ZM9.87375 4.03125C8.9999 5.31623 8.35712 6.74392 7.97437 8.25L4.65281 8.25C5.71999 6.17014 7.61618 4.63793 9.87375 4.03125L9.87375 4.03125ZM4.65281 15.75L7.97437 15.75C8.35712 17.2561 8.9999 18.6838 9.87375 19.9688C7.61618 19.3621 5.71999 17.8299 4.65281 15.75L4.65281 15.75ZM14.1263 19.9688C15.0001 18.6838 15.6429 17.2561 16.0256 15.75L19.3472 15.75C18.28 17.8299 16.3838 19.3621 14.1263 19.9688L14.1263 19.9688Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_424 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_425 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_425({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_425 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_426 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_426({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_426 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_428 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_428({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_428 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_429 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_429({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(242, 240, 232, 1)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_8_429 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_430 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_430({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_430 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = const RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(27),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_431 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_431({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_431 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_432 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_432({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_432 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_433 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_433({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(28, 30, 28, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21 10.8328L21 19.5C21 20.3284 20.3284 21 19.5 21L15.75 21C14.9216 21 14.25 20.3284 14.25 19.5L14.25 15.75C14.25 15.3358 13.9142 15 13.5 15L10.5 15C10.0858 15 9.75 15.3358 9.75 15.75L9.75 19.5C9.75 20.3284 9.07843 21 8.25 21L4.5 21C3.67157 21 3 20.3284 3 19.5L3 10.8328C2.99994 10.4131 3.17573 10.0125 3.48469 9.72844L10.9847 2.65219L10.995 2.64188C11.5672 2.1215 12.4412 2.1215 13.0134 2.64188C13.0166 2.64554 13.0201 2.64899 13.0238 2.65219L20.5238 9.72844C20.8296 10.014 21.0022 10.4144 21 10.8328L21 10.8328Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_433 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_434 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_434({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_434 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_435 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_435({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_435 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_437 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_437({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_437 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_438 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_438({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_438 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_439 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_439({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_439 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_440 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_440({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M19.5 3L4.5 3C3.67157 3 3 3.67157 3 4.5L3 19.5C3 20.3284 3.67157 21 4.5 21L19.5 21C20.3284 21 21 20.3284 21 19.5L21 4.5C21 3.67157 20.3284 3 19.5 3L19.5 3ZM19.5 19.5L4.5 19.5L4.5 4.5L19.5 4.5L19.5 19.5L19.5 19.5ZM16.5 12C16.5 12.4142 16.1642 12.75 15.75 12.75L12.75 12.75L12.75 15.75C12.75 16.1642 12.4142 16.5 12 16.5C11.5858 16.5 11.25 16.1642 11.25 15.75L11.25 12.75L8.25 12.75C7.83579 12.75 7.5 12.4142 7.5 12C7.5 11.5858 7.83579 11.25 8.25 11.25L11.25 11.25L11.25 8.25C11.25 7.83579 11.5858 7.5 12 7.5C12.4142 7.5 12.75 7.83579 12.75 8.25L12.75 11.25L15.75 11.25C16.1642 11.25 16.5 11.5858 16.5 12L16.5 12Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_440 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_441 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_441({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_441 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_442 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_442({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_442 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_444 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_444({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_444 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_445 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_445({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_445 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_446 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_446({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_446 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_447 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_447({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M10.9922 14.805C13.0561 13.431 13.9769 10.8677 13.2592 8.49441C12.5414 6.12114 10.3544 4.49772 7.875 4.49772C5.39558 4.49772 3.20857 6.12114 2.49084 8.49441C1.7731 10.8677 2.69393 13.431 4.75781 14.805C2.93952 15.4752 1.38666 16.7153 0.330938 18.3403C0.179932 18.5647 0.161484 18.8531 0.28266 19.095C0.403836 19.3368 0.645857 19.4947 0.916031 19.5081C1.18621 19.5215 1.44266 19.3884 1.58719 19.1597C2.97076 17.0317 5.33677 15.7479 7.875 15.7479C10.4132 15.7479 12.7792 17.0317 14.1628 19.1597C14.3917 19.4999 14.8514 19.5932 15.1948 19.3692C15.5382 19.1452 15.6381 18.6869 15.4191 18.3403C14.3633 16.7153 12.8105 15.4752 10.9922 14.805L10.9922 14.805ZM3.75 10.125C3.75 7.84683 5.59683 6 7.875 6C10.1532 6 12 7.84683 12 10.125C12 12.4032 10.1532 14.25 7.875 14.25C5.5979 14.2474 3.75258 12.4021 3.75 10.125L3.75 10.125ZM23.4506 19.3781C23.1037 19.6043 22.6391 19.5066 22.4128 19.1597C21.0308 17.0303 18.6636 15.7466 16.125 15.75C15.7108 15.75 15.375 15.4142 15.375 15C15.375 14.5858 15.7108 14.25 16.125 14.25C17.7863 14.2484 19.2846 13.2504 19.9261 11.718C20.5677 10.1855 20.2273 8.4178 19.0626 7.23312C17.898 6.04844 16.1363 5.67805 14.5931 6.29344C14.3427 6.40171 14.0531 6.36541 13.8372 6.19864C13.6212 6.03188 13.5128 5.76096 13.5542 5.49125C13.5956 5.22154 13.7802 4.99558 14.0363 4.90125C16.7109 3.83457 19.7592 4.96001 21.099 7.50883C22.4388 10.0576 21.6374 13.2067 19.2422 14.805C21.0605 15.4752 22.6133 16.7153 23.6691 18.3403C23.8953 18.6872 23.7975 19.1518 23.4506 19.3781L23.4506 19.3781Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_447 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_448 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_448({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_448 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_449 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_449({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_449 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_451 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_451({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_451 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_452 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_452({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_452 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_453 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_453({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_453 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_454 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_454({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(156, 133, 74, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M21.6488 19.875C20.2209 17.4066 18.0206 15.6366 15.4528 14.7975C18.0635 13.2433 19.3141 10.1364 18.5082 7.2069C17.7022 4.27741 15.0383 2.24745 12 2.24745C8.96167 2.24745 6.29779 4.27741 5.49182 7.2069C4.68585 10.1364 5.93645 13.2433 8.54719 14.7975C5.97938 15.6356 3.77906 17.4056 2.35125 19.875C2.2087 20.1074 2.20353 20.3989 2.33773 20.6363C2.47194 20.8736 2.72438 21.0194 2.99702 21.0171C3.26967 21.0147 3.51958 20.8646 3.64969 20.625C5.41594 17.5725 8.53781 15.75 12 15.75C15.4622 15.75 18.5841 17.5725 20.3503 20.625C20.4804 20.8646 20.7303 21.0147 21.003 21.0171C21.2756 21.0194 21.5281 20.8736 21.6623 20.6363C21.7965 20.3989 21.7913 20.1074 21.6488 19.875L21.6488 19.875ZM6.75 9C6.75 6.1005 9.1005 3.75 12 3.75C14.8995 3.75 17.25 6.1005 17.25 9C17.25 11.8995 14.8995 14.25 12 14.25C9.10179 14.2469 6.7531 11.8982 6.75 9L6.75 9Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_8_454 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.isNotEmpty) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.isNotEmpty) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_8_455 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_455({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_455 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_456 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_456({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = const Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_456 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_8_458 extends BasePainter {
            @override
  Map<String, dynamic> properties = {};
            Node_8_458({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = const Color.fromRGBO(252, 250, 247, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_8_458 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(const Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.isEmpty && strokes.isEmpty){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = const Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Widget_8_3 extends StatefulWidget {
            
        final String nodeName = r'''welcome''';
        final String name = r'''welcome''';
        final String componentType = r'''Screens''';
        final Map<String, dynamic> properties;
        
        const Widget_8_3({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_3 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_3(properties:properties);
        }
            @override
                _Widget_8_3State createState() => _Widget_8_3State(properties);
            }
            class _Widget_8_3State extends BaseState<Widget_8_3> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 844;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''welcome''', id: '8:3', componentName:r'''welcome''');
                
                _Widget_8_3State(Map<String, dynamic> props){
                    globals.elementInstances.clear();
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
                        globals.currentScreenName = r'''welcome''';
                        elem = globals.Elem(name: r'''welcome''', id: '8:3', widget: this, componentName:r'''welcome''');
                        globals.triggerEvent('pageLoad', r'''welcome''', {'target':elem});
                        WidgetsBinding.instance.addPostFrameCallback((_) => widgetDidLoad());
                        
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''welcome''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'welcome');
            }            
            
            var painter = Node_8_3();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                        width = mq.size.width;
                        height = mq.size.height;
                        m['width'] = width;
                        m['height'] = height;
                        
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''welcome''', id: '8:3', widget: this, componentName:r'''welcome''');
                ComponentDescendantNotification(name: r'''welcome''', id: '8:3', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                           Scaffold(
                             backgroundColor: const Color.fromRGBO(255, 255, 255, 0),                      
                             body: SafeArea(
                                 child: 
                             
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 844,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_4(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        ),
                             ),
                                    
                );
            }
        }
        

        class Widget_8_4 extends StatefulWidget {
            
        final String nodeName = r'''Depth 0, Frame 0''';
        final String name = r'''Depth 0, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_4({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_4 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_4(properties:properties);
        }
            @override
                _Widget_8_4State createState() => _Widget_8_4State(properties);
            }
            class _Widget_8_4State extends BaseState<Widget_8_4> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 844;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:4', componentName:r'''Depth 0, Frame 0''');
                
                _Widget_8_4State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 0, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 0, Frame 0');
            }            
            
            var painter = Node_8_4();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:4', widget: this, componentName:r'''Depth 0, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 0, Frame 0''', id: '8:4', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 844,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_5(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_21(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_5 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 0''';
        final String name = r'''Depth 1, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_5({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_5 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_5(properties:properties);
        }
            @override
                _Widget_8_5State createState() => _Widget_8_5State(properties);
            }
            class _Widget_8_5State extends BaseState<Widget_8_5> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 583;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:5', componentName:r'''Depth 1, Frame 0''');
                
                _Widget_8_5State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 0');
            }            
            
            var painter = Node_8_5();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:5', widget: this, componentName:r'''Depth 1, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 0''', id: '8:5', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 583,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_6(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_9(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_11(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_13(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_6 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_6({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_6 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_6(properties:properties);
        }
            @override
                _Widget_8_6State createState() => _Widget_8_6State(properties);
            }
            class _Widget_8_6State extends BaseState<Widget_8_6> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 320;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:6', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_6State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_6();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:6', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:6', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 320,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_7(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_7 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_7({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_7 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_7(properties:properties);
        }
            @override
                _Widget_8_7State createState() => _Widget_8_7State(properties);
            }
            class _Widget_8_7State extends BaseState<Widget_8_7> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 320;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:7', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_7State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_7();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:7', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:7', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 320,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_8(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_8 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_8({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_8 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_8(properties:properties);
        }
            @override
                _Widget_8_8State createState() => _Widget_8_8State(properties);
            }
            class _Widget_8_8State extends BaseState<Widget_8_8> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 320;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:8', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_8State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_8', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_8();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:8', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:8', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 320,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_9 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_9({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_9 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_9(properties:properties);
        }
            @override
                _Widget_8_9State createState() => _Widget_8_9State(properties);
            }
            class _Widget_8_9State extends BaseState<Widget_8_9> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 67;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:9', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_9State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_9();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:9', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:9', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 67,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_10(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_10 extends StatefulWidget {
            
        final String nodeName = r'''Welcome to JinBeanPod''';
        final String name = r'''Welcome to JinBeanPod''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_10({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_10 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_10(properties:properties);
        }
            @override
                _Widget_8_10State createState() => _Widget_8_10State(properties);
            }
            class _Widget_8_10State extends BaseState<Widget_8_10> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 35;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Welcome to JinBeanPod''', id: '8:10', componentName:r'''Welcome to JinBeanPod''');
                
                _Widget_8_10State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Welcome to JinBeanPod''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((35/35).floor()) <=1 ? 1 : (35/35).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 28,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Welcome to JinBeanPod''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Welcome to JinBeanPod');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Welcome to JinBeanPod''', id: '8:10', widget: this, componentName:r'''Welcome to JinBeanPod''');
                ComponentDescendantNotification(name: r'''Welcome to JinBeanPod''', id: '8:10', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 35,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_11 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 2''';
        final String name = r'''Depth 2, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_11({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_11 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_11(properties:properties);
        }
            @override
                _Widget_8_11State createState() => _Widget_8_11State(properties);
            }
            class _Widget_8_11State extends BaseState<Widget_8_11> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:11', componentName:r'''Depth 2, Frame 2''');
                
                _Widget_8_11State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 2');
            }            
            
            var painter = Node_8_11();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:11', widget: this, componentName:r'''Depth 2, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 2''', id: '8:11', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_12(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_12 extends StatefulWidget {
            
        final String nodeName = r'''Your multilingual community hub for appointments, rentals, information, and more.''';
        final String name = r'''Your multilingual community hub for appointments, rentals, information, and more.''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_12({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_12 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_12(properties:properties);
        }
            @override
                _Widget_8_12State createState() => _Widget_8_12State(properties);
            }
            class _Widget_8_12State extends BaseState<Widget_8_12> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Your multilingual community hub for appointments, rentals, information, and more.''', id: '8:12', componentName:r'''Your multilingual community hub for appointments, rentals, information, and more.''');
                
                _Widget_8_12State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Your multilingual community hub for appointments, rentals, information, and more.''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((48/24).floor()) <=1 ? 1 : (48/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Your multilingual community hub for appointments, rentals, information, and more.''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Your multilingual community hub for appointments, rentals, information, and more.');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Your multilingual community hub for appointments, rentals, information, and more.''', id: '8:12', widget: this, componentName:r'''Your multilingual community hub for appointments, rentals, information, and more.''');
                ComponentDescendantNotification(name: r'''Your multilingual community hub for appointments, rentals, information, and more.''', id: '8:12', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_13 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 3''';
        final String name = r'''Depth 2, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_13({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_13 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_13(properties:properties);
        }
            @override
                _Widget_8_13State createState() => _Widget_8_13State(properties);
            }
            class _Widget_8_13State extends BaseState<Widget_8_13> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 132;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:13', componentName:r'''Depth 2, Frame 3''');
                
                _Widget_8_13State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 3');
            }            
            
            var painter = Node_8_13();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:13', widget: this, componentName:r'''Depth 2, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 3''', id: '8:13', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 132,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_14(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_14 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_14({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_14 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_14(properties:properties);
        }
            @override
                _Widget_8_14State createState() => _Widget_8_14State(properties);
            }
            class _Widget_8_14State extends BaseState<Widget_8_14> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 132;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:14', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_14State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_14();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:14', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:14', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 132,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_15(key:UniqueKey()), 
                                                    const SizedBox(height: 12), 
                                                    Widget_8_18(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_15 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_15({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_15 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_15(properties:properties);
        }
            @override
                _Widget_8_15State createState() => _Widget_8_15State(properties);
            }
            class _Widget_8_15State extends BaseState<Widget_8_15> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:15', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_15State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_15();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:15', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:15', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_16(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_16 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_16({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_16 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_16(properties:properties);
        }
            @override
                _Widget_8_16State createState() => _Widget_8_16State(properties);
            }
            class _Widget_8_16State extends BaseState<Widget_8_16> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:16', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_16State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_16();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:16', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:16', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_17(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_17 extends StatefulWidget {
            
        final String nodeName = r'''Register''';
        final String name = r'''Register''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_17({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_17 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_17(properties:properties);
        }
            @override
                _Widget_8_17State createState() => _Widget_8_17State(properties);
            }
            class _Widget_8_17State extends BaseState<Widget_8_17> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Register''', id: '8:17', componentName:r'''Register''');
                
                _Widget_8_17State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Register''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Register''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Register');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Register''', id: '8:17', widget: this, componentName:r'''Register''');
                ComponentDescendantNotification(name: r'''Register''', id: '8:17', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_18 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_18({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_18 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_18(properties:properties);
        }
            @override
                _Widget_8_18State createState() => _Widget_8_18State(properties);
            }
            class _Widget_8_18State extends BaseState<Widget_8_18> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:18', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_18State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_18();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:18', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:18', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_19(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_8_19 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_19({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_19 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_19(properties:properties);
        }
            @override
                _Widget_8_19State createState() => _Widget_8_19State(properties);
            }
            class _Widget_8_19State extends BaseState<Widget_8_19> {
                bool visible = true;
                bool isLoaded = false;
                double width = 49;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:19', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_19State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_19();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:19', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:19', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 49,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_20(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_20 extends StatefulWidget {
            
        final String nodeName = r'''Log In''';
        final String name = r'''Log In''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_20({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_20 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_20(properties:properties);
        }
            @override
                _Widget_8_20State createState() => _Widget_8_20State(properties);
            }
            class _Widget_8_20State extends BaseState<Widget_8_20> {
                bool visible = true;
                bool isLoaded = false;
                double width = 49;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Log In''', id: '8:20', componentName:r'''Log In''');
                
                _Widget_8_20State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Log In''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Log In''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Log In');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Log In''', id: '8:20', widget: this, componentName:r'''Log In''');
                ComponentDescendantNotification(name: r'''Log In''', id: '8:20', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 49,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_21 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 1''';
        final String name = r'''Depth 1, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_21({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_21 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_21(properties:properties);
        }
            @override
                _Widget_8_21State createState() => _Widget_8_21State(properties);
            }
            class _Widget_8_21State extends BaseState<Widget_8_21> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 78;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:21', componentName:r'''Depth 1, Frame 1''');
                
                _Widget_8_21State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 1');
            }            
            
            var painter = Node_8_21();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:21', widget: this, componentName:r'''Depth 1, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 1''', id: '8:21', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 78,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_22(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_24(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_22 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_22({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_22 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_22(properties:properties);
        }
            @override
                _Widget_8_22State createState() => _Widget_8_22State(properties);
            }
            class _Widget_8_22State extends BaseState<Widget_8_22> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:22', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_22State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_22();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:22', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:22', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 58,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_23(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_23 extends StatefulWidget {
            
        final String nodeName = r'''By continuing, you agree to our Terms of Service and Privacy Policy.''';
        final String name = r'''By continuing, you agree to our Terms of Service and Privacy Policy.''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_23({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_23 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_23(properties:properties);
        }
            @override
                _Widget_8_23State createState() => _Widget_8_23State(properties);
            }
            class _Widget_8_23State extends BaseState<Widget_8_23> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''By continuing, you agree to our Terms of Service and Privacy Policy.''', id: '8:23', componentName:r'''By continuing, you agree to our Terms of Service and Privacy Policy.''');
                
                _Widget_8_23State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''By continuing, you agree to our Terms of Service and Privacy Policy.''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''By continuing, you agree to our Terms of Service and Privacy Policy.''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'By continuing, you agree to our Terms of Service and Privacy Policy.');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''By continuing, you agree to our Terms of Service and Privacy Policy.''', id: '8:23', widget: this, componentName:r'''By continuing, you agree to our Terms of Service and Privacy Policy.''');
                ComponentDescendantNotification(name: r'''By continuing, you agree to our Terms of Service and Privacy Policy.''', id: '8:23', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_24 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_24({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_24 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_24(properties:properties);
        }
            @override
                _Widget_8_24State createState() => _Widget_8_24State(properties);
            }
            class _Widget_8_24State extends BaseState<Widget_8_24> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:24', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_24State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_24();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:24', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:24', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_25 extends StatefulWidget {
            
        final String nodeName = r'''home''';
        final String name = r'''home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_25({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_25 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_25(properties:properties);
        }
            @override
                _Widget_8_25State createState() => _Widget_8_25State(properties);
            }
            class _Widget_8_25State extends BaseState<Widget_8_25> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1137;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''home''', id: '8:25', componentName:r'''home''');
                
                _Widget_8_25State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'home');
            }            
            
            var painter = Node_8_25();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''home''', id: '8:25', widget: this, componentName:r'''home''');
                ComponentDescendantNotification(name: r'''home''', id: '8:25', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_158(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1137,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_26(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_8_26 extends StatefulWidget {
            
        final String nodeName = r'''Depth 0, Frame 0''';
        final String name = r'''Depth 0, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_26({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_26 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_26(properties:properties);
        }
            @override
                _Widget_8_26State createState() => _Widget_8_26State(properties);
            }
            class _Widget_8_26State extends BaseState<Widget_8_26> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1137;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:26', componentName:r'''Depth 0, Frame 0''');
                
                _Widget_8_26State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 0, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 0, Frame 0');
            }            
            
            var painter = Node_8_26();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:26', widget: this, componentName:r'''Depth 0, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 0, Frame 0''', id: '8:26', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1137,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_27(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_127(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_27 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 0''';
        final String name = r'''Depth 1, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_27({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_27 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_27(properties:properties);
        }
            @override
                _Widget_8_27State createState() => _Widget_8_27State(properties);
            }
            class _Widget_8_27State extends BaseState<Widget_8_27> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1042;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:27', componentName:r'''Depth 1, Frame 0''');
                
                _Widget_8_27State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 0');
            }            
            
            var painter = Node_8_27();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:27', widget: this, componentName:r'''Depth 1, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 0''', id: '8:27', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1042,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_28(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_37(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_60(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_62(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_93(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_95(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_105(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_107(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_117(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_28 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_28({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_28 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_28(properties:properties);
        }
            @override
                _Widget_8_28State createState() => _Widget_8_28State(properties);
            }
            class _Widget_8_28State extends BaseState<Widget_8_28> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 72;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:28', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_28State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_28();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:28', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:28', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 72,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_29(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_31(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_29 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_29({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_29 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_29(properties:properties);
        }
            @override
                _Widget_8_29State createState() => _Widget_8_29State(properties);
            }
            class _Widget_8_29State extends BaseState<Widget_8_29> {
                bool visible = true;
                bool isLoaded = false;
                double width = 310;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:29', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_29State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_29();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:29', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:29', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 310,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_30(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_30 extends StatefulWidget {
            
        final String nodeName = r'''JinBeanPod''';
        final String name = r'''JinBeanPod''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_30({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_30 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_30(properties:properties);
        }
            @override
                _Widget_8_30State createState() => _Widget_8_30State(properties);
            }
            class _Widget_8_30State extends BaseState<Widget_8_30> {
                bool visible = true;
                bool isLoaded = false;
                double width = 262;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''JinBeanPod''', id: '8:30', componentName:r'''JinBeanPod''');
                
                _Widget_8_30State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''JinBeanPod''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''JinBeanPod''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'JinBeanPod');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''JinBeanPod''', id: '8:30', widget: this, componentName:r'''JinBeanPod''');
                ComponentDescendantNotification(name: r'''JinBeanPod''', id: '8:30', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 262,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_31 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_31({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_31 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_31(properties:properties);
        }
            @override
                _Widget_8_31State createState() => _Widget_8_31State(properties);
            }
            class _Widget_8_31State extends BaseState<Widget_8_31> {
                bool visible = true;
                bool isLoaded = false;
                double width = 48;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:31', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_31State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_31();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:31', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:31', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 48,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_32(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_32 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_32({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_32 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_32(properties:properties);
        }
            @override
                _Widget_8_32State createState() => _Widget_8_32State(properties);
            }
            class _Widget_8_32State extends BaseState<Widget_8_32> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:32', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_32State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_32();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:32', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:32', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_33(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_33 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_33({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_33 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_33(properties:properties);
        }
            @override
                _Widget_8_33State createState() => _Widget_8_33State(properties);
            }
            class _Widget_8_33State extends BaseState<Widget_8_33> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:33', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_33State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_33();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:33', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:33', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_34(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_34 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_34({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_34 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_34(properties:properties);
        }
            @override
                _Widget_8_34State createState() => _Widget_8_34State(properties);
            }
            class _Widget_8_34State extends BaseState<Widget_8_34> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:34', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_34State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_34();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:34', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:34', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_35())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_36()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_35 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_35({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_35 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_35(properties:properties);
        }
            @override
                _Widget_8_35State createState() => _Widget_8_35State(properties);
            }
            class _Widget_8_35State extends BaseState<Widget_8_35> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:35', componentName:r'''Vector - 0''');
                
                _Widget_8_35State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_35();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:35', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:35', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_36 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_36({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_36 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_36(properties:properties);
        }
            @override
                _Widget_8_36State createState() => _Widget_8_36State(properties);
            }
            class _Widget_8_36State extends BaseState<Widget_8_36> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:36', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_36State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_36();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:36', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:36', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_37 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 2''';
        final String name = r'''Depth 2, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_37({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_37 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_37(properties:properties);
        }
            @override
                _Widget_8_37State createState() => _Widget_8_37State(properties);
            }
            class _Widget_8_37State extends BaseState<Widget_8_37> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 288;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:37', componentName:r'''Depth 2, Frame 2''');
                
                _Widget_8_37State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 2');
            }            
            
            var painter = Node_8_37();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:37', widget: this, componentName:r'''Depth 2, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 2''', id: '8:37', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 288,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_38(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_38 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_38({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_38 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_38(properties:properties);
        }
            @override
                _Widget_8_38State createState() => _Widget_8_38State(properties);
            }
            class _Widget_8_38State extends BaseState<Widget_8_38> {
                bool visible = true;
                bool isLoaded = false;
                double width = 664;
                double height = 288;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:38', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_38State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_38();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:38', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:38', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 664,
                                height: 288,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_39(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_46(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_53(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_39 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_39({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_39 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_39(properties:properties);
        }
            @override
                _Widget_8_39State createState() => _Widget_8_39State(properties);
            }
            class _Widget_8_39State extends BaseState<Widget_8_39> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 256;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:39', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_39State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_39();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:39', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:39', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 256,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_40(key:UniqueKey()), 
                                                    const SizedBox(height: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_41(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_40 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_40({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_40 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_40(properties:properties);
        }
            @override
                _Widget_8_40State createState() => _Widget_8_40State(properties);
            }
            class _Widget_8_40State extends BaseState<Widget_8_40> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 135;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:40', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_40State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_40', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_40();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:40', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:40', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 135,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_41 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_41({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_41 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_41(properties:properties);
        }
            @override
                _Widget_8_41State createState() => _Widget_8_41State(properties);
            }
            class _Widget_8_41State extends BaseState<Widget_8_41> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 45;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:41', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_41State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_41();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:41', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:41', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 45,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_42(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_44(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_42 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_42({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_42 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_42(properties:properties);
        }
            @override
                _Widget_8_42State createState() => _Widget_8_42State(properties);
            }
            class _Widget_8_42State extends BaseState<Widget_8_42> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:42', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_42State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_42();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:42', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:42', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_43(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_43 extends StatefulWidget {
            
        final String nodeName = r'''Community Event''';
        final String name = r'''Community Event''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_43({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_43 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_43(properties:properties);
        }
            @override
                _Widget_8_43State createState() => _Widget_8_43State(properties);
            }
            class _Widget_8_43State extends BaseState<Widget_8_43> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community Event''', id: '8:43', componentName:r'''Community Event''');
                
                _Widget_8_43State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community Event''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community Event''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community Event');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community Event''', id: '8:43', widget: this, componentName:r'''Community Event''');
                ComponentDescendantNotification(name: r'''Community Event''', id: '8:43', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_44 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_44({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_44 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_44(properties:properties);
        }
            @override
                _Widget_8_44State createState() => _Widget_8_44State(properties);
            }
            class _Widget_8_44State extends BaseState<Widget_8_44> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:44', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_44State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_44();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:44', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:44', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_45(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_45 extends StatefulWidget {
            
        final String nodeName = r'''Join us for a fun day!''';
        final String name = r'''Join us for a fun day!''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_45({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_45 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_45(properties:properties);
        }
            @override
                _Widget_8_45State createState() => _Widget_8_45State(properties);
            }
            class _Widget_8_45State extends BaseState<Widget_8_45> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Join us for a fun day!''', id: '8:45', componentName:r'''Join us for a fun day!''');
                
                _Widget_8_45State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Join us for a fun day!''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Join us for a fun day!''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Join us for a fun day!');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Join us for a fun day!''', id: '8:45', widget: this, componentName:r'''Join us for a fun day!''');
                ComponentDescendantNotification(name: r'''Join us for a fun day!''', id: '8:45', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_46 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_46({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_46 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_46(properties:properties);
        }
            @override
                _Widget_8_46State createState() => _Widget_8_46State(properties);
            }
            class _Widget_8_46State extends BaseState<Widget_8_46> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 256;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:46', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_46State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_46();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:46', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:46', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 256,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_47(key:UniqueKey()), 
                                                    const SizedBox(height: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_48(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_47 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_47({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_47 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_47(properties:properties);
        }
            @override
                _Widget_8_47State createState() => _Widget_8_47State(properties);
            }
            class _Widget_8_47State extends BaseState<Widget_8_47> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 135;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:47', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_47State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_47', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_47();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:47', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:47', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 135,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_48 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_48({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_48 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_48(properties:properties);
        }
            @override
                _Widget_8_48State createState() => _Widget_8_48State(properties);
            }
            class _Widget_8_48State extends BaseState<Widget_8_48> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 45;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:48', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_48State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_48();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:48', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:48', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 45,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_49(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_51(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_49 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_49({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_49 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_49(properties:properties);
        }
            @override
                _Widget_8_49State createState() => _Widget_8_49State(properties);
            }
            class _Widget_8_49State extends BaseState<Widget_8_49> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:49', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_49State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_49();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:49', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:49', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_50(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_50 extends StatefulWidget {
            
        final String nodeName = r'''Community Event''';
        final String name = r'''Community Event''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_50({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_50 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_50(properties:properties);
        }
            @override
                _Widget_8_50State createState() => _Widget_8_50State(properties);
            }
            class _Widget_8_50State extends BaseState<Widget_8_50> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community Event''', id: '8:50', componentName:r'''Community Event''');
                
                _Widget_8_50State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community Event''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community Event''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community Event');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community Event''', id: '8:50', widget: this, componentName:r'''Community Event''');
                ComponentDescendantNotification(name: r'''Community Event''', id: '8:50', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_51 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_51({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_51 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_51(properties:properties);
        }
            @override
                _Widget_8_51State createState() => _Widget_8_51State(properties);
            }
            class _Widget_8_51State extends BaseState<Widget_8_51> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:51', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_51State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_51();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:51', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:51', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_52(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_52 extends StatefulWidget {
            
        final String nodeName = r'''Join us for a fun day!''';
        final String name = r'''Join us for a fun day!''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_52({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_52 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_52(properties:properties);
        }
            @override
                _Widget_8_52State createState() => _Widget_8_52State(properties);
            }
            class _Widget_8_52State extends BaseState<Widget_8_52> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Join us for a fun day!''', id: '8:52', componentName:r'''Join us for a fun day!''');
                
                _Widget_8_52State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Join us for a fun day!''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Join us for a fun day!''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Join us for a fun day!');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Join us for a fun day!''', id: '8:52', widget: this, componentName:r'''Join us for a fun day!''');
                ComponentDescendantNotification(name: r'''Join us for a fun day!''', id: '8:52', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_53 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 2''';
        final String name = r'''Depth 4, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_53({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_53 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_53(properties:properties);
        }
            @override
                _Widget_8_53State createState() => _Widget_8_53State(properties);
            }
            class _Widget_8_53State extends BaseState<Widget_8_53> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 256;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 2''', id: '8:53', componentName:r'''Depth 4, Frame 2''');
                
                _Widget_8_53State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 2');
            }            
            
            var painter = Node_8_53();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 2''', id: '8:53', widget: this, componentName:r'''Depth 4, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 2''', id: '8:53', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 256,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_54(key:UniqueKey()), 
                                                    const SizedBox(height: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_55(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_54 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_54({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_54 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_54(properties:properties);
        }
            @override
                _Widget_8_54State createState() => _Widget_8_54State(properties);
            }
            class _Widget_8_54State extends BaseState<Widget_8_54> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 135;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:54', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_54State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_54', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_54();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:54', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:54', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 135,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_55 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_55({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_55 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_55(properties:properties);
        }
            @override
                _Widget_8_55State createState() => _Widget_8_55State(properties);
            }
            class _Widget_8_55State extends BaseState<Widget_8_55> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 45;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:55', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_55State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_55();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:55', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:55', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 45,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_56(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_58(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_56 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_56({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_56 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_56(properties:properties);
        }
            @override
                _Widget_8_56State createState() => _Widget_8_56State(properties);
            }
            class _Widget_8_56State extends BaseState<Widget_8_56> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:56', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_56State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_56();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:56', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:56', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_57(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_57 extends StatefulWidget {
            
        final String nodeName = r'''Community Event''';
        final String name = r'''Community Event''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_57({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_57 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_57(properties:properties);
        }
            @override
                _Widget_8_57State createState() => _Widget_8_57State(properties);
            }
            class _Widget_8_57State extends BaseState<Widget_8_57> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community Event''', id: '8:57', componentName:r'''Community Event''');
                
                _Widget_8_57State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community Event''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community Event''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community Event');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community Event''', id: '8:57', widget: this, componentName:r'''Community Event''');
                ComponentDescendantNotification(name: r'''Community Event''', id: '8:57', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_58 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_58({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_58 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_58(properties:properties);
        }
            @override
                _Widget_8_58State createState() => _Widget_8_58State(properties);
            }
            class _Widget_8_58State extends BaseState<Widget_8_58> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:58', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_58State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_58();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:58', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:58', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_59(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_59 extends StatefulWidget {
            
        final String nodeName = r'''Join us for a fun day!''';
        final String name = r'''Join us for a fun day!''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_59({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_59 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_59(properties:properties);
        }
            @override
                _Widget_8_59State createState() => _Widget_8_59State(properties);
            }
            class _Widget_8_59State extends BaseState<Widget_8_59> {
                bool visible = true;
                bool isLoaded = false;
                double width = 240;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Join us for a fun day!''', id: '8:59', componentName:r'''Join us for a fun day!''');
                
                _Widget_8_59State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Join us for a fun day!''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Join us for a fun day!''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Join us for a fun day!');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Join us for a fun day!''', id: '8:59', widget: this, componentName:r'''Join us for a fun day!''');
                ComponentDescendantNotification(name: r'''Join us for a fun day!''', id: '8:59', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 240,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_60 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 3''';
        final String name = r'''Depth 2, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_60({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_60 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_60(properties:properties);
        }
            @override
                _Widget_8_60State createState() => _Widget_8_60State(properties);
            }
            class _Widget_8_60State extends BaseState<Widget_8_60> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:60', componentName:r'''Depth 2, Frame 3''');
                
                _Widget_8_60State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 3');
            }            
            
            var painter = Node_8_60();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:60', widget: this, componentName:r'''Depth 2, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 3''', id: '8:60', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_61(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_61 extends StatefulWidget {
            
        final String nodeName = r'''Services''';
        final String name = r'''Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_61({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_61 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_61(properties:properties);
        }
            @override
                _Widget_8_61State createState() => _Widget_8_61State(properties);
            }
            class _Widget_8_61State extends BaseState<Widget_8_61> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Services''', id: '8:61', componentName:r'''Services''');
                
                _Widget_8_61State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Services''', id: '8:61', widget: this, componentName:r'''Services''');
                ComponentDescendantNotification(name: r'''Services''', id: '8:61', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_62 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 4''';
        final String name = r'''Depth 2, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_62({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_62 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_62(properties:properties);
        }
            @override
                _Widget_8_62State createState() => _Widget_8_62State(properties);
            }
            class _Widget_8_62State extends BaseState<Widget_8_62> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 176;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:62', componentName:r'''Depth 2, Frame 4''');
                
                _Widget_8_62State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 4');
            }            
            
            var painter = Node_8_62();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:62', widget: this, componentName:r'''Depth 2, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 4''', id: '8:62', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 176,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_63(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_78(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_63 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_63({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_63 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_63(properties:properties);
        }
            @override
                _Widget_8_63State createState() => _Widget_8_63State(properties);
            }
            class _Widget_8_63State extends BaseState<Widget_8_63> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 74;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:63', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_63State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_63();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:63', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:63', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 74,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_64(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_71(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_64 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_64({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_64 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_64(properties:properties);
        }
            @override
                _Widget_8_64State createState() => _Widget_8_64State(properties);
            }
            class _Widget_8_64State extends BaseState<Widget_8_64> {
                bool visible = true;
                bool isLoaded = false;
                double width = 173;
                double height = 74;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:64', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_64State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_64();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:64', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:64', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 173,
                                height: 74,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_65(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_69(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_65 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_65({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_65 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_65(properties:properties);
        }
            @override
                _Widget_8_65State createState() => _Widget_8_65State(properties);
            }
            class _Widget_8_65State extends BaseState<Widget_8_65> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:65', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_65State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_65();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:65', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:65', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_66(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_66 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_66({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_66 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_66(properties:properties);
        }
            @override
                _Widget_8_66State createState() => _Widget_8_66State(properties);
            }
            class _Widget_8_66State extends BaseState<Widget_8_66> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:66', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_66State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_66();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:66', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:66', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_67())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 23 + 0, maxWidth: 23 + 0,
                                                                        minHeight: 17 + 0, maxHeight: 17 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 23,
                                                                        height: 17,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_68()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_67 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_67({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_67 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_67(properties:properties);
        }
            @override
                _Widget_8_67State createState() => _Widget_8_67State(properties);
            }
            class _Widget_8_67State extends BaseState<Widget_8_67> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:67', componentName:r'''Vector - 0''');
                
                _Widget_8_67State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_67();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:67', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:67', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_68 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_68({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_68 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_68(properties:properties);
        }
            @override
                _Widget_8_68State createState() => _Widget_8_68State(properties);
            }
            class _Widget_8_68State extends BaseState<Widget_8_68> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23;
                double height = 17;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:68', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_68State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_68();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:68', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:68', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 23,
                                height: 17,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_69 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_69({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_69 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_69(properties:properties);
        }
            @override
                _Widget_8_69State createState() => _Widget_8_69State(properties);
            }
            class _Widget_8_69State extends BaseState<Widget_8_69> {
                bool visible = true;
                bool isLoaded = false;
                double width = 99;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:69', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_69State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_69();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:69', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:69', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 99,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_70(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_70 extends StatefulWidget {
            
        final String nodeName = r'''Tire Change''';
        final String name = r'''Tire Change''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_70({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_70 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_70(properties:properties);
        }
            @override
                _Widget_8_70State createState() => _Widget_8_70State(properties);
            }
            class _Widget_8_70State extends BaseState<Widget_8_70> {
                bool visible = true;
                bool isLoaded = false;
                double width = 99;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Tire Change''', id: '8:70', componentName:r'''Tire Change''');
                
                _Widget_8_70State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Tire Change''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Tire Change''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Tire Change');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Tire Change''', id: '8:70', widget: this, componentName:r'''Tire Change''');
                ComponentDescendantNotification(name: r'''Tire Change''', id: '8:70', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 99,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_71 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_71({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_71 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_71(properties:properties);
        }
            @override
                _Widget_8_71State createState() => _Widget_8_71State(properties);
            }
            class _Widget_8_71State extends BaseState<Widget_8_71> {
                bool visible = true;
                bool isLoaded = false;
                double width = 173;
                double height = 74;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:71', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_71State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_71();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:71', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:71', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 173,
                                height: 74,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_72(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_76(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_72 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_72({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_72 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_72(properties:properties);
        }
            @override
                _Widget_8_72State createState() => _Widget_8_72State(properties);
            }
            class _Widget_8_72State extends BaseState<Widget_8_72> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:72', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_72State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_72();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:72', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:72', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_73(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_73 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_73({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_73 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_73(properties:properties);
        }
            @override
                _Widget_8_73State createState() => _Widget_8_73State(properties);
            }
            class _Widget_8_73State extends BaseState<Widget_8_73> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:73', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_73State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_73();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:73', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:73', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_74())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_75()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_74 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_74({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_74 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_74(properties:properties);
        }
            @override
                _Widget_8_74State createState() => _Widget_8_74State(properties);
            }
            class _Widget_8_74State extends BaseState<Widget_8_74> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:74', componentName:r'''Vector - 0''');
                
                _Widget_8_74State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_74();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:74', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:74', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_75 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_75({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_75 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_75(properties:properties);
        }
            @override
                _Widget_8_75State createState() => _Widget_8_75State(properties);
            }
            class _Widget_8_75State extends BaseState<Widget_8_75> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:75', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_75State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_75();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:75', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:75', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_76 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_76({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_76 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_76(properties:properties);
        }
            @override
                _Widget_8_76State createState() => _Widget_8_76State(properties);
            }
            class _Widget_8_76State extends BaseState<Widget_8_76> {
                bool visible = true;
                bool isLoaded = false;
                double width = 103;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:76', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_76State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_76();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:76', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:76', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 103,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_77(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_77 extends StatefulWidget {
            
        final String nodeName = r'''Home Service''';
        final String name = r'''Home Service''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_77({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_77 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_77(properties:properties);
        }
            @override
                _Widget_8_77State createState() => _Widget_8_77State(properties);
            }
            class _Widget_8_77State extends BaseState<Widget_8_77> {
                bool visible = true;
                bool isLoaded = false;
                double width = 103;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home Service''', id: '8:77', componentName:r'''Home Service''');
                
                _Widget_8_77State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home Service''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((40/20).floor()) <=1 ? 1 : (40/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home Service''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home Service');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home Service''', id: '8:77', widget: this, componentName:r'''Home Service''');
                ComponentDescendantNotification(name: r'''Home Service''', id: '8:77', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 103,
                                height: 40,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_78 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_78({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_78 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_78(properties:properties);
        }
            @override
                _Widget_8_78State createState() => _Widget_8_78State(properties);
            }
            class _Widget_8_78State extends BaseState<Widget_8_78> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:78', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_78State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_78();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:78', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:78', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 58,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_79(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_86(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_79 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_79({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_79 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_79(properties:properties);
        }
            @override
                _Widget_8_79State createState() => _Widget_8_79State(properties);
            }
            class _Widget_8_79State extends BaseState<Widget_8_79> {
                bool visible = true;
                bool isLoaded = false;
                double width = 173;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:79', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_79State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_79();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:79', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:79', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 173,
                                height: 58,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_80(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_84(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_80 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_80({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_80 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_80(properties:properties);
        }
            @override
                _Widget_8_80State createState() => _Widget_8_80State(properties);
            }
            class _Widget_8_80State extends BaseState<Widget_8_80> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:80', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_80State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_80();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:80', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:80', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_81(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_81 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_81({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_81 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_81(properties:properties);
        }
            @override
                _Widget_8_81State createState() => _Widget_8_81State(properties);
            }
            class _Widget_8_81State extends BaseState<Widget_8_81> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:81', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_81State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_81();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:81', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:81', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_82())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 21 + 0, maxWidth: 21 + 0,
                                                                        minHeight: 17 + 0, maxHeight: 17 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 21,
                                                                        height: 17,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_83()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_82 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_82({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_82 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_82(properties:properties);
        }
            @override
                _Widget_8_82State createState() => _Widget_8_82State(properties);
            }
            class _Widget_8_82State extends BaseState<Widget_8_82> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:82', componentName:r'''Vector - 0''');
                
                _Widget_8_82State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_82();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:82', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:82', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_83 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_83({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_83 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_83(properties:properties);
        }
            @override
                _Widget_8_83State createState() => _Widget_8_83State(properties);
            }
            class _Widget_8_83State extends BaseState<Widget_8_83> {
                bool visible = true;
                bool isLoaded = false;
                double width = 21;
                double height = 17;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:83', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_83State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_83();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:83', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:83', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 21,
                                height: 17,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_84 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_84({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_84 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_84(properties:properties);
        }
            @override
                _Widget_8_84State createState() => _Widget_8_84State(properties);
            }
            class _Widget_8_84State extends BaseState<Widget_8_84> {
                bool visible = true;
                bool isLoaded = false;
                double width = 61;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:84', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_84State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_84();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:84', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:84', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 61,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_85(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_85 extends StatefulWidget {
            
        final String nodeName = r'''Rentals''';
        final String name = r'''Rentals''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_85({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_85 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_85(properties:properties);
        }
            @override
                _Widget_8_85State createState() => _Widget_8_85State(properties);
            }
            class _Widget_8_85State extends BaseState<Widget_8_85> {
                bool visible = true;
                bool isLoaded = false;
                double width = 61;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Rentals''', id: '8:85', componentName:r'''Rentals''');
                
                _Widget_8_85State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Rentals''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rentals''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Rentals');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Rentals''', id: '8:85', widget: this, componentName:r'''Rentals''');
                ComponentDescendantNotification(name: r'''Rentals''', id: '8:85', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 61,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_86 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_86({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_86 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_86(properties:properties);
        }
            @override
                _Widget_8_86State createState() => _Widget_8_86State(properties);
            }
            class _Widget_8_86State extends BaseState<Widget_8_86> {
                bool visible = true;
                bool isLoaded = false;
                double width = 173;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:86', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_86State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_86();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:86', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:86', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 173,
                                height: 58,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_87(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 12), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_91(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_87 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_87({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_87 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_87(properties:properties);
        }
            @override
                _Widget_8_87State createState() => _Widget_8_87State(properties);
            }
            class _Widget_8_87State extends BaseState<Widget_8_87> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:87', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_87State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_87();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:87', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:87', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_88(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_88 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_88({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_88 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_88(properties:properties);
        }
            @override
                _Widget_8_88State createState() => _Widget_8_88State(properties);
            }
            class _Widget_8_88State extends BaseState<Widget_8_88> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:88', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_88State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_88();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:88', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:88', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_89())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 15 + 0, maxWidth: 15 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 15,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_90()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_89 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_89({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_89 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_89(properties:properties);
        }
            @override
                _Widget_8_89State createState() => _Widget_8_89State(properties);
            }
            class _Widget_8_89State extends BaseState<Widget_8_89> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:89', componentName:r'''Vector - 0''');
                
                _Widget_8_89State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_89();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:89', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:89', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_90 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_90({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_90 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_90(properties:properties);
        }
            @override
                _Widget_8_90State createState() => _Widget_8_90State(properties);
            }
            class _Widget_8_90State extends BaseState<Widget_8_90> {
                bool visible = true;
                bool isLoaded = false;
                double width = 15;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:90', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_90State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_90();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:90', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:90', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 15,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_91 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_91({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_91 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_91(properties:properties);
        }
            @override
                _Widget_8_91State createState() => _Widget_8_91State(properties);
            }
            class _Widget_8_91State extends BaseState<Widget_8_91> {
                bool visible = true;
                bool isLoaded = false;
                double width = 56;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:91', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_91State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_91();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:91', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:91', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 56,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_92(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_92 extends StatefulWidget {
            
        final String nodeName = r'''Others''';
        final String name = r'''Others''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_92({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_92 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_92(properties:properties);
        }
            @override
                _Widget_8_92State createState() => _Widget_8_92State(properties);
            }
            class _Widget_8_92State extends BaseState<Widget_8_92> {
                bool visible = true;
                bool isLoaded = false;
                double width = 56;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Others''', id: '8:92', componentName:r'''Others''');
                
                _Widget_8_92State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Others''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Others''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Others');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Others''', id: '8:92', widget: this, componentName:r'''Others''');
                ComponentDescendantNotification(name: r'''Others''', id: '8:92', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 56,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_93 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 5''';
        final String name = r'''Depth 2, Frame 5''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_93({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_93 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_93(properties:properties);
        }
            @override
                _Widget_8_93State createState() => _Widget_8_93State(properties);
            }
            class _Widget_8_93State extends BaseState<Widget_8_93> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:93', componentName:r'''Depth 2, Frame 5''');
                
                _Widget_8_93State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 5''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 5');
            }            
            
            var painter = Node_8_93();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:93', widget: this, componentName:r'''Depth 2, Frame 5''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 5''', id: '8:93', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_94(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_94 extends StatefulWidget {
            
        final String nodeName = r'''Featured Posts''';
        final String name = r'''Featured Posts''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_94({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_94 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_94(properties:properties);
        }
            @override
                _Widget_8_94State createState() => _Widget_8_94State(properties);
            }
            class _Widget_8_94State extends BaseState<Widget_8_94> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Featured Posts''', id: '8:94', componentName:r'''Featured Posts''');
                
                _Widget_8_94State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Featured Posts''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Featured Posts''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Featured Posts');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Featured Posts''', id: '8:94', widget: this, componentName:r'''Featured Posts''');
                ComponentDescendantNotification(name: r'''Featured Posts''', id: '8:94', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_95 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 6''';
        final String name = r'''Depth 2, Frame 6''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_95({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_95 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_95(properties:properties);
        }
            @override
                _Widget_8_95State createState() => _Widget_8_95State(properties);
            }
            class _Widget_8_95State extends BaseState<Widget_8_95> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 122;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:95', componentName:r'''Depth 2, Frame 6''');
                
                _Widget_8_95State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 6''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 6');
            }            
            
            var painter = Node_8_95();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:95', widget: this, componentName:r'''Depth 2, Frame 6''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 6''', id: '8:95', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 122,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_96(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_96 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_96({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_96 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_96(properties:properties);
        }
            @override
                _Widget_8_96State createState() => _Widget_8_96State(properties);
            }
            class _Widget_8_96State extends BaseState<Widget_8_96> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 90;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:96', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_96State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_96();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:96', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:96', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 90,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_97(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_104(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_97 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_97({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_97 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_97(properties:properties);
        }
            @override
                _Widget_8_97State createState() => _Widget_8_97State(properties);
            }
            class _Widget_8_97State extends BaseState<Widget_8_97> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 90;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:97', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_97State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_97();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:97', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:97', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 90,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_98(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_100(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_102(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_98 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_98({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_98 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_98(properties:properties);
        }
            @override
                _Widget_8_98State createState() => _Widget_8_98State(properties);
            }
            class _Widget_8_98State extends BaseState<Widget_8_98> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:98', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_98State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_98();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:98', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:98', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_99(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_99 extends StatefulWidget {
            
        final String nodeName = r'''Community''';
        final String name = r'''Community''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_99({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_99 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_99(properties:properties);
        }
            @override
                _Widget_8_99State createState() => _Widget_8_99State(properties);
            }
            class _Widget_8_99State extends BaseState<Widget_8_99> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community''', id: '8:99', componentName:r'''Community''');
                
                _Widget_8_99State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community''', id: '8:99', widget: this, componentName:r'''Community''');
                ComponentDescendantNotification(name: r'''Community''', id: '8:99', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_100 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_100({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_100 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_100(properties:properties);
        }
            @override
                _Widget_8_100State createState() => _Widget_8_100State(properties);
            }
            class _Widget_8_100State extends BaseState<Widget_8_100> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:100', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_100State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_100();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:100', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:100', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_101(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_101 extends StatefulWidget {
            
        final String nodeName = r'''Looking for a reliable mechanic''';
        final String name = r'''Looking for a reliable mechanic''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_101({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_101 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_101(properties:properties);
        }
            @override
                _Widget_8_101State createState() => _Widget_8_101State(properties);
            }
            class _Widget_8_101State extends BaseState<Widget_8_101> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Looking for a reliable mechanic''', id: '8:101', componentName:r'''Looking for a reliable mechanic''');
                
                _Widget_8_101State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Looking for a reliable mechanic''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((40/20).floor()) <=1 ? 1 : (40/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Looking for a reliable mechanic''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Looking for a reliable mechanic');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Looking for a reliable mechanic''', id: '8:101', widget: this, componentName:r'''Looking for a reliable mechanic''');
                ComponentDescendantNotification(name: r'''Looking for a reliable mechanic''', id: '8:101', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 40,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_102 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 2''';
        final String name = r'''Depth 5, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_102({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_102 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_102(properties:properties);
        }
            @override
                _Widget_8_102State createState() => _Widget_8_102State(properties);
            }
            class _Widget_8_102State extends BaseState<Widget_8_102> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:102', componentName:r'''Depth 5, Frame 2''');
                
                _Widget_8_102State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 2');
            }            
            
            var painter = Node_8_102();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:102', widget: this, componentName:r'''Depth 5, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 2''', id: '8:102', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_103(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_103 extends StatefulWidget {
            
        final String nodeName = r'''Posted by Alex Chen''';
        final String name = r'''Posted by Alex Chen''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_103({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_103 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_103(properties:properties);
        }
            @override
                _Widget_8_103State createState() => _Widget_8_103State(properties);
            }
            class _Widget_8_103State extends BaseState<Widget_8_103> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Posted by Alex Chen''', id: '8:103', componentName:r'''Posted by Alex Chen''');
                
                _Widget_8_103State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Posted by Alex Chen''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Posted by Alex Chen''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Posted by Alex Chen');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Posted by Alex Chen''', id: '8:103', widget: this, componentName:r'''Posted by Alex Chen''');
                ComponentDescendantNotification(name: r'''Posted by Alex Chen''', id: '8:103', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_104 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_104({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_104 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_104(properties:properties);
        }
            @override
                _Widget_8_104State createState() => _Widget_8_104State(properties);
            }
            class _Widget_8_104State extends BaseState<Widget_8_104> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 90;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:104', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_104State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_104', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_104();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:104', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:104', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 90,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_105 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 7''';
        final String name = r'''Depth 2, Frame 7''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_105({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_105 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_105(properties:properties);
        }
            @override
                _Widget_8_105State createState() => _Widget_8_105State(properties);
            }
            class _Widget_8_105State extends BaseState<Widget_8_105> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:105', componentName:r'''Depth 2, Frame 7''');
                
                _Widget_8_105State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 7''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 7');
            }            
            
            var painter = Node_8_105();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:105', widget: this, componentName:r'''Depth 2, Frame 7''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 7''', id: '8:105', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_106(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_106 extends StatefulWidget {
            
        final String nodeName = r'''Popular Services''';
        final String name = r'''Popular Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_106({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_106 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_106(properties:properties);
        }
            @override
                _Widget_8_106State createState() => _Widget_8_106State(properties);
            }
            class _Widget_8_106State extends BaseState<Widget_8_106> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Popular Services''', id: '8:106', componentName:r'''Popular Services''');
                
                _Widget_8_106State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Popular Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Popular Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Popular Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Popular Services''', id: '8:106', widget: this, componentName:r'''Popular Services''');
                ComponentDescendantNotification(name: r'''Popular Services''', id: '8:106', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_107 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 8''';
        final String name = r'''Depth 2, Frame 8''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_107({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_107 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_107(properties:properties);
        }
            @override
                _Widget_8_107State createState() => _Widget_8_107State(properties);
            }
            class _Widget_8_107State extends BaseState<Widget_8_107> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 102;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 8''', id: '8:107', componentName:r'''Depth 2, Frame 8''');
                
                _Widget_8_107State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 8''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 8');
            }            
            
            var painter = Node_8_107();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 8''', id: '8:107', widget: this, componentName:r'''Depth 2, Frame 8''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 8''', id: '8:107', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 102,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_108(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_108 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_108({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_108 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_108(properties:properties);
        }
            @override
                _Widget_8_108State createState() => _Widget_8_108State(properties);
            }
            class _Widget_8_108State extends BaseState<Widget_8_108> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:108', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_108State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_108();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:108', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:108', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_109(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_116(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_109 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_109({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_109 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_109(properties:properties);
        }
            @override
                _Widget_8_109State createState() => _Widget_8_109State(properties);
            }
            class _Widget_8_109State extends BaseState<Widget_8_109> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:109', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_109State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_109();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:109', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:109', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_110(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_112(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_114(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_110 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_110({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_110 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_110(properties:properties);
        }
            @override
                _Widget_8_110State createState() => _Widget_8_110State(properties);
            }
            class _Widget_8_110State extends BaseState<Widget_8_110> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:110', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_110State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_110();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:110', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:110', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_111(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_111 extends StatefulWidget {
            
        final String nodeName = r'''4.8 • 120 reviews''';
        final String name = r'''4.8 • 120 reviews''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_111({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_111 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_111(properties:properties);
        }
            @override
                _Widget_8_111State createState() => _Widget_8_111State(properties);
            }
            class _Widget_8_111State extends BaseState<Widget_8_111> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4.8 • 120 reviews''', id: '8:111', componentName:r'''4.8 • 120 reviews''');
                
                _Widget_8_111State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4.8 • 120 reviews''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4.8 • 120 reviews''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, '4.8 • 120 reviews');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''4.8 • 120 reviews''', id: '8:111', widget: this, componentName:r'''4.8 • 120 reviews''');
                ComponentDescendantNotification(name: r'''4.8 • 120 reviews''', id: '8:111', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_112 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_112({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_112 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_112(properties:properties);
        }
            @override
                _Widget_8_112State createState() => _Widget_8_112State(properties);
            }
            class _Widget_8_112State extends BaseState<Widget_8_112> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:112', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_112State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_112();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:112', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:112', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_113(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_113 extends StatefulWidget {
            
        final String nodeName = r'''Mobile Tire Change''';
        final String name = r'''Mobile Tire Change''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_113({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_113 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_113(properties:properties);
        }
            @override
                _Widget_8_113State createState() => _Widget_8_113State(properties);
            }
            class _Widget_8_113State extends BaseState<Widget_8_113> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Mobile Tire Change''', id: '8:113', componentName:r'''Mobile Tire Change''');
                
                _Widget_8_113State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Mobile Tire Change''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Mobile Tire Change''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Mobile Tire Change');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Mobile Tire Change''', id: '8:113', widget: this, componentName:r'''Mobile Tire Change''');
                ComponentDescendantNotification(name: r'''Mobile Tire Change''', id: '8:113', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_114 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 2''';
        final String name = r'''Depth 5, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_114({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_114 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_114(properties:properties);
        }
            @override
                _Widget_8_114State createState() => _Widget_8_114State(properties);
            }
            class _Widget_8_114State extends BaseState<Widget_8_114> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:114', componentName:r'''Depth 5, Frame 2''');
                
                _Widget_8_114State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 2');
            }            
            
            var painter = Node_8_114();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:114', widget: this, componentName:r'''Depth 5, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 2''', id: '8:114', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_115(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_115 extends StatefulWidget {
            
        final String nodeName = r'''Fast and reliable service''';
        final String name = r'''Fast and reliable service''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_115({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_115 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_115(properties:properties);
        }
            @override
                _Widget_8_115State createState() => _Widget_8_115State(properties);
            }
            class _Widget_8_115State extends BaseState<Widget_8_115> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Fast and reliable service''', id: '8:115', componentName:r'''Fast and reliable service''');
                
                _Widget_8_115State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Fast and reliable service''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Fast and reliable service''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Fast and reliable service');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Fast and reliable service''', id: '8:115', widget: this, componentName:r'''Fast and reliable service''');
                ComponentDescendantNotification(name: r'''Fast and reliable service''', id: '8:115', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_116 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_116({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_116 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_116(properties:properties);
        }
            @override
                _Widget_8_116State createState() => _Widget_8_116State(properties);
            }
            class _Widget_8_116State extends BaseState<Widget_8_116> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:116', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_116State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_116', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_116();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:116', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:116', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_117 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 9''';
        final String name = r'''Depth 2, Frame 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_117({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_117 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_117(properties:properties);
        }
            @override
                _Widget_8_117State createState() => _Widget_8_117State(properties);
            }
            class _Widget_8_117State extends BaseState<Widget_8_117> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 102;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 9''', id: '8:117', componentName:r'''Depth 2, Frame 9''');
                
                _Widget_8_117State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 9');
            }            
            
            var painter = Node_8_117();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 9''', id: '8:117', widget: this, componentName:r'''Depth 2, Frame 9''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 9''', id: '8:117', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 102,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_118(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_118 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_118({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_118 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_118(properties:properties);
        }
            @override
                _Widget_8_118State createState() => _Widget_8_118State(properties);
            }
            class _Widget_8_118State extends BaseState<Widget_8_118> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:118', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_118State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_118();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:118', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:118', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_119(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_126(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_119 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_119({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_119 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_119(properties:properties);
        }
            @override
                _Widget_8_119State createState() => _Widget_8_119State(properties);
            }
            class _Widget_8_119State extends BaseState<Widget_8_119> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:119', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_119State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_119();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:119', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:119', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_120(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_122(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_124(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_120 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_120({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_120 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_120(properties:properties);
        }
            @override
                _Widget_8_120State createState() => _Widget_8_120State(properties);
            }
            class _Widget_8_120State extends BaseState<Widget_8_120> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:120', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_120State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_120();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:120', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:120', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_121(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_121 extends StatefulWidget {
            
        final String nodeName = r'''4.7 • 95 reviews''';
        final String name = r'''4.7 • 95 reviews''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_121({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_121 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_121(properties:properties);
        }
            @override
                _Widget_8_121State createState() => _Widget_8_121State(properties);
            }
            class _Widget_8_121State extends BaseState<Widget_8_121> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4.7 • 95 reviews''', id: '8:121', componentName:r'''4.7 • 95 reviews''');
                
                _Widget_8_121State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4.7 • 95 reviews''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4.7 • 95 reviews''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, '4.7 • 95 reviews');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''4.7 • 95 reviews''', id: '8:121', widget: this, componentName:r'''4.7 • 95 reviews''');
                ComponentDescendantNotification(name: r'''4.7 • 95 reviews''', id: '8:121', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_122 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_122({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_122 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_122(properties:properties);
        }
            @override
                _Widget_8_122State createState() => _Widget_8_122State(properties);
            }
            class _Widget_8_122State extends BaseState<Widget_8_122> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:122', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_122State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_122();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:122', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:122', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_123(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_123 extends StatefulWidget {
            
        final String nodeName = r'''Home Cleaning''';
        final String name = r'''Home Cleaning''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_123({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_123 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_123(properties:properties);
        }
            @override
                _Widget_8_123State createState() => _Widget_8_123State(properties);
            }
            class _Widget_8_123State extends BaseState<Widget_8_123> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home Cleaning''', id: '8:123', componentName:r'''Home Cleaning''');
                
                _Widget_8_123State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home Cleaning''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home Cleaning''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home Cleaning');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home Cleaning''', id: '8:123', widget: this, componentName:r'''Home Cleaning''');
                ComponentDescendantNotification(name: r'''Home Cleaning''', id: '8:123', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_124 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 2''';
        final String name = r'''Depth 5, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_124({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_124 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_124(properties:properties);
        }
            @override
                _Widget_8_124State createState() => _Widget_8_124State(properties);
            }
            class _Widget_8_124State extends BaseState<Widget_8_124> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:124', componentName:r'''Depth 5, Frame 2''');
                
                _Widget_8_124State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 2');
            }            
            
            var painter = Node_8_124();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 2''', id: '8:124', widget: this, componentName:r'''Depth 5, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 2''', id: '8:124', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_125(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_125 extends StatefulWidget {
            
        final String nodeName = r'''Professional cleaning service''';
        final String name = r'''Professional cleaning service''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_125({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_125 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_125(properties:properties);
        }
            @override
                _Widget_8_125State createState() => _Widget_8_125State(properties);
            }
            class _Widget_8_125State extends BaseState<Widget_8_125> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Professional cleaning service''', id: '8:125', componentName:r'''Professional cleaning service''');
                
                _Widget_8_125State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Professional cleaning service''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Professional cleaning service''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Professional cleaning service');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Professional cleaning service''', id: '8:125', widget: this, componentName:r'''Professional cleaning service''');
                ComponentDescendantNotification(name: r'''Professional cleaning service''', id: '8:125', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_126 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_126({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_126 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_126(properties:properties);
        }
            @override
                _Widget_8_126State createState() => _Widget_8_126State(properties);
            }
            class _Widget_8_126State extends BaseState<Widget_8_126> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 70;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:126', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_126State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_126', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_126();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:126', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:126', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 70,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_127 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 1''';
        final String name = r'''Depth 1, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_127({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_127 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_127(properties:properties);
        }
            @override
                _Widget_8_127State createState() => _Widget_8_127State(properties);
            }
            class _Widget_8_127State extends BaseState<Widget_8_127> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 95;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:127', componentName:r'''Depth 1, Frame 1''');
                
                _Widget_8_127State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 1');
            }            
            
            var painter = Node_8_127();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:127', widget: this, componentName:r'''Depth 1, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 1''', id: '8:127', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 95,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_128(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_157(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_128 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_128({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_128 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_128(properties:properties);
        }
            @override
                _Widget_8_128State createState() => _Widget_8_128State(properties);
            }
            class _Widget_8_128State extends BaseState<Widget_8_128> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 75;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:128', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_128State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_128();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:128', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:128', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 75,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_129(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_136(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_143(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_150(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_129 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_129({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_129 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_129(properties:properties);
        }
            @override
                _Widget_8_129State createState() => _Widget_8_129State(properties);
            }
            class _Widget_8_129State extends BaseState<Widget_8_129> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:129', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_129State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_129();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:129', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:129', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_130(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_134(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_130 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_130({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_130 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_130(properties:properties);
        }
            @override
                _Widget_8_130State createState() => _Widget_8_130State(properties);
            }
            class _Widget_8_130State extends BaseState<Widget_8_130> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:130', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_130State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_130();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:130', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:130', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_131(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_131 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_131({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_131 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_131(properties:properties);
        }
            @override
                _Widget_8_131State createState() => _Widget_8_131State(properties);
            }
            class _Widget_8_131State extends BaseState<Widget_8_131> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:131', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_131State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_131();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:131', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:131', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_132())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_133()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_132 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_132({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_132 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_132(properties:properties);
        }
            @override
                _Widget_8_132State createState() => _Widget_8_132State(properties);
            }
            class _Widget_8_132State extends BaseState<Widget_8_132> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:132', componentName:r'''Vector - 0''');
                
                _Widget_8_132State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_132();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:132', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:132', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_133 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_133({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_133 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_133(properties:properties);
        }
            @override
                _Widget_8_133State createState() => _Widget_8_133State(properties);
            }
            class _Widget_8_133State extends BaseState<Widget_8_133> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:133', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_133State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_133();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:133', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:133', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_134 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_134({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_134 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_134(properties:properties);
        }
            @override
                _Widget_8_134State createState() => _Widget_8_134State(properties);
            }
            class _Widget_8_134State extends BaseState<Widget_8_134> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:134', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_134State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_134();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:134', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:134', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_135(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_135 extends StatefulWidget {
            
        final String nodeName = r'''Home''';
        final String name = r'''Home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_135({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_135 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_135(properties:properties);
        }
            @override
                _Widget_8_135State createState() => _Widget_8_135State(properties);
            }
            class _Widget_8_135State extends BaseState<Widget_8_135> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home''', id: '8:135', componentName:r'''Home''');
                
                _Widget_8_135State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home''', id: '8:135', widget: this, componentName:r'''Home''');
                ComponentDescendantNotification(name: r'''Home''', id: '8:135', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_136 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_136({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_136 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_136(properties:properties);
        }
            @override
                _Widget_8_136State createState() => _Widget_8_136State(properties);
            }
            class _Widget_8_136State extends BaseState<Widget_8_136> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:136', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_136State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_136();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:136', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:136', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_158(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_137(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_141(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_137 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_137({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_137 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_137(properties:properties);
        }
            @override
                _Widget_8_137State createState() => _Widget_8_137State(properties);
            }
            class _Widget_8_137State extends BaseState<Widget_8_137> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:137', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_137State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_137();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:137', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:137', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_138(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_138 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_138({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_138 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_138(properties:properties);
        }
            @override
                _Widget_8_138State createState() => _Widget_8_138State(properties);
            }
            class _Widget_8_138State extends BaseState<Widget_8_138> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:138', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_138State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_138();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:138', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:138', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_139())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 18,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_140()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_139 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_139({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_139 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_139(properties:properties);
        }
            @override
                _Widget_8_139State createState() => _Widget_8_139State(properties);
            }
            class _Widget_8_139State extends BaseState<Widget_8_139> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:139', componentName:r'''Vector - 0''');
                
                _Widget_8_139State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_139();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:139', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:139', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_140 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_140({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_140 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_140(properties:properties);
        }
            @override
                _Widget_8_140State createState() => _Widget_8_140State(properties);
            }
            class _Widget_8_140State extends BaseState<Widget_8_140> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:140', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_140State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_140();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:140', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:140', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_141 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_141({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_141 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_141(properties:properties);
        }
            @override
                _Widget_8_141State createState() => _Widget_8_141State(properties);
            }
            class _Widget_8_141State extends BaseState<Widget_8_141> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:141', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_141State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_141();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:141', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:141', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_142(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_142 extends StatefulWidget {
            
        final String nodeName = r'''Services''';
        final String name = r'''Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_142({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_142 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_142(properties:properties);
        }
            @override
                _Widget_8_142State createState() => _Widget_8_142State(properties);
            }
            class _Widget_8_142State extends BaseState<Widget_8_142> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Services''', id: '8:142', componentName:r'''Services''');
                
                _Widget_8_142State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Services''', id: '8:142', widget: this, componentName:r'''Services''');
                ComponentDescendantNotification(name: r'''Services''', id: '8:142', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_143 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_143({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_143 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_143(properties:properties);
        }
            @override
                _Widget_8_143State createState() => _Widget_8_143State(properties);
            }
            class _Widget_8_143State extends BaseState<Widget_8_143> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:143', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_143State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_143();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:143', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:143', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_292(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_144(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_148(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_144 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_144({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_144 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_144(properties:properties);
        }
            @override
                _Widget_8_144State createState() => _Widget_8_144State(properties);
            }
            class _Widget_8_144State extends BaseState<Widget_8_144> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:144', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_144State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_144();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:144', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:144', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_145(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_145 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_145({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_145 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_145(properties:properties);
        }
            @override
                _Widget_8_145State createState() => _Widget_8_145State(properties);
            }
            class _Widget_8_145State extends BaseState<Widget_8_145> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:145', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_145State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_145();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:145', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:145', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_146())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_147()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_146 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_146({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_146 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_146(properties:properties);
        }
            @override
                _Widget_8_146State createState() => _Widget_8_146State(properties);
            }
            class _Widget_8_146State extends BaseState<Widget_8_146> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:146', componentName:r'''Vector - 0''');
                
                _Widget_8_146State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_146();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:146', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:146', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_147 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_147({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_147 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_147(properties:properties);
        }
            @override
                _Widget_8_147State createState() => _Widget_8_147State(properties);
            }
            class _Widget_8_147State extends BaseState<Widget_8_147> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:147', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_147State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_147();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:147', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:147', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_148 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_148({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_148 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_148(properties:properties);
        }
            @override
                _Widget_8_148State createState() => _Widget_8_148State(properties);
            }
            class _Widget_8_148State extends BaseState<Widget_8_148> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:148', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_148State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_148();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:148', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:148', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_149(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_149 extends StatefulWidget {
            
        final String nodeName = r'''Community''';
        final String name = r'''Community''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_149({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_149 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_149(properties:properties);
        }
            @override
                _Widget_8_149State createState() => _Widget_8_149State(properties);
            }
            class _Widget_8_149State extends BaseState<Widget_8_149> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community''', id: '8:149', componentName:r'''Community''');
                
                _Widget_8_149State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community''', id: '8:149', widget: this, componentName:r'''Community''');
                ComponentDescendantNotification(name: r'''Community''', id: '8:149', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_150 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 3''';
        final String name = r'''Depth 3, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_150({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_150 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_150(properties:properties);
        }
            @override
                _Widget_8_150State createState() => _Widget_8_150State(properties);
            }
            class _Widget_8_150State extends BaseState<Widget_8_150> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:150', componentName:r'''Depth 3, Frame 3''');
                
                _Widget_8_150State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 3');
            }            
            
            var painter = Node_8_150();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:150', widget: this, componentName:r'''Depth 3, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 3''', id: '8:150', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_370(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_151(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_155(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_151 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_151({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_151 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_151(properties:properties);
        }
            @override
                _Widget_8_151State createState() => _Widget_8_151State(properties);
            }
            class _Widget_8_151State extends BaseState<Widget_8_151> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:151', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_151State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_151();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:151', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:151', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_152(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_152 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_152({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_152 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_152(properties:properties);
        }
            @override
                _Widget_8_152State createState() => _Widget_8_152State(properties);
            }
            class _Widget_8_152State extends BaseState<Widget_8_152> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:152', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_152State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_152();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:152', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:152', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_153())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_154()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_153 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_153({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_153 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_153(properties:properties);
        }
            @override
                _Widget_8_153State createState() => _Widget_8_153State(properties);
            }
            class _Widget_8_153State extends BaseState<Widget_8_153> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:153', componentName:r'''Vector - 0''');
                
                _Widget_8_153State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_153();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:153', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:153', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_154 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_154({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_154 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_154(properties:properties);
        }
            @override
                _Widget_8_154State createState() => _Widget_8_154State(properties);
            }
            class _Widget_8_154State extends BaseState<Widget_8_154> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:154', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_154State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_154();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:154', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:154', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_155 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_155({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_155 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_155(properties:properties);
        }
            @override
                _Widget_8_155State createState() => _Widget_8_155State(properties);
            }
            class _Widget_8_155State extends BaseState<Widget_8_155> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:155', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_155State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_155();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:155', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:155', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_156(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_156 extends StatefulWidget {
            
        final String nodeName = r'''Profile''';
        final String name = r'''Profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_156({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_156 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_156(properties:properties);
        }
            @override
                _Widget_8_156State createState() => _Widget_8_156State(properties);
            }
            class _Widget_8_156State extends BaseState<Widget_8_156> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Profile''', id: '8:156', componentName:r'''Profile''');
                
                _Widget_8_156State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Profile''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Profile');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Profile''', id: '8:156', widget: this, componentName:r'''Profile''');
                ComponentDescendantNotification(name: r'''Profile''', id: '8:156', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_157 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_157({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_157 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_157(properties:properties);
        }
            @override
                _Widget_8_157State createState() => _Widget_8_157State(properties);
            }
            class _Widget_8_157State extends BaseState<Widget_8_157> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:157', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_157State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_157();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:157', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:157', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_158 extends StatefulWidget {
            
        final String nodeName = r'''service''';
        final String name = r'''service''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_158({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_158 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_158(properties:properties);
        }
            @override
                _Widget_8_158State createState() => _Widget_8_158State(properties);
            }
            class _Widget_8_158State extends BaseState<Widget_8_158> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 928;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''service''', id: '8:158', componentName:r'''service''');
                
                _Widget_8_158State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''service''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'service');
            }            
            
            var painter = Node_8_158();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''service''', id: '8:158', widget: this, componentName:r'''service''');
                ComponentDescendantNotification(name: r'''service''', id: '8:158', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 928,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_159(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_159 extends StatefulWidget {
            
        final String nodeName = r'''Depth 0, Frame 0''';
        final String name = r'''Depth 0, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_159({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_159 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_159(properties:properties);
        }
            @override
                _Widget_8_159State createState() => _Widget_8_159State(properties);
            }
            class _Widget_8_159State extends BaseState<Widget_8_159> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 928;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:159', componentName:r'''Depth 0, Frame 0''');
                
                _Widget_8_159State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 0, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 0, Frame 0');
            }            
            
            var painter = Node_8_159();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:159', widget: this, componentName:r'''Depth 0, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 0, Frame 0''', id: '8:159', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 928,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_160(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_261(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_160 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 0''';
        final String name = r'''Depth 1, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_160({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_160 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_160(properties:properties);
        }
            @override
                _Widget_8_160State createState() => _Widget_8_160State(properties);
            }
            class _Widget_8_160State extends BaseState<Widget_8_160> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 833;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:160', componentName:r'''Depth 1, Frame 0''');
                
                _Widget_8_160State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 0');
            }            
            
            var painter = Node_8_160();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:160', widget: this, componentName:r'''Depth 1, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 0''', id: '8:160', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 833,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_161(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_170(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_179(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_181(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_217(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_219(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_233(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_247(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_161 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_161({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_161 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_161(properties:properties);
        }
            @override
                _Widget_8_161State createState() => _Widget_8_161State(properties);
            }
            class _Widget_8_161State extends BaseState<Widget_8_161> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 72;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:161', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_161State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_161();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:161', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:161', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 72,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_162(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_164(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_162 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_162({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_162 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_162(properties:properties);
        }
            @override
                _Widget_8_162State createState() => _Widget_8_162State(properties);
            }
            class _Widget_8_162State extends BaseState<Widget_8_162> {
                bool visible = true;
                bool isLoaded = false;
                double width = 310;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:162', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_162State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_162();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:162', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:162', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 310,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_163(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_163 extends StatefulWidget {
            
        final String nodeName = r'''Service''';
        final String name = r'''Service''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_163({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_163 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_163(properties:properties);
        }
            @override
                _Widget_8_163State createState() => _Widget_8_163State(properties);
            }
            class _Widget_8_163State extends BaseState<Widget_8_163> {
                bool visible = true;
                bool isLoaded = false;
                double width = 262;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Service''', id: '8:163', componentName:r'''Service''');
                
                _Widget_8_163State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Service''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Service''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Service');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Service''', id: '8:163', widget: this, componentName:r'''Service''');
                ComponentDescendantNotification(name: r'''Service''', id: '8:163', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 262,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_164 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_164({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_164 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_164(properties:properties);
        }
            @override
                _Widget_8_164State createState() => _Widget_8_164State(properties);
            }
            class _Widget_8_164State extends BaseState<Widget_8_164> {
                bool visible = true;
                bool isLoaded = false;
                double width = 48;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:164', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_164State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_164();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:164', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:164', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 48,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_165(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_165 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_165({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_165 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_165(properties:properties);
        }
            @override
                _Widget_8_165State createState() => _Widget_8_165State(properties);
            }
            class _Widget_8_165State extends BaseState<Widget_8_165> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:165', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_165State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_165();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:165', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:165', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_166(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_166 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_166({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_166 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_166(properties:properties);
        }
            @override
                _Widget_8_166State createState() => _Widget_8_166State(properties);
            }
            class _Widget_8_166State extends BaseState<Widget_8_166> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:166', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_166State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_166();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:166', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:166', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_167(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_167 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_167({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_167 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_167(properties:properties);
        }
            @override
                _Widget_8_167State createState() => _Widget_8_167State(properties);
            }
            class _Widget_8_167State extends BaseState<Widget_8_167> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:167', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_167State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_167();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:167', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:167', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_168())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_169()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_168 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_168({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_168 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_168(properties:properties);
        }
            @override
                _Widget_8_168State createState() => _Widget_8_168State(properties);
            }
            class _Widget_8_168State extends BaseState<Widget_8_168> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:168', componentName:r'''Vector - 0''');
                
                _Widget_8_168State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_168();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:168', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:168', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_169 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_169({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_169 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_169(properties:properties);
        }
            @override
                _Widget_8_169State createState() => _Widget_8_169State(properties);
            }
            class _Widget_8_169State extends BaseState<Widget_8_169> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:169', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_169State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_169();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:169', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:169', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_170 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_170({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_170 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_170(properties:properties);
        }
            @override
                _Widget_8_170State createState() => _Widget_8_170State(properties);
            }
            class _Widget_8_170State extends BaseState<Widget_8_170> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 72;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:170', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_170State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_170();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:170', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:170', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 72,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_171(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_171 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_171({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_171 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_171(properties:properties);
        }
            @override
                _Widget_8_171State createState() => _Widget_8_171State(properties);
            }
            class _Widget_8_171State extends BaseState<Widget_8_171> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:171', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_171State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_171();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:171', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:171', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_172(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_172 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_172({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_172 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_172(properties:properties);
        }
            @override
                _Widget_8_172State createState() => _Widget_8_172State(properties);
            }
            class _Widget_8_172State extends BaseState<Widget_8_172> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:172', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_172State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_172();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:172', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:172', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_173(key:UniqueKey()), 
                                                    const SizedBox(width: 0), 
                                                    Widget_8_177(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_173 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_173({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_173 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_173(properties:properties);
        }
            @override
                _Widget_8_173State createState() => _Widget_8_173State(properties);
            }
            class _Widget_8_173State extends BaseState<Widget_8_173> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:173', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_173State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_173();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:173', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:173', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_174(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_174 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_174({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_174 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_174(properties:properties);
        }
            @override
                _Widget_8_174State createState() => _Widget_8_174State(properties);
            }
            class _Widget_8_174State extends BaseState<Widget_8_174> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:174', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_174State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_174();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:174', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:174', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_175())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_176()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_175 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_175({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_175 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_175(properties:properties);
        }
            @override
                _Widget_8_175State createState() => _Widget_8_175State(properties);
            }
            class _Widget_8_175State extends BaseState<Widget_8_175> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:175', componentName:r'''Vector - 0''');
                
                _Widget_8_175State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_175();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:175', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:175', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_176 extends StatefulWidget {
            
        final String nodeName = r'''Depth 7, Frame 0''';
        final String name = r'''Depth 7, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_176({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_176 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_176(properties:properties);
        }
            @override
                _Widget_8_176State createState() => _Widget_8_176State(properties);
            }
            class _Widget_8_176State extends BaseState<Widget_8_176> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:176', componentName:r'''Depth 7, Frame 0''');
                
                _Widget_8_176State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 7, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 7, Frame 0');
            }            
            
            var painter = Node_8_176();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 7, Frame 0''', id: '8:176', widget: this, componentName:r'''Depth 7, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 7, Frame 0''', id: '8:176', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_177 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_177({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_177 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_177(properties:properties);
        }
            @override
                _Widget_8_177State createState() => _Widget_8_177State(properties);
            }
            class _Widget_8_177State extends BaseState<Widget_8_177> {
                bool visible = true;
                bool isLoaded = false;
                double width = 318;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:177', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_177State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_177();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:177', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:177', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 318,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_178(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_178 extends StatefulWidget {
            
        final String nodeName = r'''Search  for services''';
        final String name = r'''Search  for services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_178({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_178 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_178(properties:properties);
        }
            @override
                _Widget_8_178State createState() => _Widget_8_178State(properties);
            }
            class _Widget_8_178State extends BaseState<Widget_8_178> {
                bool visible = true;
                bool isLoaded = false;
                double width = 95.109375;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Search  for services''', id: '8:178', componentName:r'''Search  for services''');
                
                _Widget_8_178State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Search  for services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Search  for services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Search  for services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Search  for services''', id: '8:178', widget: this, componentName:r'''Search  for services''');
                ComponentDescendantNotification(name: r'''Search  for services''', id: '8:178', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 95.109375,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_179 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 2''';
        final String name = r'''Depth 2, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_179({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_179 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_179(properties:properties);
        }
            @override
                _Widget_8_179State createState() => _Widget_8_179State(properties);
            }
            class _Widget_8_179State extends BaseState<Widget_8_179> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:179', componentName:r'''Depth 2, Frame 2''');
                
                _Widget_8_179State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 2');
            }            
            
            var painter = Node_8_179();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:179', widget: this, componentName:r'''Depth 2, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 2''', id: '8:179', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_180(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_180 extends StatefulWidget {
            
        final String nodeName = r'''Categories''';
        final String name = r'''Categories''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_180({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_180 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_180(properties:properties);
        }
            @override
                _Widget_8_180State createState() => _Widget_8_180State(properties);
            }
            class _Widget_8_180State extends BaseState<Widget_8_180> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Categories''', id: '8:180', componentName:r'''Categories''');
                
                _Widget_8_180State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Categories''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Categories''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Categories');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Categories''', id: '8:180', widget: this, componentName:r'''Categories''');
                ComponentDescendantNotification(name: r'''Categories''', id: '8:180', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_181 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 3''';
        final String name = r'''Depth 2, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_181({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_181 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_181(properties:properties);
        }
            @override
                _Widget_8_181State createState() => _Widget_8_181State(properties);
            }
            class _Widget_8_181State extends BaseState<Widget_8_181> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:181', componentName:r'''Depth 2, Frame 3''');
                
                _Widget_8_181State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 3');
            }            
            
            var painter = Node_8_181();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:181', widget: this, componentName:r'''Depth 2, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 3''', id: '8:181', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_182(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_189(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_196(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_203(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_210(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_182 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_182({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_182 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_182(properties:properties);
        }
            @override
                _Widget_8_182State createState() => _Widget_8_182State(properties);
            }
            class _Widget_8_182State extends BaseState<Widget_8_182> {
                bool visible = true;
                bool isLoaded = false;
                double width = 70;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:182', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_182State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_182();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:182', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:182', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 70,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_183(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_187(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_183 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_183({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_183 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_183(properties:properties);
        }
            @override
                _Widget_8_183State createState() => _Widget_8_183State(properties);
            }
            class _Widget_8_183State extends BaseState<Widget_8_183> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:183', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_183State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_183();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:183', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:183', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_184(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_184 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_184({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_184 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_184(properties:properties);
        }
            @override
                _Widget_8_184State createState() => _Widget_8_184State(properties);
            }
            class _Widget_8_184State extends BaseState<Widget_8_184> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:184', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_184State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_184();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:184', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:184', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: const Widget_8_185())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 15 + 0, maxWidth: 15 + 0,
                                                                        minHeight: 11 + 0, maxHeight: 11 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 15,
                                                                        height: 11,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_186()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_185 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_185({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_185 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_185(properties:properties);
        }
            @override
                _Widget_8_185State createState() => _Widget_8_185State(properties);
            }
            class _Widget_8_185State extends BaseState<Widget_8_185> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:185', componentName:r'''Vector - 0''');
                
                _Widget_8_185State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_185();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:185', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:185', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_186 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_186({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_186 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_186(properties:properties);
        }
            @override
                _Widget_8_186State createState() => _Widget_8_186State(properties);
            }
            class _Widget_8_186State extends BaseState<Widget_8_186> {
                bool visible = true;
                bool isLoaded = false;
                double width = 15;
                double height = 11;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:186', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_186State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_186();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:186', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:186', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 15,
                                height: 11,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_187 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_187({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_187 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_187(properties:properties);
        }
            @override
                _Widget_8_187State createState() => _Widget_8_187State(properties);
            }
            class _Widget_8_187State extends BaseState<Widget_8_187> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:187', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_187State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_187();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:187', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:187', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_188(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_188 extends StatefulWidget {
            
        final String nodeName = r'''All''';
        final String name = r'''All''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_188({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_188 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_188(properties:properties);
        }
            @override
                _Widget_8_188State createState() => _Widget_8_188State(properties);
            }
            class _Widget_8_188State extends BaseState<Widget_8_188> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''All''', id: '8:188', componentName:r'''All''');
                
                _Widget_8_188State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''All''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''All''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'All');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''All''', id: '8:188', widget: this, componentName:r'''All''');
                ComponentDescendantNotification(name: r'''All''', id: '8:188', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_189 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_189({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_189 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_189(properties:properties);
        }
            @override
                _Widget_8_189State createState() => _Widget_8_189State(properties);
            }
            class _Widget_8_189State extends BaseState<Widget_8_189> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:189', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_189State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_189();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:189', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:189', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 155,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_190(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_194(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_190 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_190({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_190 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_190(properties:properties);
        }
            @override
                _Widget_8_190State createState() => _Widget_8_190State(properties);
            }
            class _Widget_8_190State extends BaseState<Widget_8_190> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:190', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_190State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_190();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:190', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:190', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_191(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_191 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_191({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_191 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_191(properties:properties);
        }
            @override
                _Widget_8_191State createState() => _Widget_8_191State(properties);
            }
            class _Widget_8_191State extends BaseState<Widget_8_191> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:191', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_191State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_191();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:191', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:191', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: const Widget_8_192())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 15 + 0, maxWidth: 15 + 0,
                                                                        minHeight: 16 + 0, maxHeight: 16 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 15,
                                                                        height: 16,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_193()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_192 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_192({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_192 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_192(properties:properties);
        }
            @override
                _Widget_8_192State createState() => _Widget_8_192State(properties);
            }
            class _Widget_8_192State extends BaseState<Widget_8_192> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:192', componentName:r'''Vector - 0''');
                
                _Widget_8_192State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_192();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:192', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:192', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_193 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_193({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_193 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_193(properties:properties);
        }
            @override
                _Widget_8_193State createState() => _Widget_8_193State(properties);
            }
            class _Widget_8_193State extends BaseState<Widget_8_193> {
                bool visible = true;
                bool isLoaded = false;
                double width = 15;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:193', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_193State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_193();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:193', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:193', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 15,
                                height: 16,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_194 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_194({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_194 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_194(properties:properties);
        }
            @override
                _Widget_8_194State createState() => _Widget_8_194State(properties);
            }
            class _Widget_8_194State extends BaseState<Widget_8_194> {
                bool visible = true;
                bool isLoaded = false;
                double width = 103;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:194', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_194State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_194();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:194', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:194', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 103,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_195(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_195 extends StatefulWidget {
            
        final String nodeName = r'''Home Services''';
        final String name = r'''Home Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_195({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_195 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_195(properties:properties);
        }
            @override
                _Widget_8_195State createState() => _Widget_8_195State(properties);
            }
            class _Widget_8_195State extends BaseState<Widget_8_195> {
                bool visible = true;
                bool isLoaded = false;
                double width = 103;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home Services''', id: '8:195', componentName:r'''Home Services''');
                
                _Widget_8_195State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home Services''', id: '8:195', widget: this, componentName:r'''Home Services''');
                ComponentDescendantNotification(name: r'''Home Services''', id: '8:195', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 103,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_196 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_196({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_196 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_196(properties:properties);
        }
            @override
                _Widget_8_196State createState() => _Widget_8_196State(properties);
            }
            class _Widget_8_196State extends BaseState<Widget_8_196> {
                bool visible = true;
                bool isLoaded = false;
                double width = 149;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:196', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_196State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_196();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:196', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:196', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 149,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_197(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_201(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_197 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_197({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_197 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_197(properties:properties);
        }
            @override
                _Widget_8_197State createState() => _Widget_8_197State(properties);
            }
            class _Widget_8_197State extends BaseState<Widget_8_197> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:197', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_197State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_197();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:197', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:197', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_198(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_198 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_198({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_198 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_198(properties:properties);
        }
            @override
                _Widget_8_198State createState() => _Widget_8_198State(properties);
            }
            class _Widget_8_198State extends BaseState<Widget_8_198> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:198', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_198State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_198();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:198', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:198', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: const Widget_8_199())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 16 + 0, maxWidth: 16 + 0,
                                                                        minHeight: 16 + 0, maxHeight: 16 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 16,
                                                                        height: 16,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_200()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_199 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_199({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_199 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_199(properties:properties);
        }
            @override
                _Widget_8_199State createState() => _Widget_8_199State(properties);
            }
            class _Widget_8_199State extends BaseState<Widget_8_199> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:199', componentName:r'''Vector - 0''');
                
                _Widget_8_199State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_199();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:199', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:199', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_200 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_200({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_200 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_200(properties:properties);
        }
            @override
                _Widget_8_200State createState() => _Widget_8_200State(properties);
            }
            class _Widget_8_200State extends BaseState<Widget_8_200> {
                bool visible = true;
                bool isLoaded = false;
                double width = 16;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:200', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_200State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_200();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:200', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:200', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 16,
                                height: 16,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_201 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_201({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_201 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_201(properties:properties);
        }
            @override
                _Widget_8_201State createState() => _Widget_8_201State(properties);
            }
            class _Widget_8_201State extends BaseState<Widget_8_201> {
                bool visible = true;
                bool isLoaded = false;
                double width = 97;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:201', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_201State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_201();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:201', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:201', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 97,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_202(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_202 extends StatefulWidget {
            
        final String nodeName = r'''Personal Care''';
        final String name = r'''Personal Care''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_202({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_202 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_202(properties:properties);
        }
            @override
                _Widget_8_202State createState() => _Widget_8_202State(properties);
            }
            class _Widget_8_202State extends BaseState<Widget_8_202> {
                bool visible = true;
                bool isLoaded = false;
                double width = 97;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Personal Care''', id: '8:202', componentName:r'''Personal Care''');
                
                _Widget_8_202State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Personal Care''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Personal Care''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Personal Care');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Personal Care''', id: '8:202', widget: this, componentName:r'''Personal Care''');
                ComponentDescendantNotification(name: r'''Personal Care''', id: '8:202', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 97,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_203 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 3''';
        final String name = r'''Depth 3, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_203({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_203 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_203(properties:properties);
        }
            @override
                _Widget_8_203State createState() => _Widget_8_203State(properties);
            }
            class _Widget_8_203State extends BaseState<Widget_8_203> {
                bool visible = true;
                bool isLoaded = false;
                double width = 123;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:203', componentName:r'''Depth 3, Frame 3''');
                
                _Widget_8_203State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 3');
            }            
            
            var painter = Node_8_203();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:203', widget: this, componentName:r'''Depth 3, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 3''', id: '8:203', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 123,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_204(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_208(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_204 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_204({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_204 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_204(properties:properties);
        }
            @override
                _Widget_8_204State createState() => _Widget_8_204State(properties);
            }
            class _Widget_8_204State extends BaseState<Widget_8_204> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:204', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_204State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_204();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:204', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:204', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_205(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_205 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_205({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_205 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_205(properties:properties);
        }
            @override
                _Widget_8_205State createState() => _Widget_8_205State(properties);
            }
            class _Widget_8_205State extends BaseState<Widget_8_205> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:205', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_205State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_205();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:205', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:205', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: const Widget_8_206())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 17 + 0, maxHeight: 17 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 17,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_207()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_206 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_206({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_206 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_206(properties:properties);
        }
            @override
                _Widget_8_206State createState() => _Widget_8_206State(properties);
            }
            class _Widget_8_206State extends BaseState<Widget_8_206> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:206', componentName:r'''Vector - 0''');
                
                _Widget_8_206State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_206();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:206', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:206', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_207 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_207({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_207 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_207(properties:properties);
        }
            @override
                _Widget_8_207State createState() => _Widget_8_207State(properties);
            }
            class _Widget_8_207State extends BaseState<Widget_8_207> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 17;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:207', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_207State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_207();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:207', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:207', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 17,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_208 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_208({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_208 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_208(properties:properties);
        }
            @override
                _Widget_8_208State createState() => _Widget_8_208State(properties);
            }
            class _Widget_8_208State extends BaseState<Widget_8_208> {
                bool visible = true;
                bool isLoaded = false;
                double width = 71;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:208', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_208State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_208();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:208', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:208', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 71,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_209(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_209 extends StatefulWidget {
            
        final String nodeName = r'''Education''';
        final String name = r'''Education''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_209({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_209 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_209(properties:properties);
        }
            @override
                _Widget_8_209State createState() => _Widget_8_209State(properties);
            }
            class _Widget_8_209State extends BaseState<Widget_8_209> {
                bool visible = true;
                bool isLoaded = false;
                double width = 71;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Education''', id: '8:209', componentName:r'''Education''');
                
                _Widget_8_209State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Education''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Education''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Education');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Education''', id: '8:209', widget: this, componentName:r'''Education''');
                ComponentDescendantNotification(name: r'''Education''', id: '8:209', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 71,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_210 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 4''';
        final String name = r'''Depth 3, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_210({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_210 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_210(properties:properties);
        }
            @override
                _Widget_8_210State createState() => _Widget_8_210State(properties);
            }
            class _Widget_8_210State extends BaseState<Widget_8_210> {
                bool visible = true;
                bool isLoaded = false;
                double width = 99;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 4''', id: '8:210', componentName:r'''Depth 3, Frame 4''');
                
                _Widget_8_210State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 4');
            }            
            
            var painter = Node_8_210();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 4''', id: '8:210', widget: this, componentName:r'''Depth 3, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 4''', id: '8:210', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 99,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_211(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_215(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_211 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_211({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_211 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_211(properties:properties);
        }
            @override
                _Widget_8_211State createState() => _Widget_8_211State(properties);
            }
            class _Widget_8_211State extends BaseState<Widget_8_211> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:211', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_211State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_211();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:211', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:211', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_212(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_212 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_212({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_212 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_212(properties:properties);
        }
            @override
                _Widget_8_212State createState() => _Widget_8_212State(properties);
            }
            class _Widget_8_212State extends BaseState<Widget_8_212> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:212', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_212State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_212();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:212', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:212', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: const Widget_8_213())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 15 + 0, maxWidth: 15 + 0,
                                                                        minHeight: 16 + 0, maxHeight: 16 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 15,
                                                                        height: 16,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_214()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_213 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_213({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_213 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_213(properties:properties);
        }
            @override
                _Widget_8_213State createState() => _Widget_8_213State(properties);
            }
            class _Widget_8_213State extends BaseState<Widget_8_213> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:213', componentName:r'''Vector - 0''');
                
                _Widget_8_213State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_213();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:213', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:213', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_214 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_214({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_214 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_214(properties:properties);
        }
            @override
                _Widget_8_214State createState() => _Widget_8_214State(properties);
            }
            class _Widget_8_214State extends BaseState<Widget_8_214> {
                bool visible = true;
                bool isLoaded = false;
                double width = 15;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:214', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_214State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_214();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:214', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:214', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 15,
                                height: 16,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_215 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_215({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_215 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_215(properties:properties);
        }
            @override
                _Widget_8_215State createState() => _Widget_8_215State(properties);
            }
            class _Widget_8_215State extends BaseState<Widget_8_215> {
                bool visible = true;
                bool isLoaded = false;
                double width = 47;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:215', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_215State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_215();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:215', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:215', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 47,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_216(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_216 extends StatefulWidget {
            
        final String nodeName = r'''Events''';
        final String name = r'''Events''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_216({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_216 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_216(properties:properties);
        }
            @override
                _Widget_8_216State createState() => _Widget_8_216State(properties);
            }
            class _Widget_8_216State extends BaseState<Widget_8_216> {
                bool visible = true;
                bool isLoaded = false;
                double width = 47;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Events''', id: '8:216', componentName:r'''Events''');
                
                _Widget_8_216State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Events''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Events''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Events');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Events''', id: '8:216', widget: this, componentName:r'''Events''');
                ComponentDescendantNotification(name: r'''Events''', id: '8:216', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 47,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_217 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 4''';
        final String name = r'''Depth 2, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_217({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_217 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_217(properties:properties);
        }
            @override
                _Widget_8_217State createState() => _Widget_8_217State(properties);
            }
            class _Widget_8_217State extends BaseState<Widget_8_217> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:217', componentName:r'''Depth 2, Frame 4''');
                
                _Widget_8_217State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 4');
            }            
            
            var painter = Node_8_217();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:217', widget: this, componentName:r'''Depth 2, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 4''', id: '8:217', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_218(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_218 extends StatefulWidget {
            
        final String nodeName = r'''Popular Services''';
        final String name = r'''Popular Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_218({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_218 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_218(properties:properties);
        }
            @override
                _Widget_8_218State createState() => _Widget_8_218State(properties);
            }
            class _Widget_8_218State extends BaseState<Widget_8_218> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Popular Services''', id: '8:218', componentName:r'''Popular Services''');
                
                _Widget_8_218State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Popular Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Popular Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Popular Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Popular Services''', id: '8:218', widget: this, componentName:r'''Popular Services''');
                ComponentDescendantNotification(name: r'''Popular Services''', id: '8:218', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_219 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 5''';
        final String name = r'''Depth 2, Frame 5''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_219({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_219 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_219(properties:properties);
        }
            @override
                _Widget_8_219State createState() => _Widget_8_219State(properties);
            }
            class _Widget_8_219State extends BaseState<Widget_8_219> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 171;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:219', componentName:r'''Depth 2, Frame 5''');
                
                _Widget_8_219State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 5''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 5');
            }            
            
            var painter = Node_8_219();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:219', widget: this, componentName:r'''Depth 2, Frame 5''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 5''', id: '8:219', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 171,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_220(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_220 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_220({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_220 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_220(properties:properties);
        }
            @override
                _Widget_8_220State createState() => _Widget_8_220State(properties);
            }
            class _Widget_8_220State extends BaseState<Widget_8_220> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:220', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_220State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_220();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:220', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:220', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_221(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_232(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_221 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_221({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_221 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_221(properties:properties);
        }
            @override
                _Widget_8_221State createState() => _Widget_8_221State(properties);
            }
            class _Widget_8_221State extends BaseState<Widget_8_221> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:221', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_221State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_221();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:221', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:221', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_222(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 16), 
                                                    Widget_8_229(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_222 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_222({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_222 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_222(properties:properties);
        }
            @override
                _Widget_8_222State createState() => _Widget_8_222State(properties);
            }
            class _Widget_8_222State extends BaseState<Widget_8_222> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 91;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:222', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_222State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_222();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:222', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:222', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 91,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_223(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_225(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_227(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_223 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_223({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_223 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_223(properties:properties);
        }
            @override
                _Widget_8_223State createState() => _Widget_8_223State(properties);
            }
            class _Widget_8_223State extends BaseState<Widget_8_223> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:223', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_223State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_223();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:223', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:223', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_224(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_224 extends StatefulWidget {
            
        final String nodeName = r'''4.8 • 123 reviews''';
        final String name = r'''4.8 • 123 reviews''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_224({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_224 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_224(properties:properties);
        }
            @override
                _Widget_8_224State createState() => _Widget_8_224State(properties);
            }
            class _Widget_8_224State extends BaseState<Widget_8_224> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4.8 • 123 reviews''', id: '8:224', componentName:r'''4.8 • 123 reviews''');
                
                _Widget_8_224State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4.8 • 123 reviews''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4.8 • 123 reviews''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, '4.8 • 123 reviews');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''4.8 • 123 reviews''', id: '8:224', widget: this, componentName:r'''4.8 • 123 reviews''');
                ComponentDescendantNotification(name: r'''4.8 • 123 reviews''', id: '8:224', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_225 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_225({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_225 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_225(properties:properties);
        }
            @override
                _Widget_8_225State createState() => _Widget_8_225State(properties);
            }
            class _Widget_8_225State extends BaseState<Widget_8_225> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:225', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_225State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_225();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:225', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:225', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_226(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_226 extends StatefulWidget {
            
        final String nodeName = r'''Home Cleaning''';
        final String name = r'''Home Cleaning''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_226({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_226 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_226(properties:properties);
        }
            @override
                _Widget_8_226State createState() => _Widget_8_226State(properties);
            }
            class _Widget_8_226State extends BaseState<Widget_8_226> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home Cleaning''', id: '8:226', componentName:r'''Home Cleaning''');
                
                _Widget_8_226State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home Cleaning''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home Cleaning''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home Cleaning');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home Cleaning''', id: '8:226', widget: this, componentName:r'''Home Cleaning''');
                ComponentDescendantNotification(name: r'''Home Cleaning''', id: '8:226', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_227 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 2''';
        final String name = r'''Depth 6, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_227({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_227 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_227(properties:properties);
        }
            @override
                _Widget_8_227State createState() => _Widget_8_227State(properties);
            }
            class _Widget_8_227State extends BaseState<Widget_8_227> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:227', componentName:r'''Depth 6, Frame 2''');
                
                _Widget_8_227State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 2');
            }            
            
            var painter = Node_8_227();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:227', widget: this, componentName:r'''Depth 6, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 2''', id: '8:227', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_228(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_228 extends StatefulWidget {
            
        final String nodeName = r'''Professional cleaning services for your home''';
        final String name = r'''Professional cleaning services for your home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_228({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_228 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_228(properties:properties);
        }
            @override
                _Widget_8_228State createState() => _Widget_8_228State(properties);
            }
            class _Widget_8_228State extends BaseState<Widget_8_228> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Professional cleaning services for your home''', id: '8:228', componentName:r'''Professional cleaning services for your home''');
                
                _Widget_8_228State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Professional cleaning services for your home''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Professional cleaning services for your home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Professional cleaning services for your home');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Professional cleaning services for your home''', id: '8:228', widget: this, componentName:r'''Professional cleaning services for your home''');
                ComponentDescendantNotification(name: r'''Professional cleaning services for your home''', id: '8:228', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_229 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_229({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_229 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_229(properties:properties);
        }
            @override
                _Widget_8_229State createState() => _Widget_8_229State(properties);
            }
            class _Widget_8_229State extends BaseState<Widget_8_229> {
                bool visible = true;
                bool isLoaded = false;
                double width = 84;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:229', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_229State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_229();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:229', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:229', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 84,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_230(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_230 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_230({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_230 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_230(properties:properties);
        }
            @override
                _Widget_8_230State createState() => _Widget_8_230State(properties);
            }
            class _Widget_8_230State extends BaseState<Widget_8_230> {
                bool visible = true;
                bool isLoaded = false;
                double width = 50;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:230', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_230State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_230();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:230', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:230', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 50,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_231(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_231 extends StatefulWidget {
            
        final String nodeName = r''' {50}/hr''';
        final String name = r''' {50}/hr''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_231({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_231 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_231(properties:properties);
        }
            @override
                _Widget_8_231State createState() => _Widget_8_231State(properties);
            }
            class _Widget_8_231State extends BaseState<Widget_8_231> {
                bool visible = true;
                bool isLoaded = false;
                double width = 50;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r''' {50}/hr''', id: '8:231', componentName:r''' {50}/hr''');
                
                _Widget_8_231State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r''' {50}/hr''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r''' {50}/hr''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, ' {50}/hr');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r''' {50}/hr''', id: '8:231', widget: this, componentName:r''' {50}/hr''');
                ComponentDescendantNotification(name: r''' {50}/hr''', id: '8:231', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 50,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_232 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_232({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_232 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_232(properties:properties);
        }
            @override
                _Widget_8_232State createState() => _Widget_8_232State(properties);
            }
            class _Widget_8_232State extends BaseState<Widget_8_232> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:232', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_232State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_232', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_232();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:232', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:232', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_233 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 6''';
        final String name = r'''Depth 2, Frame 6''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_233({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_233 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_233(properties:properties);
        }
            @override
                _Widget_8_233State createState() => _Widget_8_233State(properties);
            }
            class _Widget_8_233State extends BaseState<Widget_8_233> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 171;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:233', componentName:r'''Depth 2, Frame 6''');
                
                _Widget_8_233State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 6''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 6');
            }            
            
            var painter = Node_8_233();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:233', widget: this, componentName:r'''Depth 2, Frame 6''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 6''', id: '8:233', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 171,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_234(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_234 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_234({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_234 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_234(properties:properties);
        }
            @override
                _Widget_8_234State createState() => _Widget_8_234State(properties);
            }
            class _Widget_8_234State extends BaseState<Widget_8_234> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:234', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_234State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_234();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:234', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:234', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_235(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_246(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_235 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_235({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_235 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_235(properties:properties);
        }
            @override
                _Widget_8_235State createState() => _Widget_8_235State(properties);
            }
            class _Widget_8_235State extends BaseState<Widget_8_235> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:235', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_235State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_235();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:235', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:235', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_236(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 16), 
                                                    Widget_8_243(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_236 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_236({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_236 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_236(properties:properties);
        }
            @override
                _Widget_8_236State createState() => _Widget_8_236State(properties);
            }
            class _Widget_8_236State extends BaseState<Widget_8_236> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 91;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:236', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_236State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_236();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:236', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:236', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 91,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_237(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_239(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_241(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_237 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_237({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_237 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_237(properties:properties);
        }
            @override
                _Widget_8_237State createState() => _Widget_8_237State(properties);
            }
            class _Widget_8_237State extends BaseState<Widget_8_237> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:237', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_237State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_237();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:237', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:237', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_238(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_238 extends StatefulWidget {
            
        final String nodeName = r'''4.9 • 87 reviews''';
        final String name = r'''4.9 • 87 reviews''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_238({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_238 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_238(properties:properties);
        }
            @override
                _Widget_8_238State createState() => _Widget_8_238State(properties);
            }
            class _Widget_8_238State extends BaseState<Widget_8_238> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4.9 • 87 reviews''', id: '8:238', componentName:r'''4.9 • 87 reviews''');
                
                _Widget_8_238State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4.9 • 87 reviews''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4.9 • 87 reviews''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, '4.9 • 87 reviews');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''4.9 • 87 reviews''', id: '8:238', widget: this, componentName:r'''4.9 • 87 reviews''');
                ComponentDescendantNotification(name: r'''4.9 • 87 reviews''', id: '8:238', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_239 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_239({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_239 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_239(properties:properties);
        }
            @override
                _Widget_8_239State createState() => _Widget_8_239State(properties);
            }
            class _Widget_8_239State extends BaseState<Widget_8_239> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:239', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_239State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_239();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:239', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:239', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_240(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_240 extends StatefulWidget {
            
        final String nodeName = r'''Haircut''';
        final String name = r'''Haircut''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_240({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_240 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_240(properties:properties);
        }
            @override
                _Widget_8_240State createState() => _Widget_8_240State(properties);
            }
            class _Widget_8_240State extends BaseState<Widget_8_240> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Haircut''', id: '8:240', componentName:r'''Haircut''');
                
                _Widget_8_240State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Haircut''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Haircut''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Haircut');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Haircut''', id: '8:240', widget: this, componentName:r'''Haircut''');
                ComponentDescendantNotification(name: r'''Haircut''', id: '8:240', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_241 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 2''';
        final String name = r'''Depth 6, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_241({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_241 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_241(properties:properties);
        }
            @override
                _Widget_8_241State createState() => _Widget_8_241State(properties);
            }
            class _Widget_8_241State extends BaseState<Widget_8_241> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:241', componentName:r'''Depth 6, Frame 2''');
                
                _Widget_8_241State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 2');
            }            
            
            var painter = Node_8_241();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:241', widget: this, componentName:r'''Depth 6, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 2''', id: '8:241', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_242(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_242 extends StatefulWidget {
            
        final String nodeName = r'''Stylish haircuts by experienced professionals''';
        final String name = r'''Stylish haircuts by experienced professionals''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_242({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_242 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_242(properties:properties);
        }
            @override
                _Widget_8_242State createState() => _Widget_8_242State(properties);
            }
            class _Widget_8_242State extends BaseState<Widget_8_242> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Stylish haircuts by experienced professionals''', id: '8:242', componentName:r'''Stylish haircuts by experienced professionals''');
                
                _Widget_8_242State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Stylish haircuts by experienced professionals''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Stylish haircuts by experienced professionals''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Stylish haircuts by experienced professionals');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Stylish haircuts by experienced professionals''', id: '8:242', widget: this, componentName:r'''Stylish haircuts by experienced professionals''');
                ComponentDescendantNotification(name: r'''Stylish haircuts by experienced professionals''', id: '8:242', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_243 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_243({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_243 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_243(properties:properties);
        }
            @override
                _Widget_8_243State createState() => _Widget_8_243State(properties);
            }
            class _Widget_8_243State extends BaseState<Widget_8_243> {
                bool visible = true;
                bool isLoaded = false;
                double width = 84;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:243', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_243State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_243();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:243', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:243', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 84,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_244(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_244 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_244({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_244 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_244(properties:properties);
        }
            @override
                _Widget_8_244State createState() => _Widget_8_244State(properties);
            }
            class _Widget_8_244State extends BaseState<Widget_8_244> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:244', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_244State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_244();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:244', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:244', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 28,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_245(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_245 extends StatefulWidget {
            
        final String nodeName = r''' {30}''';
        final String name = r''' {30}''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_245({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_245 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_245(properties:properties);
        }
            @override
                _Widget_8_245State createState() => _Widget_8_245State(properties);
            }
            class _Widget_8_245State extends BaseState<Widget_8_245> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r''' {30}''', id: '8:245', componentName:r''' {30}''');
                
                _Widget_8_245State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r''' {30}''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r''' {30}''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, ' {30}');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r''' {30}''', id: '8:245', widget: this, componentName:r''' {30}''');
                ComponentDescendantNotification(name: r''' {30}''', id: '8:245', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 28,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_246 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_246({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_246 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_246(properties:properties);
        }
            @override
                _Widget_8_246State createState() => _Widget_8_246State(properties);
            }
            class _Widget_8_246State extends BaseState<Widget_8_246> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:246', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_246State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_246', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_246();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:246', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:246', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_247 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 7''';
        final String name = r'''Depth 2, Frame 7''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_247({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_247 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_247(properties:properties);
        }
            @override
                _Widget_8_247State createState() => _Widget_8_247State(properties);
            }
            class _Widget_8_247State extends BaseState<Widget_8_247> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 171;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:247', componentName:r'''Depth 2, Frame 7''');
                
                _Widget_8_247State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 7''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 7');
            }            
            
            var painter = Node_8_247();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:247', widget: this, componentName:r'''Depth 2, Frame 7''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 7''', id: '8:247', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 171,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_248(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_248 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_248({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_248 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_248(properties:properties);
        }
            @override
                _Widget_8_248State createState() => _Widget_8_248State(properties);
            }
            class _Widget_8_248State extends BaseState<Widget_8_248> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:248', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_248State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_248();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:248', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:248', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_249(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 16), 
                                                    Widget_8_260(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_249 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_249({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_249 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_249(properties:properties);
        }
            @override
                _Widget_8_249State createState() => _Widget_8_249State(properties);
            }
            class _Widget_8_249State extends BaseState<Widget_8_249> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:249', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_249State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_249();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:249', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:249', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_250(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 16), 
                                                    Widget_8_257(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_250 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_250({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_250 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_250(properties:properties);
        }
            @override
                _Widget_8_250State createState() => _Widget_8_250State(properties);
            }
            class _Widget_8_250State extends BaseState<Widget_8_250> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 91;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:250', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_250State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_250();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:250', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:250', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 91,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_251(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_253(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_255(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_251 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_251({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_251 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_251(properties:properties);
        }
            @override
                _Widget_8_251State createState() => _Widget_8_251State(properties);
            }
            class _Widget_8_251State extends BaseState<Widget_8_251> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:251', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_251State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_251();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:251', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:251', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_252(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_252 extends StatefulWidget {
            
        final String nodeName = r'''4.7 • 56 reviews''';
        final String name = r'''4.7 • 56 reviews''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_252({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_252 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_252(properties:properties);
        }
            @override
                _Widget_8_252State createState() => _Widget_8_252State(properties);
            }
            class _Widget_8_252State extends BaseState<Widget_8_252> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4.7 • 56 reviews''', id: '8:252', componentName:r'''4.7 • 56 reviews''');
                
                _Widget_8_252State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4.7 • 56 reviews''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4.7 • 56 reviews''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, '4.7 • 56 reviews');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''4.7 • 56 reviews''', id: '8:252', widget: this, componentName:r'''4.7 • 56 reviews''');
                ComponentDescendantNotification(name: r'''4.7 • 56 reviews''', id: '8:252', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_253 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_253({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_253 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_253(properties:properties);
        }
            @override
                _Widget_8_253State createState() => _Widget_8_253State(properties);
            }
            class _Widget_8_253State extends BaseState<Widget_8_253> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:253', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_253State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_253();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:253', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:253', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_254(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_254 extends StatefulWidget {
            
        final String nodeName = r'''Tutoring''';
        final String name = r'''Tutoring''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_254({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_254 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_254(properties:properties);
        }
            @override
                _Widget_8_254State createState() => _Widget_8_254State(properties);
            }
            class _Widget_8_254State extends BaseState<Widget_8_254> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Tutoring''', id: '8:254', componentName:r'''Tutoring''');
                
                _Widget_8_254State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Tutoring''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.25,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Tutoring''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Tutoring');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Tutoring''', id: '8:254', widget: this, componentName:r'''Tutoring''');
                ComponentDescendantNotification(name: r'''Tutoring''', id: '8:254', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 20,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_255 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 2''';
        final String name = r'''Depth 6, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_255({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_255 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_255(properties:properties);
        }
            @override
                _Widget_8_255State createState() => _Widget_8_255State(properties);
            }
            class _Widget_8_255State extends BaseState<Widget_8_255> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:255', componentName:r'''Depth 6, Frame 2''');
                
                _Widget_8_255State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 2');
            }            
            
            var painter = Node_8_255();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 2''', id: '8:255', widget: this, componentName:r'''Depth 6, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 2''', id: '8:255', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_256(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_256 extends StatefulWidget {
            
        final String nodeName = r'''Expert tutoring in various subjects''';
        final String name = r'''Expert tutoring in various subjects''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_256({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_256 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_256(properties:properties);
        }
            @override
                _Widget_8_256State createState() => _Widget_8_256State(properties);
            }
            class _Widget_8_256State extends BaseState<Widget_8_256> {
                bool visible = true;
                bool isLoaded = false;
                double width = 228;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Expert tutoring in various subjects''', id: '8:256', componentName:r'''Expert tutoring in various subjects''');
                
                _Widget_8_256State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Expert tutoring in various subjects''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Expert tutoring in various subjects''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Expert tutoring in various subjects');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Expert tutoring in various subjects''', id: '8:256', widget: this, componentName:r'''Expert tutoring in various subjects''');
                ComponentDescendantNotification(name: r'''Expert tutoring in various subjects''', id: '8:256', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 228,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_257 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_257({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_257 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_257(properties:properties);
        }
            @override
                _Widget_8_257State createState() => _Widget_8_257State(properties);
            }
            class _Widget_8_257State extends BaseState<Widget_8_257> {
                bool visible = true;
                bool isLoaded = false;
                double width = 84;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:257', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_257State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_257();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:257', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:257', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 84,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_258(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_258 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_258({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_258 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_258(properties:properties);
        }
            @override
                _Widget_8_258State createState() => _Widget_8_258State(properties);
            }
            class _Widget_8_258State extends BaseState<Widget_8_258> {
                bool visible = true;
                bool isLoaded = false;
                double width = 50;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:258', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_258State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_258();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:258', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:258', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 50,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_259(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_259 extends StatefulWidget {
            
        final String nodeName = r''' {40}/hr''';
        final String name = r''' {40}/hr''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_259({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_259 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_259(properties:properties);
        }
            @override
                _Widget_8_259State createState() => _Widget_8_259State(properties);
            }
            class _Widget_8_259State extends BaseState<Widget_8_259> {
                bool visible = true;
                bool isLoaded = false;
                double width = 50;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r''' {40}/hr''', id: '8:259', componentName:r''' {40}/hr''');
                
                _Widget_8_259State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r''' {40}/hr''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r''' {40}/hr''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, ' {40}/hr');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r''' {40}/hr''', id: '8:259', widget: this, componentName:r''' {40}/hr''');
                ComponentDescendantNotification(name: r''' {40}/hr''', id: '8:259', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 50,
                                height: 21,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_260 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_260({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_260 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_260(properties:properties);
        }
            @override
                _Widget_8_260State createState() => _Widget_8_260State(properties);
            }
            class _Widget_8_260State extends BaseState<Widget_8_260> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 139;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:260', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_260State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_260', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_260();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:260', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:260', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 130,
                                height: 139,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_261 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 1''';
        final String name = r'''Depth 1, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_261({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_261 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_261(properties:properties);
        }
            @override
                _Widget_8_261State createState() => _Widget_8_261State(properties);
            }
            class _Widget_8_261State extends BaseState<Widget_8_261> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 95;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:261', componentName:r'''Depth 1, Frame 1''');
                
                _Widget_8_261State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 1');
            }            
            
            var painter = Node_8_261();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:261', widget: this, componentName:r'''Depth 1, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 1''', id: '8:261', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 95,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_262(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_291(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_262 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_262({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_262 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_262(properties:properties);
        }
            @override
                _Widget_8_262State createState() => _Widget_8_262State(properties);
            }
            class _Widget_8_262State extends BaseState<Widget_8_262> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 75;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:262', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_262State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_262();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:262', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:262', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 75,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_263(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_270(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_277(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_284(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_263 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_263({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_263 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_263(properties:properties);
        }
            @override
                _Widget_8_263State createState() => _Widget_8_263State(properties);
            }
            class _Widget_8_263State extends BaseState<Widget_8_263> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:263', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_263State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_263();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:263', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:263', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_264(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_268(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_264 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_264({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_264 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_264(properties:properties);
        }
            @override
                _Widget_8_264State createState() => _Widget_8_264State(properties);
            }
            class _Widget_8_264State extends BaseState<Widget_8_264> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:264', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_264State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_264();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:264', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:264', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_265(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_265 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_265({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_265 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_265(properties:properties);
        }
            @override
                _Widget_8_265State createState() => _Widget_8_265State(properties);
            }
            class _Widget_8_265State extends BaseState<Widget_8_265> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:265', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_265State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_265();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:265', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:265', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_266())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_267()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_266 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_266({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_266 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_266(properties:properties);
        }
            @override
                _Widget_8_266State createState() => _Widget_8_266State(properties);
            }
            class _Widget_8_266State extends BaseState<Widget_8_266> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:266', componentName:r'''Vector - 0''');
                
                _Widget_8_266State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_266();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:266', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:266', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_267 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_267({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_267 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_267(properties:properties);
        }
            @override
                _Widget_8_267State createState() => _Widget_8_267State(properties);
            }
            class _Widget_8_267State extends BaseState<Widget_8_267> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:267', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_267State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_267();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:267', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:267', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_268 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_268({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_268 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_268(properties:properties);
        }
            @override
                _Widget_8_268State createState() => _Widget_8_268State(properties);
            }
            class _Widget_8_268State extends BaseState<Widget_8_268> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:268', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_268State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_268();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:268', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:268', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_269(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_269 extends StatefulWidget {
            
        final String nodeName = r'''Home''';
        final String name = r'''Home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_269({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_269 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_269(properties:properties);
        }
            @override
                _Widget_8_269State createState() => _Widget_8_269State(properties);
            }
            class _Widget_8_269State extends BaseState<Widget_8_269> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home''', id: '8:269', componentName:r'''Home''');
                
                _Widget_8_269State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home''', id: '8:269', widget: this, componentName:r'''Home''');
                ComponentDescendantNotification(name: r'''Home''', id: '8:269', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_270 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_270({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_270 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_270(properties:properties);
        }
            @override
                _Widget_8_270State createState() => _Widget_8_270State(properties);
            }
            class _Widget_8_270State extends BaseState<Widget_8_270> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:270', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_270State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_270();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:270', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:270', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_271(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_275(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_271 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_271({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_271 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_271(properties:properties);
        }
            @override
                _Widget_8_271State createState() => _Widget_8_271State(properties);
            }
            class _Widget_8_271State extends BaseState<Widget_8_271> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:271', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_271State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_271();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:271', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:271', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_272(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_272 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_272({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_272 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_272(properties:properties);
        }
            @override
                _Widget_8_272State createState() => _Widget_8_272State(properties);
            }
            class _Widget_8_272State extends BaseState<Widget_8_272> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:272', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_272State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_272();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:272', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:272', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_273())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_274()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_273 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_273({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_273 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_273(properties:properties);
        }
            @override
                _Widget_8_273State createState() => _Widget_8_273State(properties);
            }
            class _Widget_8_273State extends BaseState<Widget_8_273> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:273', componentName:r'''Vector - 0''');
                
                _Widget_8_273State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_273();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:273', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:273', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_274 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_274({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_274 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_274(properties:properties);
        }
            @override
                _Widget_8_274State createState() => _Widget_8_274State(properties);
            }
            class _Widget_8_274State extends BaseState<Widget_8_274> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:274', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_274State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_274();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:274', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:274', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_275 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_275({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_275 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_275(properties:properties);
        }
            @override
                _Widget_8_275State createState() => _Widget_8_275State(properties);
            }
            class _Widget_8_275State extends BaseState<Widget_8_275> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:275', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_275State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_275();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:275', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:275', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_276(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_276 extends StatefulWidget {
            
        final String nodeName = r'''Services''';
        final String name = r'''Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_276({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_276 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_276(properties:properties);
        }
            @override
                _Widget_8_276State createState() => _Widget_8_276State(properties);
            }
            class _Widget_8_276State extends BaseState<Widget_8_276> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Services''', id: '8:276', componentName:r'''Services''');
                
                _Widget_8_276State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Services''', id: '8:276', widget: this, componentName:r'''Services''');
                ComponentDescendantNotification(name: r'''Services''', id: '8:276', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_277 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_277({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_277 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_277(properties:properties);
        }
            @override
                _Widget_8_277State createState() => _Widget_8_277State(properties);
            }
            class _Widget_8_277State extends BaseState<Widget_8_277> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:277', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_277State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_277();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:277', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:277', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_292(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_278(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_282(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_278 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_278({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_278 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_278(properties:properties);
        }
            @override
                _Widget_8_278State createState() => _Widget_8_278State(properties);
            }
            class _Widget_8_278State extends BaseState<Widget_8_278> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:278', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_278State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_278();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:278', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:278', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_279(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_279 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_279({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_279 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_279(properties:properties);
        }
            @override
                _Widget_8_279State createState() => _Widget_8_279State(properties);
            }
            class _Widget_8_279State extends BaseState<Widget_8_279> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:279', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_279State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_279();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:279', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:279', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_280())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_281()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_280 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_280({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_280 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_280(properties:properties);
        }
            @override
                _Widget_8_280State createState() => _Widget_8_280State(properties);
            }
            class _Widget_8_280State extends BaseState<Widget_8_280> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:280', componentName:r'''Vector - 0''');
                
                _Widget_8_280State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_280();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:280', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:280', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_281 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_281({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_281 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_281(properties:properties);
        }
            @override
                _Widget_8_281State createState() => _Widget_8_281State(properties);
            }
            class _Widget_8_281State extends BaseState<Widget_8_281> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:281', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_281State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_281();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:281', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:281', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_282 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_282({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_282 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_282(properties:properties);
        }
            @override
                _Widget_8_282State createState() => _Widget_8_282State(properties);
            }
            class _Widget_8_282State extends BaseState<Widget_8_282> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:282', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_282State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_282();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:282', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:282', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_283(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_283 extends StatefulWidget {
            
        final String nodeName = r'''Community''';
        final String name = r'''Community''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_283({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_283 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_283(properties:properties);
        }
            @override
                _Widget_8_283State createState() => _Widget_8_283State(properties);
            }
            class _Widget_8_283State extends BaseState<Widget_8_283> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community''', id: '8:283', componentName:r'''Community''');
                
                _Widget_8_283State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community''', id: '8:283', widget: this, componentName:r'''Community''');
                ComponentDescendantNotification(name: r'''Community''', id: '8:283', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_284 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 3''';
        final String name = r'''Depth 3, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_284({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_284 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_284(properties:properties);
        }
            @override
                _Widget_8_284State createState() => _Widget_8_284State(properties);
            }
            class _Widget_8_284State extends BaseState<Widget_8_284> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:284', componentName:r'''Depth 3, Frame 3''');
                
                _Widget_8_284State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 3');
            }            
            
            var painter = Node_8_284();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:284', widget: this, componentName:r'''Depth 3, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 3''', id: '8:284', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_370(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_285(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_289(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_285 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_285({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_285 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_285(properties:properties);
        }
            @override
                _Widget_8_285State createState() => _Widget_8_285State(properties);
            }
            class _Widget_8_285State extends BaseState<Widget_8_285> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:285', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_285State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_285();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:285', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:285', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_286(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_286 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_286({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_286 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_286(properties:properties);
        }
            @override
                _Widget_8_286State createState() => _Widget_8_286State(properties);
            }
            class _Widget_8_286State extends BaseState<Widget_8_286> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:286', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_286State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_286();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:286', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:286', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_287())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_288()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_287 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_287({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_287 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_287(properties:properties);
        }
            @override
                _Widget_8_287State createState() => _Widget_8_287State(properties);
            }
            class _Widget_8_287State extends BaseState<Widget_8_287> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:287', componentName:r'''Vector - 0''');
                
                _Widget_8_287State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_287();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:287', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:287', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_288 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_288({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_288 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_288(properties:properties);
        }
            @override
                _Widget_8_288State createState() => _Widget_8_288State(properties);
            }
            class _Widget_8_288State extends BaseState<Widget_8_288> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:288', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_288State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_288();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:288', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:288', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_289 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_289({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_289 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_289(properties:properties);
        }
            @override
                _Widget_8_289State createState() => _Widget_8_289State(properties);
            }
            class _Widget_8_289State extends BaseState<Widget_8_289> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:289', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_289State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_289();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:289', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:289', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_290(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_290 extends StatefulWidget {
            
        final String nodeName = r'''Profile''';
        final String name = r'''Profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_290({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_290 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_290(properties:properties);
        }
            @override
                _Widget_8_290State createState() => _Widget_8_290State(properties);
            }
            class _Widget_8_290State extends BaseState<Widget_8_290> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Profile''', id: '8:290', componentName:r'''Profile''');
                
                _Widget_8_290State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Profile''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Profile');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Profile''', id: '8:290', widget: this, componentName:r'''Profile''');
                ComponentDescendantNotification(name: r'''Profile''', id: '8:290', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_291 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_291({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_291 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_291(properties:properties);
        }
            @override
                _Widget_8_291State createState() => _Widget_8_291State(properties);
            }
            class _Widget_8_291State extends BaseState<Widget_8_291> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:291', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_291State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_291();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:291', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:291', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_292 extends StatefulWidget {
            
        final String nodeName = r'''commnuinty''';
        final String name = r'''commnuinty''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_292({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_292 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_292(properties:properties);
        }
            @override
                _Widget_8_292State createState() => _Widget_8_292State(properties);
            }
            class _Widget_8_292State extends BaseState<Widget_8_292> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1243;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''commnuinty''', id: '8:292', componentName:r'''commnuinty''');
                
                _Widget_8_292State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''commnuinty''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'commnuinty');
            }            
            
            var painter = Node_8_292();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''commnuinty''', id: '8:292', widget: this, componentName:r'''commnuinty''');
                ComponentDescendantNotification(name: r'''commnuinty''', id: '8:292', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1243,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_293(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_293 extends StatefulWidget {
            
        final String nodeName = r'''Depth 0, Frame 0''';
        final String name = r'''Depth 0, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_293({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_293 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_293(properties:properties);
        }
            @override
                _Widget_8_293State createState() => _Widget_8_293State(properties);
            }
            class _Widget_8_293State extends BaseState<Widget_8_293> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1243;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:293', componentName:r'''Depth 0, Frame 0''');
                
                _Widget_8_293State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 0, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 0, Frame 0');
            }            
            
            var painter = Node_8_293();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:293', widget: this, componentName:r'''Depth 0, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 0, Frame 0''', id: '8:293', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1243,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_294(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_339(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_294 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 0''';
        final String name = r'''Depth 1, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_294({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_294 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_294(properties:properties);
        }
            @override
                _Widget_8_294State createState() => _Widget_8_294State(properties);
            }
            class _Widget_8_294State extends BaseState<Widget_8_294> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 1148;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:294', componentName:r'''Depth 1, Frame 0''');
                
                _Widget_8_294State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 0');
            }            
            
            var painter = Node_8_294();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:294', widget: this, componentName:r'''Depth 1, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 0''', id: '8:294', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 1148,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_295(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_302(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_312(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_321(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_330(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_295 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_295({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_295 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_295(properties:properties);
        }
            @override
                _Widget_8_295State createState() => _Widget_8_295State(properties);
            }
            class _Widget_8_295State extends BaseState<Widget_8_295> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 72;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:295', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_295State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_295();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:295', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:295', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_158(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 72,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_296(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_300(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_8_296 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_296({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_296 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_296(properties:properties);
        }
            @override
                _Widget_8_296State createState() => _Widget_8_296State(properties);
            }
            class _Widget_8_296State extends BaseState<Widget_8_296> {
                bool visible = true;
                bool isLoaded = false;
                double width = 48;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:296', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_296State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_296();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:296', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:296', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 48,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_297(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_297 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_297({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_297 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_297(properties:properties);
        }
            @override
                _Widget_8_297State createState() => _Widget_8_297State(properties);
            }
            class _Widget_8_297State extends BaseState<Widget_8_297> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:297', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_297State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_297();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:297', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:297', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_298())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_299()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_298 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_298({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_298 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_298(properties:properties);
        }
            @override
                _Widget_8_298State createState() => _Widget_8_298State(properties);
            }
            class _Widget_8_298State extends BaseState<Widget_8_298> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:298', componentName:r'''Vector - 0''');
                
                _Widget_8_298State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_298();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:298', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:298', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_299 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_299({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_299 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_299(properties:properties);
        }
            @override
                _Widget_8_299State createState() => _Widget_8_299State(properties);
            }
            class _Widget_8_299State extends BaseState<Widget_8_299> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:299', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_299State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_299();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:299', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:299', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_300 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_300({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_300 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_300(properties:properties);
        }
            @override
                _Widget_8_300State createState() => _Widget_8_300State(properties);
            }
            class _Widget_8_300State extends BaseState<Widget_8_300> {
                bool visible = true;
                bool isLoaded = false;
                double width = 310;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:300', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_300State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_300();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:300', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:300', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 310,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_301(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_301 extends StatefulWidget {
            
        final String nodeName = r'''Community Updates''';
        final String name = r'''Community Updates''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_301({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_301 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_301(properties:properties);
        }
            @override
                _Widget_8_301State createState() => _Widget_8_301State(properties);
            }
            class _Widget_8_301State extends BaseState<Widget_8_301> {
                bool visible = true;
                bool isLoaded = false;
                double width = 262;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community Updates''', id: '8:301', componentName:r'''Community Updates''');
                
                _Widget_8_301State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community Updates''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community Updates''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community Updates');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community Updates''', id: '8:301', widget: this, componentName:r'''Community Updates''');
                ComponentDescendantNotification(name: r'''Community Updates''', id: '8:301', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 262,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_302 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_302({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_302 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_302(properties:properties);
        }
            @override
                _Widget_8_302State createState() => _Widget_8_302State(properties);
            }
            class _Widget_8_302State extends BaseState<Widget_8_302> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:302', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_302State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_302();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:302', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:302', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_303(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_306(key:UniqueKey()), 
                                                    const SizedBox(width: 12), 
                                                    Widget_8_309(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_303 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_303({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_303 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_303(properties:properties);
        }
            @override
                _Widget_8_303State createState() => _Widget_8_303State(properties);
            }
            class _Widget_8_303State extends BaseState<Widget_8_303> {
                bool visible = true;
                bool isLoaded = false;
                double width = 78;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:303', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_303State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_303();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:303', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:303', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 78,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_304(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_304 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_304({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_304 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_304(properties:properties);
        }
            @override
                _Widget_8_304State createState() => _Widget_8_304State(properties);
            }
            class _Widget_8_304State extends BaseState<Widget_8_304> {
                bool visible = true;
                bool isLoaded = false;
                double width = 46;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:304', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_304State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_304();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:304', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:304', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -5, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 46,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_305(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_305 extends StatefulWidget {
            
        final String nodeName = r'''Events''';
        final String name = r'''Events''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_305({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_305 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_305(properties:properties);
        }
            @override
                _Widget_8_305State createState() => _Widget_8_305State(properties);
            }
            class _Widget_8_305State extends BaseState<Widget_8_305> {
                bool visible = true;
                bool isLoaded = false;
                double width = 46;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Events''', id: '8:305', componentName:r'''Events''');
                
                _Widget_8_305State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Events''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Events''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Events');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Events''', id: '8:305', widget: this, componentName:r'''Events''');
                ComponentDescendantNotification(name: r'''Events''', id: '8:305', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 46,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_306 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_306({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_306 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_306(properties:properties);
        }
            @override
                _Widget_8_306State createState() => _Widget_8_306State(properties);
            }
            class _Widget_8_306State extends BaseState<Widget_8_306> {
                bool visible = true;
                bool isLoaded = false;
                double width = 98;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:306', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_306State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_306();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:306', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:306', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 98,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_307(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_307 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_307({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_307 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_307(properties:properties);
        }
            @override
                _Widget_8_307State createState() => _Widget_8_307State(properties);
            }
            class _Widget_8_307State extends BaseState<Widget_8_307> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:307', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_307State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_307();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:307', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:307', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -5, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 66,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_308(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_308 extends StatefulWidget {
            
        final String nodeName = r'''Subsidies''';
        final String name = r'''Subsidies''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_308({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_308 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_308(properties:properties);
        }
            @override
                _Widget_8_308State createState() => _Widget_8_308State(properties);
            }
            class _Widget_8_308State extends BaseState<Widget_8_308> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Subsidies''', id: '8:308', componentName:r'''Subsidies''');
                
                _Widget_8_308State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Subsidies''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Subsidies''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Subsidies');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Subsidies''', id: '8:308', widget: this, componentName:r'''Subsidies''');
                ComponentDescendantNotification(name: r'''Subsidies''', id: '8:308', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 66,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_309 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_309({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_309 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_309(properties:properties);
        }
            @override
                _Widget_8_309State createState() => _Widget_8_309State(properties);
            }
            class _Widget_8_309State extends BaseState<Widget_8_309> {
                bool visible = true;
                bool isLoaded = false;
                double width = 143;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:309', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_309State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_309();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:309', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:309', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 143,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_310(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_310 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_310({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_310 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_310(properties:properties);
        }
            @override
                _Widget_8_310State createState() => _Widget_8_310State(properties);
            }
            class _Widget_8_310State extends BaseState<Widget_8_310> {
                bool visible = true;
                bool isLoaded = false;
                double width = 111;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:310', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_310State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_310();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:310', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:310', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -5, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 111,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_311(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_311 extends StatefulWidget {
            
        final String nodeName = r'''Announcements''';
        final String name = r'''Announcements''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_311({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_311 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_311(properties:properties);
        }
            @override
                _Widget_8_311State createState() => _Widget_8_311State(properties);
            }
            class _Widget_8_311State extends BaseState<Widget_8_311> {
                bool visible = true;
                bool isLoaded = false;
                double width = 111;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Announcements''', id: '8:311', componentName:r'''Announcements''');
                
                _Widget_8_311State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Announcements''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((42/21).floor()) <=1 ? 1 : (42/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 14,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Announcements''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Announcements');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Announcements''', id: '8:311', widget: this, componentName:r'''Announcements''');
                ComponentDescendantNotification(name: r'''Announcements''', id: '8:311', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 111,
                                height: 42,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_312 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 2''';
        final String name = r'''Depth 2, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_312({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_312 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_312(properties:properties);
        }
            @override
                _Widget_8_312State createState() => _Widget_8_312State(properties);
            }
            class _Widget_8_312State extends BaseState<Widget_8_312> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 340;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:312', componentName:r'''Depth 2, Frame 2''');
                
                _Widget_8_312State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 2');
            }            
            
            var painter = Node_8_312();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:312', widget: this, componentName:r'''Depth 2, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 2''', id: '8:312', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 340,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_313(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_313 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_313({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_313 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_313(properties:properties);
        }
            @override
                _Widget_8_313State createState() => _Widget_8_313State(properties);
            }
            class _Widget_8_313State extends BaseState<Widget_8_313> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 308;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:313', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_313State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_313();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:313', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:313', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 308,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_314(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_315(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_314 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_314({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_314 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_314(properties:properties);
        }
            @override
                _Widget_8_314State createState() => _Widget_8_314State(properties);
            }
            class _Widget_8_314State extends BaseState<Widget_8_314> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 201;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:314', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_314State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_314', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_314();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:314', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:314', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 201,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_315 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_315({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_315 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_315(properties:properties);
        }
            @override
                _Widget_8_315State createState() => _Widget_8_315State(properties);
            }
            class _Widget_8_315State extends BaseState<Widget_8_315> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 107;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:315', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_315State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_315();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:315', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:315', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 107,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_316(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_318(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_316 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_316({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_316 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_316(properties:properties);
        }
            @override
                _Widget_8_316State createState() => _Widget_8_316State(properties);
            }
            class _Widget_8_316State extends BaseState<Widget_8_316> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:316', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_316State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_316();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:316', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:316', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_317(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_317 extends StatefulWidget {
            
        final String nodeName = r'''Community Picnic''';
        final String name = r'''Community Picnic''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_317({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_317 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_317(properties:properties);
        }
            @override
                _Widget_8_317State createState() => _Widget_8_317State(properties);
            }
            class _Widget_8_317State extends BaseState<Widget_8_317> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community Picnic''', id: '8:317', componentName:r'''Community Picnic''');
                
                _Widget_8_317State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community Picnic''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community Picnic''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community Picnic');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community Picnic''', id: '8:317', widget: this, componentName:r'''Community Picnic''');
                ComponentDescendantNotification(name: r'''Community Picnic''', id: '8:317', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_318 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_318({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_318 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_318(properties:properties);
        }
            @override
                _Widget_8_318State createState() => _Widget_8_318State(properties);
            }
            class _Widget_8_318State extends BaseState<Widget_8_318> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:318', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_318State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_318();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:318', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:318', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_319(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_319 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_319({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_319 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_319(properties:properties);
        }
            @override
                _Widget_8_319State createState() => _Widget_8_319State(properties);
            }
            class _Widget_8_319State extends BaseState<Widget_8_319> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:319', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_319State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_319();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:319', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:319', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_320(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_320 extends StatefulWidget {
            
        final String nodeName = r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''';
        final String name = r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_320({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_320 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_320(properties:properties);
        }
            @override
                _Widget_8_320State createState() => _Widget_8_320State(properties);
            }
            class _Widget_8_320State extends BaseState<Widget_8_320> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''', id: '8:320', componentName:r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''');
                
                _Widget_8_320State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((48/24).floor()) <=1 ? 1 : (48/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Join us for a fun-filled picnic at Central Park. Bring your friends and family!');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''', id: '8:320', widget: this, componentName:r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''');
                ComponentDescendantNotification(name: r'''Join us for a fun-filled picnic at Central Park. Bring your friends and family!''', id: '8:320', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_321 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 3''';
        final String name = r'''Depth 2, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_321({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_321 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_321(properties:properties);
        }
            @override
                _Widget_8_321State createState() => _Widget_8_321State(properties);
            }
            class _Widget_8_321State extends BaseState<Widget_8_321> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 340;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:321', componentName:r'''Depth 2, Frame 3''');
                
                _Widget_8_321State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 3');
            }            
            
            var painter = Node_8_321();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:321', widget: this, componentName:r'''Depth 2, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 3''', id: '8:321', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 340,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_322(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_322 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_322({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_322 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_322(properties:properties);
        }
            @override
                _Widget_8_322State createState() => _Widget_8_322State(properties);
            }
            class _Widget_8_322State extends BaseState<Widget_8_322> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 308;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:322', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_322State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_322();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:322', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:322', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 308,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_323(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_324(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_323 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_323({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_323 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_323(properties:properties);
        }
            @override
                _Widget_8_323State createState() => _Widget_8_323State(properties);
            }
            class _Widget_8_323State extends BaseState<Widget_8_323> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 201;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:323', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_323State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_323', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_323();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:323', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:323', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 201,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_324 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_324({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_324 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_324(properties:properties);
        }
            @override
                _Widget_8_324State createState() => _Widget_8_324State(properties);
            }
            class _Widget_8_324State extends BaseState<Widget_8_324> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 107;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:324', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_324State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_324();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:324', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:324', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 107,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_325(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_327(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_325 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_325({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_325 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_325(properties:properties);
        }
            @override
                _Widget_8_325State createState() => _Widget_8_325State(properties);
            }
            class _Widget_8_325State extends BaseState<Widget_8_325> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:325', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_325State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_325();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:325', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:325', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_326(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_326 extends StatefulWidget {
            
        final String nodeName = r'''Housing Subsidy Program''';
        final String name = r'''Housing Subsidy Program''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_326({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_326 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_326(properties:properties);
        }
            @override
                _Widget_8_326State createState() => _Widget_8_326State(properties);
            }
            class _Widget_8_326State extends BaseState<Widget_8_326> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Housing Subsidy Program''', id: '8:326', componentName:r'''Housing Subsidy Program''');
                
                _Widget_8_326State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Housing Subsidy Program''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Housing Subsidy Program''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Housing Subsidy Program');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Housing Subsidy Program''', id: '8:326', widget: this, componentName:r'''Housing Subsidy Program''');
                ComponentDescendantNotification(name: r'''Housing Subsidy Program''', id: '8:326', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_327 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_327({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_327 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_327(properties:properties);
        }
            @override
                _Widget_8_327State createState() => _Widget_8_327State(properties);
            }
            class _Widget_8_327State extends BaseState<Widget_8_327> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:327', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_327State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_327();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:327', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:327', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_328(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_328 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_328({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_328 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_328(properties:properties);
        }
            @override
                _Widget_8_328State createState() => _Widget_8_328State(properties);
            }
            class _Widget_8_328State extends BaseState<Widget_8_328> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:328', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_328State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_328();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:328', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:328', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_329(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_329 extends StatefulWidget {
            
        final String nodeName = r'''Apply for the new housing subsidy program to help with your rent or mortgage.''';
        final String name = r'''Apply for the new housing subsidy program to help with your rent or mortgage.''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_329({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_329 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_329(properties:properties);
        }
            @override
                _Widget_8_329State createState() => _Widget_8_329State(properties);
            }
            class _Widget_8_329State extends BaseState<Widget_8_329> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Apply for the new housing subsidy program to help with your rent or mortgage.''', id: '8:329', componentName:r'''Apply for the new housing subsidy program to help with your rent or mortgage.''');
                
                _Widget_8_329State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Apply for the new housing subsidy program to help with your rent or mortgage.''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((48/24).floor()) <=1 ? 1 : (48/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Apply for the new housing subsidy program to help with your rent or mortgage.''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Apply for the new housing subsidy program to help with your rent or mortgage.');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Apply for the new housing subsidy program to help with your rent or mortgage.''', id: '8:329', widget: this, componentName:r'''Apply for the new housing subsidy program to help with your rent or mortgage.''');
                ComponentDescendantNotification(name: r'''Apply for the new housing subsidy program to help with your rent or mortgage.''', id: '8:329', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_330 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 4''';
        final String name = r'''Depth 2, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_330({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_330 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_330(properties:properties);
        }
            @override
                _Widget_8_330State createState() => _Widget_8_330State(properties);
            }
            class _Widget_8_330State extends BaseState<Widget_8_330> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 340;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:330', componentName:r'''Depth 2, Frame 4''');
                
                _Widget_8_330State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 4');
            }            
            
            var painter = Node_8_330();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:330', widget: this, componentName:r'''Depth 2, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 4''', id: '8:330', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 340,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_331(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_331 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_331({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_331 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_331(properties:properties);
        }
            @override
                _Widget_8_331State createState() => _Widget_8_331State(properties);
            }
            class _Widget_8_331State extends BaseState<Widget_8_331> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 308;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:331', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_331State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_331();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:331', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:331', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 308,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_332(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_333(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_332 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_332({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_332 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_332(properties:properties);
        }
            @override
                _Widget_8_332State createState() => _Widget_8_332State(properties);
            }
            class _Widget_8_332State extends BaseState<Widget_8_332> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 201;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:332', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_332State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_332', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_332();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:332', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:332', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 201,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_333 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_333({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_333 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_333(properties:properties);
        }
            @override
                _Widget_8_333State createState() => _Widget_8_333State(properties);
            }
            class _Widget_8_333State extends BaseState<Widget_8_333> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 107;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:333', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_333State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_333();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:333', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:333', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 107,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_334(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_336(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_334 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_334({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_334 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_334(properties:properties);
        }
            @override
                _Widget_8_334State createState() => _Widget_8_334State(properties);
            }
            class _Widget_8_334State extends BaseState<Widget_8_334> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:334', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_334State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_334();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:334', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:334', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_335(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_335 extends StatefulWidget {
            
        final String nodeName = r'''Road Closure Notice''';
        final String name = r'''Road Closure Notice''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_335({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_335 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_335(properties:properties);
        }
            @override
                _Widget_8_335State createState() => _Widget_8_335State(properties);
            }
            class _Widget_8_335State extends BaseState<Widget_8_335> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Road Closure Notice''', id: '8:335', componentName:r'''Road Closure Notice''');
                
                _Widget_8_335State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Road Closure Notice''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Road Closure Notice''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Road Closure Notice');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Road Closure Notice''', id: '8:335', widget: this, componentName:r'''Road Closure Notice''');
                ComponentDescendantNotification(name: r'''Road Closure Notice''', id: '8:335', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_336 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_336({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_336 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_336(properties:properties);
        }
            @override
                _Widget_8_336State createState() => _Widget_8_336State(properties);
            }
            class _Widget_8_336State extends BaseState<Widget_8_336> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:336', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_336State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_336();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:336', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:336', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 12,
                    //runSpacing: 12, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_337(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_337 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_337({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_337 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_337(properties:properties);
        }
            @override
                _Widget_8_337State createState() => _Widget_8_337State(properties);
            }
            class _Widget_8_337State extends BaseState<Widget_8_337> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:337', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_337State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_337();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:337', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:337', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_338(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_338 extends StatefulWidget {
            
        final String nodeName = r'''Main Street will be closed for construction from July 1st to July 15th.''';
        final String name = r'''Main Street will be closed for construction from July 1st to July 15th.''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_338({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_338 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_338(properties:properties);
        }
            @override
                _Widget_8_338State createState() => _Widget_8_338State(properties);
            }
            class _Widget_8_338State extends BaseState<Widget_8_338> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Main Street will be closed for construction from July 1st to July 15th.''', id: '8:338', componentName:r'''Main Street will be closed for construction from July 1st to July 15th.''');
                
                _Widget_8_338State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Main Street will be closed for construction from July 1st to July 15th.''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((48/24).floor()) <=1 ? 1 : (48/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Main Street will be closed for construction from July 1st to July 15th.''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Main Street will be closed for construction from July 1st to July 15th.');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Main Street will be closed for construction from July 1st to July 15th.''', id: '8:338', widget: this, componentName:r'''Main Street will be closed for construction from July 1st to July 15th.''');
                ComponentDescendantNotification(name: r'''Main Street will be closed for construction from July 1st to July 15th.''', id: '8:338', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 48,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_339 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 1''';
        final String name = r'''Depth 1, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_339({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_339 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_339(properties:properties);
        }
            @override
                _Widget_8_339State createState() => _Widget_8_339State(properties);
            }
            class _Widget_8_339State extends BaseState<Widget_8_339> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 95;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:339', componentName:r'''Depth 1, Frame 1''');
                
                _Widget_8_339State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 1');
            }            
            
            var painter = Node_8_339();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:339', widget: this, componentName:r'''Depth 1, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 1''', id: '8:339', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 95,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_340(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_369(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_340 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_340({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_340 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_340(properties:properties);
        }
            @override
                _Widget_8_340State createState() => _Widget_8_340State(properties);
            }
            class _Widget_8_340State extends BaseState<Widget_8_340> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 75;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:340', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_340State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_340();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:340', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:340', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 75,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_341(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_348(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_355(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_362(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_341 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_341({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_341 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_341(properties:properties);
        }
            @override
                _Widget_8_341State createState() => _Widget_8_341State(properties);
            }
            class _Widget_8_341State extends BaseState<Widget_8_341> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:341', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_341State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_341();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:341', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:341', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_342(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_346(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_342 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_342({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_342 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_342(properties:properties);
        }
            @override
                _Widget_8_342State createState() => _Widget_8_342State(properties);
            }
            class _Widget_8_342State extends BaseState<Widget_8_342> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:342', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_342State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_342();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:342', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:342', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_343(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_343 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_343({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_343 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_343(properties:properties);
        }
            @override
                _Widget_8_343State createState() => _Widget_8_343State(properties);
            }
            class _Widget_8_343State extends BaseState<Widget_8_343> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:343', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_343State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_343();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:343', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:343', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_344())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_345()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_344 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_344({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_344 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_344(properties:properties);
        }
            @override
                _Widget_8_344State createState() => _Widget_8_344State(properties);
            }
            class _Widget_8_344State extends BaseState<Widget_8_344> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:344', componentName:r'''Vector - 0''');
                
                _Widget_8_344State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_344();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:344', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:344', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_345 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_345({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_345 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_345(properties:properties);
        }
            @override
                _Widget_8_345State createState() => _Widget_8_345State(properties);
            }
            class _Widget_8_345State extends BaseState<Widget_8_345> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:345', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_345State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_345();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:345', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:345', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_346 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_346({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_346 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_346(properties:properties);
        }
            @override
                _Widget_8_346State createState() => _Widget_8_346State(properties);
            }
            class _Widget_8_346State extends BaseState<Widget_8_346> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:346', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_346State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_346();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:346', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:346', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_347(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_347 extends StatefulWidget {
            
        final String nodeName = r'''Home''';
        final String name = r'''Home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_347({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_347 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_347(properties:properties);
        }
            @override
                _Widget_8_347State createState() => _Widget_8_347State(properties);
            }
            class _Widget_8_347State extends BaseState<Widget_8_347> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home''', id: '8:347', componentName:r'''Home''');
                
                _Widget_8_347State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home''', id: '8:347', widget: this, componentName:r'''Home''');
                ComponentDescendantNotification(name: r'''Home''', id: '8:347', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_348 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_348({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_348 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_348(properties:properties);
        }
            @override
                _Widget_8_348State createState() => _Widget_8_348State(properties);
            }
            class _Widget_8_348State extends BaseState<Widget_8_348> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:348', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_348State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_348();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:348', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:348', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_158(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_349(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_353(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_349 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_349({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_349 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_349(properties:properties);
        }
            @override
                _Widget_8_349State createState() => _Widget_8_349State(properties);
            }
            class _Widget_8_349State extends BaseState<Widget_8_349> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:349', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_349State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_349();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:349', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:349', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_350(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_350 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_350 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_350(properties:properties);
        }
            @override
                _Widget_8_350State createState() => _Widget_8_350State(properties);
            }
            class _Widget_8_350State extends BaseState<Widget_8_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:350', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:350', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:350', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_351())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 17 + 0, maxWidth: 17 + 0,
                                                                        minHeight: 17 + 0, maxHeight: 17 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 17,
                                                                        height: 17,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_352()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_351 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_351 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_351(properties:properties);
        }
            @override
                _Widget_8_351State createState() => _Widget_8_351State(properties);
            }
            class _Widget_8_351State extends BaseState<Widget_8_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:351', componentName:r'''Vector - 0''');
                
                _Widget_8_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_351();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:351', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:351', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_352 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_352 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_352(properties:properties);
        }
            @override
                _Widget_8_352State createState() => _Widget_8_352State(properties);
            }
            class _Widget_8_352State extends BaseState<Widget_8_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 17;
                double height = 17;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:352', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:352', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:352', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 17,
                                height: 17,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_353 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_353 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_353(properties:properties);
        }
            @override
                _Widget_8_353State createState() => _Widget_8_353State(properties);
            }
            class _Widget_8_353State extends BaseState<Widget_8_353> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:353', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:353', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:353', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_354(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_354 extends StatefulWidget {
            
        final String nodeName = r'''Services''';
        final String name = r'''Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_354 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_354(properties:properties);
        }
            @override
                _Widget_8_354State createState() => _Widget_8_354State(properties);
            }
            class _Widget_8_354State extends BaseState<Widget_8_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Services''', id: '8:354', componentName:r'''Services''');
                
                _Widget_8_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Services''', id: '8:354', widget: this, componentName:r'''Services''');
                ComponentDescendantNotification(name: r'''Services''', id: '8:354', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_355 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 3''';
        final String name = r'''Depth 3, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_355({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_355 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_355(properties:properties);
        }
            @override
                _Widget_8_355State createState() => _Widget_8_355State(properties);
            }
            class _Widget_8_355State extends BaseState<Widget_8_355> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:355', componentName:r'''Depth 3, Frame 3''');
                
                _Widget_8_355State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 3');
            }            
            
            var painter = Node_8_355();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:355', widget: this, componentName:r'''Depth 3, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 3''', id: '8:355', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_356(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_360(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_356 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_356({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_356 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_356(properties:properties);
        }
            @override
                _Widget_8_356State createState() => _Widget_8_356State(properties);
            }
            class _Widget_8_356State extends BaseState<Widget_8_356> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:356', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_356State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_356();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:356', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:356', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_357(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_357 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_357({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_357 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_357(properties:properties);
        }
            @override
                _Widget_8_357State createState() => _Widget_8_357State(properties);
            }
            class _Widget_8_357State extends BaseState<Widget_8_357> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:357', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_357State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_357();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:357', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:357', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_358())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_359()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_358 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_358({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_358 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_358(properties:properties);
        }
            @override
                _Widget_8_358State createState() => _Widget_8_358State(properties);
            }
            class _Widget_8_358State extends BaseState<Widget_8_358> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:358', componentName:r'''Vector - 0''');
                
                _Widget_8_358State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_358();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:358', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:358', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_359 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_359({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_359 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_359(properties:properties);
        }
            @override
                _Widget_8_359State createState() => _Widget_8_359State(properties);
            }
            class _Widget_8_359State extends BaseState<Widget_8_359> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:359', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_359State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_359();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:359', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:359', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_360 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_360({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_360 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_360(properties:properties);
        }
            @override
                _Widget_8_360State createState() => _Widget_8_360State(properties);
            }
            class _Widget_8_360State extends BaseState<Widget_8_360> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:360', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_360State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_360();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:360', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:360', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_361(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_361 extends StatefulWidget {
            
        final String nodeName = r'''Community''';
        final String name = r'''Community''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_361({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_361 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_361(properties:properties);
        }
            @override
                _Widget_8_361State createState() => _Widget_8_361State(properties);
            }
            class _Widget_8_361State extends BaseState<Widget_8_361> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community''', id: '8:361', componentName:r'''Community''');
                
                _Widget_8_361State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community''', id: '8:361', widget: this, componentName:r'''Community''');
                ComponentDescendantNotification(name: r'''Community''', id: '8:361', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_362 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 4''';
        final String name = r'''Depth 3, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_362({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_362 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_362(properties:properties);
        }
            @override
                _Widget_8_362State createState() => _Widget_8_362State(properties);
            }
            class _Widget_8_362State extends BaseState<Widget_8_362> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 4''', id: '8:362', componentName:r'''Depth 3, Frame 4''');
                
                _Widget_8_362State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 4');
            }            
            
            var painter = Node_8_362();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 4''', id: '8:362', widget: this, componentName:r'''Depth 3, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 4''', id: '8:362', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_370(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_363(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_367(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_363 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_363({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_363 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_363(properties:properties);
        }
            @override
                _Widget_8_363State createState() => _Widget_8_363State(properties);
            }
            class _Widget_8_363State extends BaseState<Widget_8_363> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:363', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_363State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_363();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:363', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:363', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_364(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_364 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_364({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_364 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_364(properties:properties);
        }
            @override
                _Widget_8_364State createState() => _Widget_8_364State(properties);
            }
            class _Widget_8_364State extends BaseState<Widget_8_364> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:364', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_364State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_364();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:364', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:364', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_365())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_366()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_365 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_365({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_365 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_365(properties:properties);
        }
            @override
                _Widget_8_365State createState() => _Widget_8_365State(properties);
            }
            class _Widget_8_365State extends BaseState<Widget_8_365> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:365', componentName:r'''Vector - 0''');
                
                _Widget_8_365State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_365();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:365', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:365', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_366 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_366({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_366 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_366(properties:properties);
        }
            @override
                _Widget_8_366State createState() => _Widget_8_366State(properties);
            }
            class _Widget_8_366State extends BaseState<Widget_8_366> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:366', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_366State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_366();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:366', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:366', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_367 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_367({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_367 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_367(properties:properties);
        }
            @override
                _Widget_8_367State createState() => _Widget_8_367State(properties);
            }
            class _Widget_8_367State extends BaseState<Widget_8_367> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:367', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_367State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_367();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:367', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:367', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_368(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_368 extends StatefulWidget {
            
        final String nodeName = r'''Profile''';
        final String name = r'''Profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_368({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_368 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_368(properties:properties);
        }
            @override
                _Widget_8_368State createState() => _Widget_8_368State(properties);
            }
            class _Widget_8_368State extends BaseState<Widget_8_368> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Profile''', id: '8:368', componentName:r'''Profile''');
                
                _Widget_8_368State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Profile''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Profile');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Profile''', id: '8:368', widget: this, componentName:r'''Profile''');
                ComponentDescendantNotification(name: r'''Profile''', id: '8:368', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_369 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_369({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_369 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_369(properties:properties);
        }
            @override
                _Widget_8_369State createState() => _Widget_8_369State(properties);
            }
            class _Widget_8_369State extends BaseState<Widget_8_369> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:369', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_369State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_369();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:369', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:369', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_370 extends StatefulWidget {
            
        final String nodeName = r'''profile''';
        final String name = r'''profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_370({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_370 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_370(properties:properties);
        }
            @override
                _Widget_8_370State createState() => _Widget_8_370State(properties);
            }
            class _Widget_8_370State extends BaseState<Widget_8_370> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 939;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''profile''', id: '8:370', componentName:r'''profile''');
                
                _Widget_8_370State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'profile');
            }            
            
            var painter = Node_8_370();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''profile''', id: '8:370', widget: this, componentName:r'''profile''');
                ComponentDescendantNotification(name: r'''profile''', id: '8:370', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 939,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_371(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_428(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_371 extends StatefulWidget {
            
        final String nodeName = r'''Depth 0, Frame 0''';
        final String name = r'''Depth 0, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_371({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_371 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_371(properties:properties);
        }
            @override
                _Widget_8_371State createState() => _Widget_8_371State(properties);
            }
            class _Widget_8_371State extends BaseState<Widget_8_371> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 844;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:371', componentName:r'''Depth 0, Frame 0''');
                
                _Widget_8_371State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 0, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 0, Frame 0');
            }            
            
            var painter = Node_8_371();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 0, Frame 0''', id: '8:371', widget: this, componentName:r'''Depth 0, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 0, Frame 0''', id: '8:371', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 844,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_372(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_372 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 0''';
        final String name = r'''Depth 1, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_372({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_372 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_372(properties:properties);
        }
            @override
                _Widget_8_372State createState() => _Widget_8_372State(properties);
            }
            class _Widget_8_372State extends BaseState<Widget_8_372> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 674;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:372', componentName:r'''Depth 1, Frame 0''');
                
                _Widget_8_372State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 0');
            }            
            
            var painter = Node_8_372();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 0''', id: '8:372', widget: this, componentName:r'''Depth 1, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 0''', id: '8:372', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 674,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_373(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_380(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_389(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_391(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_398(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_405(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_412(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_419(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_421(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_373 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_373({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_373 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_373(properties:properties);
        }
            @override
                _Widget_8_373State createState() => _Widget_8_373State(properties);
            }
            class _Widget_8_373State extends BaseState<Widget_8_373> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 72;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:373', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_373State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_373();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:373', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:373', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_292(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 72,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_374(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_378(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_8_374 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_374({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_374 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_374(properties:properties);
        }
            @override
                _Widget_8_374State createState() => _Widget_8_374State(properties);
            }
            class _Widget_8_374State extends BaseState<Widget_8_374> {
                bool visible = true;
                bool isLoaded = false;
                double width = 48;
                double height = 48;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:374', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_374State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_374();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:374', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:374', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 48,
                                height: 48,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_375(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_375 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_375({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_375 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_375(properties:properties);
        }
            @override
                _Widget_8_375State createState() => _Widget_8_375State(properties);
            }
            class _Widget_8_375State extends BaseState<Widget_8_375> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:375', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_375State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_375();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:375', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:375', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_376())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_377()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_376 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_376({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_376 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_376(properties:properties);
        }
            @override
                _Widget_8_376State createState() => _Widget_8_376State(properties);
            }
            class _Widget_8_376State extends BaseState<Widget_8_376> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:376', componentName:r'''Vector - 0''');
                
                _Widget_8_376State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_376();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:376', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:376', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_377 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_377({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_377 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_377(properties:properties);
        }
            @override
                _Widget_8_377State createState() => _Widget_8_377State(properties);
            }
            class _Widget_8_377State extends BaseState<Widget_8_377> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:377', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_377State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_377();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:377', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:377', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_378 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_378({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_378 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_378(properties:properties);
        }
            @override
                _Widget_8_378State createState() => _Widget_8_378State(properties);
            }
            class _Widget_8_378State extends BaseState<Widget_8_378> {
                bool visible = true;
                bool isLoaded = false;
                double width = 310;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:378', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_378State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_378();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:378', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:378', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 310,
                                height: 23,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_379(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_379 extends StatefulWidget {
            
        final String nodeName = r'''Account''';
        final String name = r'''Account''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_379({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_379 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_379(properties:properties);
        }
            @override
                _Widget_8_379State createState() => _Widget_8_379State(properties);
            }
            class _Widget_8_379State extends BaseState<Widget_8_379> {
                bool visible = true;
                bool isLoaded = false;
                double width = 262;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Account''', id: '8:379', componentName:r'''Account''');
                
                _Widget_8_379State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Account''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Account''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Account');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Account''', id: '8:379', widget: this, componentName:r'''Account''');
                ComponentDescendantNotification(name: r'''Account''', id: '8:379', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 262,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_380 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_380({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_380 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_380(properties:properties);
        }
            @override
                _Widget_8_380State createState() => _Widget_8_380State(properties);
            }
            class _Widget_8_380State extends BaseState<Widget_8_380> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 228;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:380', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_380State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_380();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:380', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:380', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 228,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_381(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_381 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_381({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_381 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_381(properties:properties);
        }
            @override
                _Widget_8_381State createState() => _Widget_8_381State(properties);
            }
            class _Widget_8_381State extends BaseState<Widget_8_381> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 196;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:381', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_381State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_381();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:381', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:381', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 196,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_382(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_382 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_382({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_382 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_382(properties:properties);
        }
            @override
                _Widget_8_382State createState() => _Widget_8_382State(properties);
            }
            class _Widget_8_382State extends BaseState<Widget_8_382> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 196;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:382', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_382State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_382();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:382', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:382', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 155,
                                height: 196,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_383(key:UniqueKey()), 
                                                    const SizedBox(height: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_384(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_383 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_383({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_383 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_383(properties:properties);
        }
            @override
                _Widget_8_383State createState() => _Widget_8_383State(properties);
            }
            class _Widget_8_383State extends BaseState<Widget_8_383> {
                bool visible = true;
                bool isLoaded = false;
                double width = 128;
                double height = 128;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:383', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_383State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
                    var image = const Image(
                        image: AssetImage('images/8_383', package:'jinbeanpod_83904710_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_8_383();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:383', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:383', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 128,
                                height: 128,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        fit: BoxFit.cover,
                                                                        child: image,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_384 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 1''';
        final String name = r'''Depth 5, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_384({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_384 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_384(properties:properties);
        }
            @override
                _Widget_8_384State createState() => _Widget_8_384State(properties);
            }
            class _Widget_8_384State extends BaseState<Widget_8_384> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 52;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:384', componentName:r'''Depth 5, Frame 1''');
                
                _Widget_8_384State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 1');
            }            
            
            var painter = Node_8_384();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 1''', id: '8:384', widget: this, componentName:r'''Depth 5, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 1''', id: '8:384', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 155,
                                height: 52,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_385(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 0), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_387(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_385 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_385({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_385 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_385(properties:properties);
        }
            @override
                _Widget_8_385State createState() => _Widget_8_385State(properties);
            }
            class _Widget_8_385State extends BaseState<Widget_8_385> {
                bool visible = true;
                bool isLoaded = false;
                double width = 141;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:385', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_385State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_385();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:385', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:385', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 141,
                                height: 28,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_386(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_386 extends StatefulWidget {
            
        final String nodeName = r'''Sophia Chen''';
        final String name = r'''Sophia Chen''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_386({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_386 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_386(properties:properties);
        }
            @override
                _Widget_8_386State createState() => _Widget_8_386State(properties);
            }
            class _Widget_8_386State extends BaseState<Widget_8_386> {
                bool visible = true;
                bool isLoaded = false;
                double width = 141;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Sophia Chen''', id: '8:386', componentName:r'''Sophia Chen''');
                
                _Widget_8_386State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Sophia Chen''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 22,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Sophia Chen''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Sophia Chen');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Sophia Chen''', id: '8:386', widget: this, componentName:r'''Sophia Chen''');
                ComponentDescendantNotification(name: r'''Sophia Chen''', id: '8:386', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 141,
                                height: 28,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_387 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 1''';
        final String name = r'''Depth 6, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_387({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_387 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_387(properties:properties);
        }
            @override
                _Widget_8_387State createState() => _Widget_8_387State(properties);
            }
            class _Widget_8_387State extends BaseState<Widget_8_387> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:387', componentName:r'''Depth 6, Frame 1''');
                
                _Widget_8_387State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 1');
            }            
            
            var painter = Node_8_387();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 1''', id: '8:387', widget: this, componentName:r'''Depth 6, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 1''', id: '8:387', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 155,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_388(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_388 extends StatefulWidget {
            
        final String nodeName = r'''Member since 2022''';
        final String name = r'''Member since 2022''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_388({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_388 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_388(properties:properties);
        }
            @override
                _Widget_8_388State createState() => _Widget_8_388State(properties);
            }
            class _Widget_8_388State extends BaseState<Widget_8_388> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Member since 2022''', id: '8:388', componentName:r'''Member since 2022''');
                
                _Widget_8_388State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Member since 2022''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Member since 2022''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Member since 2022');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Member since 2022''', id: '8:388', widget: this, componentName:r'''Member since 2022''');
                ComponentDescendantNotification(name: r'''Member since 2022''', id: '8:388', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 155,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(0, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_389 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 2''';
        final String name = r'''Depth 2, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_389({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_389 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_389(properties:properties);
        }
            @override
                _Widget_8_389State createState() => _Widget_8_389State(properties);
            }
            class _Widget_8_389State extends BaseState<Widget_8_389> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 47;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:389', componentName:r'''Depth 2, Frame 2''');
                
                _Widget_8_389State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 2');
            }            
            
            var painter = Node_8_389();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 2''', id: '8:389', widget: this, componentName:r'''Depth 2, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 2''', id: '8:389', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 47,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_390(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_390 extends StatefulWidget {
            
        final String nodeName = r'''Account''';
        final String name = r'''Account''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_390({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_390 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_390(properties:properties);
        }
            @override
                _Widget_8_390State createState() => _Widget_8_390State(properties);
            }
            class _Widget_8_390State extends BaseState<Widget_8_390> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Account''', id: '8:390', componentName:r'''Account''');
                
                _Widget_8_390State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Account''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Account''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Account');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Account''', id: '8:390', widget: this, componentName:r'''Account''');
                ComponentDescendantNotification(name: r'''Account''', id: '8:390', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_391 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 3''';
        final String name = r'''Depth 2, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_391({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_391 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_391(properties:properties);
        }
            @override
                _Widget_8_391State createState() => _Widget_8_391State(properties);
            }
            class _Widget_8_391State extends BaseState<Widget_8_391> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:391', componentName:r'''Depth 2, Frame 3''');
                
                _Widget_8_391State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 3');
            }            
            
            var painter = Node_8_391();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 3''', id: '8:391', widget: this, componentName:r'''Depth 2, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 3''', id: '8:391', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_392(key:UniqueKey()), 
                                                    const SizedBox(width: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_396(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_392 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_392({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_392 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_392(properties:properties);
        }
            @override
                _Widget_8_392State createState() => _Widget_8_392State(properties);
            }
            class _Widget_8_392State extends BaseState<Widget_8_392> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:392', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_392State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_392();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:392', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:392', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_393(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_393 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_393({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_393 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_393(properties:properties);
        }
            @override
                _Widget_8_393State createState() => _Widget_8_393State(properties);
            }
            class _Widget_8_393State extends BaseState<Widget_8_393> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:393', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_393State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_393();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:393', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:393', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_394())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_395()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_394 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_394({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_394 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_394(properties:properties);
        }
            @override
                _Widget_8_394State createState() => _Widget_8_394State(properties);
            }
            class _Widget_8_394State extends BaseState<Widget_8_394> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:394', componentName:r'''Vector - 0''');
                
                _Widget_8_394State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_394();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:394', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:394', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_395 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_395({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_395 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_395(properties:properties);
        }
            @override
                _Widget_8_395State createState() => _Widget_8_395State(properties);
            }
            class _Widget_8_395State extends BaseState<Widget_8_395> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:395', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_395State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_395();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:395', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:395', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_396 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_396({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_396 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_396(properties:properties);
        }
            @override
                _Widget_8_396State createState() => _Widget_8_396State(properties);
            }
            class _Widget_8_396State extends BaseState<Widget_8_396> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:396', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_396State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_396();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:396', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:396', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_397(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_397 extends StatefulWidget {
            
        final String nodeName = r'''Edit Profile''';
        final String name = r'''Edit Profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_397({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_397 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_397(properties:properties);
        }
            @override
                _Widget_8_397State createState() => _Widget_8_397State(properties);
            }
            class _Widget_8_397State extends BaseState<Widget_8_397> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Edit Profile''', id: '8:397', componentName:r'''Edit Profile''');
                
                _Widget_8_397State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Edit Profile''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Edit Profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Edit Profile');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Edit Profile''', id: '8:397', widget: this, componentName:r'''Edit Profile''');
                ComponentDescendantNotification(name: r'''Edit Profile''', id: '8:397', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_398 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 4''';
        final String name = r'''Depth 2, Frame 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_398({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_398 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_398(properties:properties);
        }
            @override
                _Widget_8_398State createState() => _Widget_8_398State(properties);
            }
            class _Widget_8_398State extends BaseState<Widget_8_398> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:398', componentName:r'''Depth 2, Frame 4''');
                
                _Widget_8_398State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 4');
            }            
            
            var painter = Node_8_398();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 4''', id: '8:398', widget: this, componentName:r'''Depth 2, Frame 4''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 4''', id: '8:398', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_399(key:UniqueKey()), 
                                                    const SizedBox(width: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_403(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_399 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_399({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_399 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_399(properties:properties);
        }
            @override
                _Widget_8_399State createState() => _Widget_8_399State(properties);
            }
            class _Widget_8_399State extends BaseState<Widget_8_399> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:399', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_399State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_399();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:399', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:399', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_400(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_400 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_400({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_400 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_400(properties:properties);
        }
            @override
                _Widget_8_400State createState() => _Widget_8_400State(properties);
            }
            class _Widget_8_400State extends BaseState<Widget_8_400> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:400', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_400State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_400();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:400', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:400', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_401())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 19 + 0, maxWidth: 19 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 19,
                                                                        height: 18,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_402()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_401 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_401({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_401 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_401(properties:properties);
        }
            @override
                _Widget_8_401State createState() => _Widget_8_401State(properties);
            }
            class _Widget_8_401State extends BaseState<Widget_8_401> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:401', componentName:r'''Vector - 0''');
                
                _Widget_8_401State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_401();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:401', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:401', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_402 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_402({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_402 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_402(properties:properties);
        }
            @override
                _Widget_8_402State createState() => _Widget_8_402State(properties);
            }
            class _Widget_8_402State extends BaseState<Widget_8_402> {
                bool visible = true;
                bool isLoaded = false;
                double width = 19;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:402', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_402State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_402();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:402', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:402', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 19,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_403 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_403({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_403 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_403(properties:properties);
        }
            @override
                _Widget_8_403State createState() => _Widget_8_403State(properties);
            }
            class _Widget_8_403State extends BaseState<Widget_8_403> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:403', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_403State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_403();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:403', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:403', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_404(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_404 extends StatefulWidget {
            
        final String nodeName = r'''Order History''';
        final String name = r'''Order History''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_404({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_404 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_404(properties:properties);
        }
            @override
                _Widget_8_404State createState() => _Widget_8_404State(properties);
            }
            class _Widget_8_404State extends BaseState<Widget_8_404> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Order History''', id: '8:404', componentName:r'''Order History''');
                
                _Widget_8_404State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Order History''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Order History''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Order History');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Order History''', id: '8:404', widget: this, componentName:r'''Order History''');
                ComponentDescendantNotification(name: r'''Order History''', id: '8:404', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_405 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 5''';
        final String name = r'''Depth 2, Frame 5''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_405({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_405 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_405(properties:properties);
        }
            @override
                _Widget_8_405State createState() => _Widget_8_405State(properties);
            }
            class _Widget_8_405State extends BaseState<Widget_8_405> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:405', componentName:r'''Depth 2, Frame 5''');
                
                _Widget_8_405State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 5''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 5');
            }            
            
            var painter = Node_8_405();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 5''', id: '8:405', widget: this, componentName:r'''Depth 2, Frame 5''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 5''', id: '8:405', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_406(key:UniqueKey()), 
                                                    const SizedBox(width: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_410(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_406 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_406({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_406 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_406(properties:properties);
        }
            @override
                _Widget_8_406State createState() => _Widget_8_406State(properties);
            }
            class _Widget_8_406State extends BaseState<Widget_8_406> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:406', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_406State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_406();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:406', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:406', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_407(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_407 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_407({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_407 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_407(properties:properties);
        }
            @override
                _Widget_8_407State createState() => _Widget_8_407State(properties);
            }
            class _Widget_8_407State extends BaseState<Widget_8_407> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:407', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_407State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_407();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:407', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:407', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_408())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 14 + 0, maxWidth: 14 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 14,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_409()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_408 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_408({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_408 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_408(properties:properties);
        }
            @override
                _Widget_8_408State createState() => _Widget_8_408State(properties);
            }
            class _Widget_8_408State extends BaseState<Widget_8_408> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:408', componentName:r'''Vector - 0''');
                
                _Widget_8_408State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_408();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:408', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:408', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_409 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_409({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_409 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_409(properties:properties);
        }
            @override
                _Widget_8_409State createState() => _Widget_8_409State(properties);
            }
            class _Widget_8_409State extends BaseState<Widget_8_409> {
                bool visible = true;
                bool isLoaded = false;
                double width = 14;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:409', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_409State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_409();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:409', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:409', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 14,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_410 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_410({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_410 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_410(properties:properties);
        }
            @override
                _Widget_8_410State createState() => _Widget_8_410State(properties);
            }
            class _Widget_8_410State extends BaseState<Widget_8_410> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:410', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_410State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_410();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:410', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:410', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_411(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_411 extends StatefulWidget {
            
        final String nodeName = r'''Saved Services''';
        final String name = r'''Saved Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_411({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_411 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_411(properties:properties);
        }
            @override
                _Widget_8_411State createState() => _Widget_8_411State(properties);
            }
            class _Widget_8_411State extends BaseState<Widget_8_411> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Saved Services''', id: '8:411', componentName:r'''Saved Services''');
                
                _Widget_8_411State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Saved Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Saved Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Saved Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Saved Services''', id: '8:411', widget: this, componentName:r'''Saved Services''');
                ComponentDescendantNotification(name: r'''Saved Services''', id: '8:411', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_412 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 6''';
        final String name = r'''Depth 2, Frame 6''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_412({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_412 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_412(properties:properties);
        }
            @override
                _Widget_8_412State createState() => _Widget_8_412State(properties);
            }
            class _Widget_8_412State extends BaseState<Widget_8_412> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:412', componentName:r'''Depth 2, Frame 6''');
                
                _Widget_8_412State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 6''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 6');
            }            
            
            var painter = Node_8_412();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 6''', id: '8:412', widget: this, componentName:r'''Depth 2, Frame 6''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 6''', id: '8:412', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_413(key:UniqueKey()), 
                                                    const SizedBox(width: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_417(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_413 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_413({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_413 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_413(properties:properties);
        }
            @override
                _Widget_8_413State createState() => _Widget_8_413State(properties);
            }
            class _Widget_8_413State extends BaseState<Widget_8_413> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:413', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_413State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_413();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:413', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:413', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_414(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_414 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_414({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_414 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_414(properties:properties);
        }
            @override
                _Widget_8_414State createState() => _Widget_8_414State(properties);
            }
            class _Widget_8_414State extends BaseState<Widget_8_414> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:414', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_414State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_414();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:414', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:414', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_415())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 18,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_416()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_415 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_415({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_415 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_415(properties:properties);
        }
            @override
                _Widget_8_415State createState() => _Widget_8_415State(properties);
            }
            class _Widget_8_415State extends BaseState<Widget_8_415> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:415', componentName:r'''Vector - 0''');
                
                _Widget_8_415State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_415();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:415', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:415', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_416 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_416({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_416 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_416(properties:properties);
        }
            @override
                _Widget_8_416State createState() => _Widget_8_416State(properties);
            }
            class _Widget_8_416State extends BaseState<Widget_8_416> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:416', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_416State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_416();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:416', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:416', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_417 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_417({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_417 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_417(properties:properties);
        }
            @override
                _Widget_8_417State createState() => _Widget_8_417State(properties);
            }
            class _Widget_8_417State extends BaseState<Widget_8_417> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:417', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_417State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_417();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:417', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:417', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_418(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_418 extends StatefulWidget {
            
        final String nodeName = r'''Switch to Provider''';
        final String name = r'''Switch to Provider''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_418({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_418 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_418(properties:properties);
        }
            @override
                _Widget_8_418State createState() => _Widget_8_418State(properties);
            }
            class _Widget_8_418State extends BaseState<Widget_8_418> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch to Provider''', id: '8:418', componentName:r'''Switch to Provider''');
                
                _Widget_8_418State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Switch to Provider''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch to Provider''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Switch to Provider');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Switch to Provider''', id: '8:418', widget: this, componentName:r'''Switch to Provider''');
                ComponentDescendantNotification(name: r'''Switch to Provider''', id: '8:418', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_419 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 7''';
        final String name = r'''Depth 2, Frame 7''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_419({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_419 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_419(properties:properties);
        }
            @override
                _Widget_8_419State createState() => _Widget_8_419State(properties);
            }
            class _Widget_8_419State extends BaseState<Widget_8_419> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 47;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:419', componentName:r'''Depth 2, Frame 7''');
                
                _Widget_8_419State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 7''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 7');
            }            
            
            var painter = Node_8_419();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 7''', id: '8:419', widget: this, componentName:r'''Depth 2, Frame 7''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 7''', id: '8:419', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 47,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_420(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_420 extends StatefulWidget {
            
        final String nodeName = r'''Settings''';
        final String name = r'''Settings''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_420({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_420 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_420(properties:properties);
        }
            @override
                _Widget_8_420State createState() => _Widget_8_420State(properties);
            }
            class _Widget_8_420State extends BaseState<Widget_8_420> {
                bool visible = true;
                bool isLoaded = false;
                double width = 358;
                double height = 23;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Settings''', id: '8:420', componentName:r'''Settings''');
                
                _Widget_8_420State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Settings''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((23/23).floor()) <=1 ? 1 : (23/23).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 18,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.2777777777777777,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Settings''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Settings');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Settings''', id: '8:420', widget: this, componentName:r'''Settings''');
                ComponentDescendantNotification(name: r'''Settings''', id: '8:420', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 358,
                                height: 23,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_421 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 8''';
        final String name = r'''Depth 2, Frame 8''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_421({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_421 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_421(properties:properties);
        }
            @override
                _Widget_8_421State createState() => _Widget_8_421State(properties);
            }
            class _Widget_8_421State extends BaseState<Widget_8_421> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 56;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 8''', id: '8:421', componentName:r'''Depth 2, Frame 8''');
                
                _Widget_8_421State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 8''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 8');
            }            
            
            var painter = Node_8_421();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 8''', id: '8:421', widget: this, componentName:r'''Depth 2, Frame 8''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 8''', id: '8:421', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 56,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 16,
                    //runSpacing: 16, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_422(key:UniqueKey()), 
                                                    const SizedBox(width: 16), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_426(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_422 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_422({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_422 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_422(properties:properties);
        }
            @override
                _Widget_8_422State createState() => _Widget_8_422State(properties);
            }
            class _Widget_8_422State extends BaseState<Widget_8_422> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 40;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:422', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_422State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_422();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:422', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:422', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 40,
                                height: 40,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_423(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_423 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_423({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_423 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_423(properties:properties);
        }
            @override
                _Widget_8_423State createState() => _Widget_8_423State(properties);
            }
            class _Widget_8_423State extends BaseState<Widget_8_423> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:423', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_423State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_423();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:423', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:423', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_424())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 20,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_425()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_424 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_424({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_424 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_424(properties:properties);
        }
            @override
                _Widget_8_424State createState() => _Widget_8_424State(properties);
            }
            class _Widget_8_424State extends BaseState<Widget_8_424> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:424', componentName:r'''Vector - 0''');
                
                _Widget_8_424State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_424();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:424', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:424', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_425 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_425({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_425 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_425(properties:properties);
        }
            @override
                _Widget_8_425State createState() => _Widget_8_425State(properties);
            }
            class _Widget_8_425State extends BaseState<Widget_8_425> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:425', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_425State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_425();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:425', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:425', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_426 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_426({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_426 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_426(properties:properties);
        }
            @override
                _Widget_8_426State createState() => _Widget_8_426State(properties);
            }
            class _Widget_8_426State extends BaseState<Widget_8_426> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:426', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_426State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_426();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:426', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:426', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_8_427(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_427 extends StatefulWidget {
            
        final String nodeName = r'''Language''';
        final String name = r'''Language''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_427({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_427 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_427(properties:properties);
        }
            @override
                _Widget_8_427State createState() => _Widget_8_427State(properties);
            }
            class _Widget_8_427State extends BaseState<Widget_8_427> {
                bool visible = true;
                bool isLoaded = false;
                double width = 302;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Language''', id: '8:427', componentName:r'''Language''');
                
                _Widget_8_427State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Language''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 16,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 23, 13, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Language''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Language');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Language''', id: '8:427', widget: this, componentName:r'''Language''');
                ComponentDescendantNotification(name: r'''Language''', id: '8:427', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 302,
                                height: 24,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_428 extends StatefulWidget {
            
        final String nodeName = r'''Depth 1, Frame 1''';
        final String name = r'''Depth 1, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_428({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_428 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_428(properties:properties);
        }
            @override
                _Widget_8_428State createState() => _Widget_8_428State(properties);
            }
            class _Widget_8_428State extends BaseState<Widget_8_428> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 95;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:428', componentName:r'''Depth 1, Frame 1''');
                
                _Widget_8_428State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 1, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 1, Frame 1');
            }            
            
            var painter = Node_8_428();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 1, Frame 1''', id: '8:428', widget: this, componentName:r'''Depth 1, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 1, Frame 1''', id: '8:428', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 95,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_429(key:UniqueKey()), 
                                                    const SizedBox(height: 0), 
                                                    Widget_8_458(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_429 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 0''';
        final String name = r'''Depth 2, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_429({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_429 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_429(properties:properties);
        }
            @override
                _Widget_8_429State createState() => _Widget_8_429State(properties);
            }
            class _Widget_8_429State extends BaseState<Widget_8_429> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 75;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:429', componentName:r'''Depth 2, Frame 0''');
                
                _Widget_8_429State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 0');
            }            
            
            var painter = Node_8_429();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 0''', id: '8:429', widget: this, componentName:r'''Depth 2, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 0''', id: '8:429', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 75,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_430(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_437(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_444(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(width: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_451(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_430 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 0''';
        final String name = r'''Depth 3, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_430({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_430 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_430(properties:properties);
        }
            @override
                _Widget_8_430State createState() => _Widget_8_430State(properties);
            }
            class _Widget_8_430State extends BaseState<Widget_8_430> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:430', componentName:r'''Depth 3, Frame 0''');
                
                _Widget_8_430State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 0');
            }            
            
            var painter = Node_8_430();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 0''', id: '8:430', widget: this, componentName:r'''Depth 3, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 0''', id: '8:430', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_431(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_435(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_431 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_431({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_431 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_431(properties:properties);
        }
            @override
                _Widget_8_431State createState() => _Widget_8_431State(properties);
            }
            class _Widget_8_431State extends BaseState<Widget_8_431> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:431', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_431State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_431();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:431', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:431', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_432(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_432 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_432({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_432 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_432(properties:properties);
        }
            @override
                _Widget_8_432State createState() => _Widget_8_432State(properties);
            }
            class _Widget_8_432State extends BaseState<Widget_8_432> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:432', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_432State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_432();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:432', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:432', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_433())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_434()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_433 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_433({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_433 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_433(properties:properties);
        }
            @override
                _Widget_8_433State createState() => _Widget_8_433State(properties);
            }
            class _Widget_8_433State extends BaseState<Widget_8_433> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:433', componentName:r'''Vector - 0''');
                
                _Widget_8_433State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_433();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:433', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:433', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_434 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_434({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_434 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_434(properties:properties);
        }
            @override
                _Widget_8_434State createState() => _Widget_8_434State(properties);
            }
            class _Widget_8_434State extends BaseState<Widget_8_434> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:434', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_434State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_434();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:434', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:434', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_435 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_435({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_435 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_435(properties:properties);
        }
            @override
                _Widget_8_435State createState() => _Widget_8_435State(properties);
            }
            class _Widget_8_435State extends BaseState<Widget_8_435> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:435', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_435State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_435();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:435', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:435', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_436(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_436 extends StatefulWidget {
            
        final String nodeName = r'''Home''';
        final String name = r'''Home''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_436({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_436 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_436(properties:properties);
        }
            @override
                _Widget_8_436State createState() => _Widget_8_436State(properties);
            }
            class _Widget_8_436State extends BaseState<Widget_8_436> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home''', id: '8:436', componentName:r'''Home''');
                
                _Widget_8_436State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(28, 30, 28, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Home');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Home''', id: '8:436', widget: this, componentName:r'''Home''');
                ComponentDescendantNotification(name: r'''Home''', id: '8:436', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 35,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_437 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 2''';
        final String name = r'''Depth 3, Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_437({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_437 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_437(properties:properties);
        }
            @override
                _Widget_8_437State createState() => _Widget_8_437State(properties);
            }
            class _Widget_8_437State extends BaseState<Widget_8_437> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:437', componentName:r'''Depth 3, Frame 2''');
                
                _Widget_8_437State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 2');
            }            
            
            var painter = Node_8_437();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 2''', id: '8:437', widget: this, componentName:r'''Depth 3, Frame 2''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 2''', id: '8:437', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_158(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_438(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_442(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_438 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_438({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_438 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_438(properties:properties);
        }
            @override
                _Widget_8_438State createState() => _Widget_8_438State(properties);
            }
            class _Widget_8_438State extends BaseState<Widget_8_438> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:438', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_438State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_438();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:438', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:438', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_439(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_439 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_439({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_439 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_439(properties:properties);
        }
            @override
                _Widget_8_439State createState() => _Widget_8_439State(properties);
            }
            class _Widget_8_439State extends BaseState<Widget_8_439> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:439', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_439State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_439();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:439', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:439', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_440())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 18 + 0, maxWidth: 18 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 18,
                                                                        height: 18,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_441()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_440 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_440({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_440 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_440(properties:properties);
        }
            @override
                _Widget_8_440State createState() => _Widget_8_440State(properties);
            }
            class _Widget_8_440State extends BaseState<Widget_8_440> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:440', componentName:r'''Vector - 0''');
                
                _Widget_8_440State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_440();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:440', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:440', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_441 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_441({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_441 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_441(properties:properties);
        }
            @override
                _Widget_8_441State createState() => _Widget_8_441State(properties);
            }
            class _Widget_8_441State extends BaseState<Widget_8_441> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:441', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_441State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_441();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:441', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:441', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 18,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_442 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_442({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_442 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_442(properties:properties);
        }
            @override
                _Widget_8_442State createState() => _Widget_8_442State(properties);
            }
            class _Widget_8_442State extends BaseState<Widget_8_442> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:442', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_442State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_442();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:442', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:442', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_443(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_443 extends StatefulWidget {
            
        final String nodeName = r'''Services''';
        final String name = r'''Services''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_443({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_443 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_443(properties:properties);
        }
            @override
                _Widget_8_443State createState() => _Widget_8_443State(properties);
            }
            class _Widget_8_443State extends BaseState<Widget_8_443> {
                bool visible = true;
                bool isLoaded = false;
                double width = 52;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Services''', id: '8:443', componentName:r'''Services''');
                
                _Widget_8_443State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Services''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Services''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Services');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Services''', id: '8:443', widget: this, componentName:r'''Services''');
                ComponentDescendantNotification(name: r'''Services''', id: '8:443', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 52,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_444 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 1''';
        final String name = r'''Depth 3, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_444({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_444 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_444(properties:properties);
        }
            @override
                _Widget_8_444State createState() => _Widget_8_444State(properties);
            }
            class _Widget_8_444State extends BaseState<Widget_8_444> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:444', componentName:r'''Depth 3, Frame 1''');
                
                _Widget_8_444State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 1');
            }            
            
            var painter = Node_8_444();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 1''', id: '8:444', widget: this, componentName:r'''Depth 3, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 1''', id: '8:444', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => const Widget_8_292(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_445(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_449(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                            )
                );
            }
        }
        

        class Widget_8_445 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_445({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_445 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_445(properties:properties);
        }
            @override
                _Widget_8_445State createState() => _Widget_8_445State(properties);
            }
            class _Widget_8_445State extends BaseState<Widget_8_445> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:445', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_445State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_445();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:445', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:445', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_446(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_446 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_446({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_446 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_446(properties:properties);
        }
            @override
                _Widget_8_446State createState() => _Widget_8_446State(properties);
            }
            class _Widget_8_446State extends BaseState<Widget_8_446> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:446', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_446State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_446();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:446', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:446', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_447())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 15 + 0, maxHeight: 15 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 15,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_448()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_447 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_447({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_447 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_447(properties:properties);
        }
            @override
                _Widget_8_447State createState() => _Widget_8_447State(properties);
            }
            class _Widget_8_447State extends BaseState<Widget_8_447> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:447', componentName:r'''Vector - 0''');
                
                _Widget_8_447State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_447();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:447', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:447', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_448 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_448({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_448 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_448(properties:properties);
        }
            @override
                _Widget_8_448State createState() => _Widget_8_448State(properties);
            }
            class _Widget_8_448State extends BaseState<Widget_8_448> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:448', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_448State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_448();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:448', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:448', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_449 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_449({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_449 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_449(properties:properties);
        }
            @override
                _Widget_8_449State createState() => _Widget_8_449State(properties);
            }
            class _Widget_8_449State extends BaseState<Widget_8_449> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:449', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_449State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_449();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:449', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:449', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_450(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_450 extends StatefulWidget {
            
        final String nodeName = r'''Community''';
        final String name = r'''Community''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_450({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_450 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_450(properties:properties);
        }
            @override
                _Widget_8_450State createState() => _Widget_8_450State(properties);
            }
            class _Widget_8_450State extends BaseState<Widget_8_450> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Community''', id: '8:450', componentName:r'''Community''');
                
                _Widget_8_450State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Community''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Community''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Community');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Community''', id: '8:450', widget: this, componentName:r'''Community''');
                ComponentDescendantNotification(name: r'''Community''', id: '8:450', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 68,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_451 extends StatefulWidget {
            
        final String nodeName = r'''Depth 3, Frame 3''';
        final String name = r'''Depth 3, Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_451({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_451 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_451(properties:properties);
        }
            @override
                _Widget_8_451State createState() => _Widget_8_451State(properties);
            }
            class _Widget_8_451State extends BaseState<Widget_8_451> {
                bool visible = true;
                bool isLoaded = false;
                double width = 83.5;
                double height = 54;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:451', componentName:r'''Depth 3, Frame 3''');
                
                _Widget_8_451State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 3, Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 3, Frame 3');
            }            
            
            var painter = Node_8_451();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 3, Frame 3''', id: '8:451', widget: this, componentName:r'''Depth 3, Frame 3''');
                ComponentDescendantNotification(name: r'''Depth 3, Frame 3''', id: '8:451', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 83.5,
                                height: 54,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 4,
                    //runSpacing: 4, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_452(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    const SizedBox(height: 4), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_456(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_452 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 0''';
        final String name = r'''Depth 4, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_452({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_452 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_452(properties:properties);
        }
            @override
                _Widget_8_452State createState() => _Widget_8_452State(properties);
            }
            class _Widget_8_452State extends BaseState<Widget_8_452> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:452', componentName:r'''Depth 4, Frame 0''');
                
                _Widget_8_452State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 0');
            }            
            
            var painter = Node_8_452();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 0''', id: '8:452', widget: this, componentName:r'''Depth 4, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 0''', id: '8:452', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 32,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.center,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_8_453(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_453 extends StatefulWidget {
            
        final String nodeName = r'''Depth 5, Frame 0''';
        final String name = r'''Depth 5, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_453({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_453 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_453(properties:properties);
        }
            @override
                _Widget_8_453State createState() => _Widget_8_453State(properties);
            }
            class _Widget_8_453State extends BaseState<Widget_8_453> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:453', componentName:r'''Depth 5, Frame 0''');
                
                _Widget_8_453State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 5, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 5, Frame 0');
            }            
            
            var painter = Node_8_453();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 5, Frame 0''', id: '8:453', widget: this, componentName:r'''Depth 5, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 5, Frame 0''', id: '8:453', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 24 + 0, maxWidth: 24 + 0,
                                                                        minHeight: 24 + 0, maxHeight: 24 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 24,
                                                                        height: 24,
                                                                        
                                                                        child: const Widget_8_454())), 
                                                    OverflowBox( 
                                                                        alignment: const Alignment(-1, -1),
                                                                        minWidth: 20 + 0, maxWidth: 20 + 0,
                                                                        minHeight: 19 + 0, maxHeight: 19 + 0,
                                                                        child:Container(
                                                                        alignment: const Alignment(-1, -1),
                                                                        margin: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                                                        width: 20,
                                                                        height: 19,
                                                                        
                                                                        child: 
                                                                    const TransparentPointer(
                                                                        child: Widget_8_455()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_454 extends StatefulWidget {
            
        final String nodeName = r'''Vector - 0''';
        final String name = r'''Vector - 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_454({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_454 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_454(properties:properties);
        }
            @override
                _Widget_8_454State createState() => _Widget_8_454State(properties);
            }
            class _Widget_8_454State extends BaseState<Widget_8_454> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector - 0''', id: '8:454', componentName:r'''Vector - 0''');
                
                _Widget_8_454State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector - 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Vector - 0');
            }            
            
            var painter = Node_8_454();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Vector - 0''', id: '8:454', widget: this, componentName:r'''Vector - 0''');
                ComponentDescendantNotification(name: r'''Vector - 0''', id: '8:454', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 24,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_455 extends StatefulWidget {
            
        final String nodeName = r'''Depth 6, Frame 0''';
        final String name = r'''Depth 6, Frame 0''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_455({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_455 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_455(properties:properties);
        }
            @override
                _Widget_8_455State createState() => _Widget_8_455State(properties);
            }
            class _Widget_8_455State extends BaseState<Widget_8_455> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 19;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:455', componentName:r'''Depth 6, Frame 0''');
                
                _Widget_8_455State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 6, Frame 0''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 6, Frame 0');
            }            
            
            var painter = Node_8_455();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 6, Frame 0''', id: '8:455', widget: this, componentName:r'''Depth 6, Frame 0''');
                ComponentDescendantNotification(name: r'''Depth 6, Frame 0''', id: '8:455', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 20,
                                height: 19,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_456 extends StatefulWidget {
            
        final String nodeName = r'''Depth 4, Frame 1''';
        final String name = r'''Depth 4, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_456({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_456 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_456(properties:properties);
        }
            @override
                _Widget_8_456State createState() => _Widget_8_456State(properties);
            }
            class _Widget_8_456State extends BaseState<Widget_8_456> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:456', componentName:r'''Depth 4, Frame 1''');
                
                _Widget_8_456State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 4, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 4, Frame 1');
            }            
            
            var painter = Node_8_456();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 4, Frame 1''', id: '8:456', widget: this, componentName:r'''Depth 4, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 4, Frame 1''', id: '8:456', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_8_457(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_8_457 extends StatefulWidget {
            
        final String nodeName = r'''Profile''';
        final String name = r'''Profile''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_457({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_457 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_457(properties:properties);
        }
            @override
                _Widget_8_457State createState() => _Widget_8_457State(properties);
            }
            class _Widget_8_457State extends BaseState<Widget_8_457> {
                bool visible = true;
                bool isLoaded = false;
                double width = 39;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Profile''', id: '8:457', componentName:r'''Profile''');
                
                _Widget_8_457State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Profile''';
            String get characters {
                return chars;
            }
            set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = characters.split('\n');
                if(paragraphSpacing > 0 && pars.isNotEmpty) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        characters,
                        style: textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = const TextStyle(
                                fontSize: 12,
                                fontFamily: 'Be Vietnam Pro',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.5,
                                color: Color.fromRGBO(156, 133, 74, 1)
                            );
                            try{
                                return GoogleFonts.getFont('Be Vietnam Pro',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Profile''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Profile');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Profile''', id: '8:457', widget: this, componentName:r'''Profile''');
                ComponentDescendantNotification(name: r'''Profile''', id: '8:457', widget: this).dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                padding: const EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 39,
                                height: 18,
                                alignment: const Alignment(-1, -1),
                                child: Align(
                                    alignment: const Alignment(-1, -1),
                                    child: textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_8_458 extends StatefulWidget {
            
        final String nodeName = r'''Depth 2, Frame 1''';
        final String name = r'''Depth 2, Frame 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        const Widget_8_458({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_8_458 createInstance({Map<String, dynamic> properties = const {}}){
            return Widget_8_458(properties:properties);
        }
            @override
                _Widget_8_458State createState() => _Widget_8_458State(properties);
            }
            class _Widget_8_458State extends BaseState<Widget_8_458> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:458', componentName:r'''Depth 2, Frame 1''');
                
                _Widget_8_458State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(const Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Depth 2, Frame 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', widget.hashCode, 'Depth 2, Frame 1');
            }            
            
            var painter = Node_8_458();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(widget.hashCode)){
              globals.elementInstances.remove(widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mqWidth = mq.size.width * mq.devicePixelRatio;
                var mqHeight = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[widget.hashCode] = globals.Elem(name: r'''Depth 2, Frame 1''', id: '8:458', widget: this, componentName:r'''Depth 2, Frame 1''');
                ComponentDescendantNotification(name: r'''Depth 2, Frame 1''', id: '8:458', widget: this).dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: const Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: width, maxWidth: width, minHeight: height, maxHeight: height),
                                width: 390,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(width, height), 
                                    painter: painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

                class BendisWidget extends StatefulWidget {
  const BendisWidget({super.key});

                    @override
                    _BendisWidgetState createState() {
                        
                                        globals.screenClasses['welcome'] = globals.Elem(
                                            name:'welcome', 
                                            id:'8:3', 
                                            widget:const Widget_8_3(),
                                        );
                                        globals.screenClasses['welcome']?.type = 'screens';
                                        

                        return _BendisWidgetState();
                    }
                }

                class _BendisWidgetState extends State<BendisWidget> {

                    bool isLoadedOnce = false;
                    @override
                    void initState() {
                        super.initState();
                        if(!isLoadedOnce) {
                            isLoadedOnce = true;
                            WidgetsBinding.instance.addPostFrameCallback((_){
                                
                                Timer(const Duration(milliseconds: 1), () => globals.triggerEvent('apploaded') );
                            });
                        }
                    }

                    @override
                    Widget build(BuildContext context) {
                        var screen =  const Widget_8_3();
                        globals.currentScreenName = screen.nodeName;
                        return screen;
                    }
                }
                